This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-19T17:21:14.052Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.github/
  workflows/
    check-formatting.yml
config/
  themes/
    gruvbox/
      default.nix
    spongebob/
      default.nix
    default.nix
  color-scheme.nix
  colors.nix
  default.nix
  system-theme.nix
system/
  with/
    desktop-environment/
      darwin.nix
      gnome.nix
      hyprland.nix
      sway.nix
    hardware/
      vm.nix
    trait/
      allow-unfree-packages.nix
      has-swapfile.nix
      ssh-enabled.nix
    user/
      with/
        desktop-environment/
          hyperland.nix
        development-environment/
          binwarden/
            default.nix
          bitwarden/
            default.nix
          dotfiles/
            default.nix
          nix/
            default.nix
          notes/
            default.nix
        program/
          neovim/
            auto-commands/
              default.nix
            colors/
              default.nix
            commands/
              default.nix
              jump_down_half_a_page.lua
              jump_up_half_a_page.lua
              search_buffers.lua
              search_commands.lua
              search_keymaps.lua
              search_marks.lua
              super_search.lua
            options/
              default.nix
            plugins/
              default.nix
              markdown-preview.css
            default.nix
            nixvim.nix
          audacity.nix
          azure-data-studio.nix
          b.nix
          bash.nix
          binwarden.nix
          bitwarden-cli.nix
          clang.nix
          d.nix
          direnv.nix
          docker-desktop.nix
          dolphin-emu.nix
          dotnet.nix
          emacs.nix
          fish.nix
          fzf.nix
          gh-dash.nix
          ghostty.nix
          gimp.nix
          git.nix
          github-cli.nix
          homebrew.nix
          ice.nix
          jira-cli.nix
          khal.nix
          kitty.nix
          lazygit.nix
          lazysql.nix
          markdown-mermaid-converter.nix
          mermaid-cli.nix
          minecraft.nix
          mkcert.nix
          neomutt.nix
          newsboat.nix
          nixfmt.nix
          node.nix
          nuke-docker.nix
          opentoonz.nix
          pika.nix
          powershell.nix
          prettierd.nix
          python3.9.nix
          python3.nix
          raycast.nix
          repomix.nix
          ripgrep.nix
          rust.nix
          sed.nix
          set-color-scheme.nix
          sqlite.nix
          starship.nix
          stylix.nix
          tmux.nix
          toggle-sleep-osx.nix
          toggle-theme.nix
          ungoogled-chromium.nix
          vim.nix
          vscode.nix
          weechat.nix
          wezterm.nix
          xdelta.nix
          zsh.nix
        secret/
          bw-cal-client-id.nix
          bw-cal-client-secret.nix
          bw-mail-password.nix
          email.nix
          freshrss.nix
          github.nix
          gmail-password.nix
          secrets.nix
          weechat-plugins-config.nix
        service/
          autoclone.nix
        trait/
          well-known-hosts.nix
      me.nix
      root.nix
      steve.nix
    home-manager.nix
    nix-darwin.nix
    nix.nix
  air.nix
  bw.nix
  minecraft.nix
  rss.nix
  vm.nix
terraform/
  terraform.tf
.envrc
.gitignore
bootstrap.sh
flake.lock
flake.nix
README.md
treefmt.nix

================================================================
Repository Files
================================================================

================
File: .github/workflows/check-formatting.yml
================
name: Check formatting

on:
  push:
    branches:
      - main
    tags:
      - "v*.*.*"
  pull_request:
    branches:
      - main

jobs:
  check_formatting:
    name: Check formatting
    strategy:
      matrix:
        os: [ubuntu-24.04, macos-14]
    runs-on: ${{ matrix.os }}
    steps:
      - name: git checkout
        uses: actions/checkout@v4
      - name: Install Nix
        uses: cachix/install-nix-action@v27
      - name: Check formatting
        run: |
          nix develop .#formatting --command check formatting

================
File: config/themes/gruvbox/default.nix
================
{colors}: {
  dark = {
    base00 = colors.gruvbox.hard.dark.bg1;
    base01 = colors.gruvbox.hard.dark.bg2;
    base02 = colors.gruvbox.hard.dark.bg3;
    base03 = colors.gruvbox.hard.dark.bg4;
    base04 = colors.gruvbox.hard.dark.fg1;
    base05 = colors.gruvbox.hard.dark.fg2;
    base06 = colors.gruvbox.hard.dark.fg3;
    base07 = colors.gruvbox.hard.dark.fg4;
    base08 = colors.gruvbox.hard.dark.red;
    base09 = colors.gruvbox.hard.dark.orange;
    base0A = colors.gruvbox.hard.dark.yellow;
    base0B = colors.gruvbox.hard.dark.green;
    base0C = colors.gruvbox.hard.dark.aqua;
    base0D = colors.gruvbox.hard.dark.blue;
    base0E = colors.gruvbox.hard.dark.purple;
    base0F = colors.gruvbox.hard.dark.brown;
  };
  light = {
    base00 = colors.gruvbox.hard.light.bg1;
    base01 = colors.gruvbox.hard.light.bg2;
    base02 = colors.gruvbox.hard.light.bg3;
    base03 = colors.gruvbox.hard.light.bg4;
    base04 = colors.gruvbox.hard.light.fg1;
    base05 = colors.gruvbox.hard.light.fg2;
    base06 = colors.gruvbox.hard.light.fg3;
    base07 = colors.gruvbox.hard.light.fg4;
    base08 = colors.gruvbox.hard.light.red;
    base09 = colors.gruvbox.hard.light.orange;
    base0A = colors.gruvbox.hard.light.yellow;
    base0B = colors.gruvbox.hard.light.green;
    base0C = colors.gruvbox.hard.light.aqua;
    base0D = colors.gruvbox.hard.light.blue;
    base0E = colors.gruvbox.hard.light.purple;
    base0F = colors.gruvbox.hard.light.brown;
  };
}

================
File: config/themes/spongebob/default.nix
================
{colors}: {
  dark = {
    base00 = colors.spongebob.rockBottomNight0;
    base01 = colors.spongebob.bikiniBottomNight0;
    base02 = colors.spongebob.bikiniBottomNight1;
    base03 = colors.spongebob.bikiniBottomNight2;
    base04 = colors.spongebob.gooLagoon;
    base05 = colors.spongebob.bikiniBottomSand;
    base06 = colors.spongebob.kurstyKrabFloor;
    base07 = colors.spongebob.chumBucketGlove;
    base08 = colors.spongebob.mrKrabsRed;
    base09 = colors.spongebob.mermaidManOrange;
    base0A = colors.spongebob.spongebobYellow;
    base0B = colors.spongebob.planktonGreen;
    base0C = colors.spongebob.garyBlue;
    base0D = colors.spongebob.bikiniBottomDay0;
    base0E = colors.spongebob.jellyfishPurple;
    base0F = colors.spongebob.spongebobsPantsBrown;
  };
}

================
File: config/themes/default.nix
================
{colors}: let
in {
  spongebob = import ./spongebob {inherit colors;};
  gruvbox = import ./gruvbox {inherit colors;};
}

================
File: config/color-scheme.nix
================
"gruvbox"

================
File: config/colors.nix
================
{
  spongebob = {
    rockBottomNight0 = "#110f15";
    bikiniBottomNight0 = "#050a1b";
    bikiniBottomNight1 = "#050a1b";
    bikiniBottomNight2 = "#2d9db8";
    gooLagoon = "#254657";
    bikiniBottomSand = "D8E4B9";
    krustyKrabFloor = "#3A662F";
    chumBucketGlove = "#637bc8";
    mrKrabsRed = "#FF3B3f";
    mermaidManOrange = "#FBAC12";
    spongebobYellow = "#F9E500";
    planktonGreen = "#3A662F";
    garyBlue = "#77BCDD";
    bikiniBottomDay0 = "#00A9E0";
    jellyfishPurple = "#D06D98";
    spongebobsPantsBrown = "#9E7A38";
  };
  gruvbox = {
    hard = {
      dark = {
        bg1 = "#161819"; # I darkened it a bit
        # bg1 = "#1d2021"; # ---- The default
        bg2 = "#3c3836"; # ---
        bg3 = "#504945"; # --
        bg4 = "#665c54"; # -
        fg1 = "#bdae93"; # +
        fg2 = "#d5c4a1"; # ++
        fg3 = "#ebdbb2"; # +++
        fg4 = "#fbf1c7"; # ++++
        red = "#fb4934";
        orange = "#fe8019";
        yellow = "#fabd2f";
        green = "#b8bb26";
        aqua = "#8ec07c";
        blue = "#83a598";
        purple = "#d3869b";
        brown = "#d65d0e";
      };
      light = {
        bg1 = "#f9f5d7";
        bg2 = "#ebdbb2";
        bg3 = "#d5c4a1";
        bg4 = "#bdae93";
        fg1 = "#665c54";
        fg2 = "#504945";
        fg3 = "#3c3836";
        fg4 = "#282828";
        red = "#9d0006";
        orange = "#af3a03";
        yellow = "#b57614";
        green = "#79740e";
        aqua = "#427b58";
        blue = "#076678";
        purple = "#8f3f71";
        brown = "#d65d0e";
      };
    };
  };
}

================
File: config/default.nix
================
{...}: let
  colors = import ./colors.nix;
in {
  colors = colors;
  themes = import ./themes {inherit colors;};
  activeTheme = {
    colorScheme = import ./color-scheme.nix;
    systemTheme = import ./system-theme.nix;
  };
}

================
File: config/system-theme.nix
================
"dark"

================
File: system/with/desktop-environment/darwin.nix
================
{
  inputs,
  pkgs,
  ...
}: {
  services.nix-daemon.enable = true;

  # Avoids a logout/login cycle
  system.activationScripts.postUserActivation.text = ''
    /System/Library/PrivateFrameworks/SystemAdministration.framework/Resources/activateSettings -u
  '';

  # Turns on key mapping
  system.keyboard.enableKeyMapping = true;

  # Remaps caps lock to escape
  system.keyboard.remapCapsLockToControl = true;

  # Whether to install documentation of packages from environment.systemPackages into the generated system path.
  documentation.enable = true;

  # Whether to install documentation distributed in packages’ /share/doc. Usually plain text and/or HTML. This also includes “doc” outputs.
  documentation.doc.enable = true;

  # Whether to install info pages and the info command. This also includes “info” outputs.
  documentation.info.enable = true;

  # Whether to install manual pages and the man command. This also includes “man” outputs.
  documentation.man.enable = true;

  # Shell script code called during global environment initialisation after all variables and
  # profileVariables have been set. This code is asumed to be shell-independent, which means you
  # should stick to pure sh without sh word split.
  environment.extraInit = "";

  # List of additional package outputs to be symlinked into /run/current-systemsandboxed environment that it will set up automatically
  # for each build. This prevents impurities in builds by disallowing access to dependencies outside
  # of the Nix store by using network and mount namespaces in a chroot environment.
  # It doesn’t affect derivation hashes, so changing this option will not trigger a rebuild of packages.
  nix.settings.sandbox = false;

  # NOTE: I might want to add some things to this to allow some impurities with the build. Homebrew, maybe.
  # Directories from the host filesystem to be included in the sandbox.
  # nix.settings.extra-sandbox-paths = [];

  # Sets the mouse tracking speed. Found in the “Mouse” section of “System Preferences”.
  # Set to -1.0 to disable mouse acceleration.
  system.defaults.".GlobalPreferences"."com.apple.mouse.scaling" = 1.0;

  # Sets the system-wide alert sound. Found under “Sound Effects” in the “Sound” section
  # of “System Preferences”. Look in “/System/Library/Sounds” for possible candidates.
  system.defaults.".GlobalPreferences"."com.apple.sound.beep.sound" = null;

  # Sets custom system preferences
  system.defaults.CustomSystemPreferences = {};

  # Sets custom user preferences
  system.defaults.CustomUserPreferences = {};

  # NOTE: Are these different?
  # Enables swiping left or right with two fingers to navigate backward or forward. The default is true.
  system.defaults.NSGlobalDomain.AppleEnableMouseSwipeNavigateWithScrolls =
    false;

  # Enables swiping left or right with two fingers to navigate backward or forward. The default is true.
  system.defaults.NSGlobalDomain.AppleEnableSwipeNavigateWithScrolls = false;

  # Sets the level of font smoothing (sub-pixel font rendering).
  # Type: null or one of 0, 1, 2
  system.defaults.NSGlobalDomain.AppleFontSmoothing = 2;

  # Set to ‘Dark’ to enable dark mode, or leave unset for normal mode.
  system.defaults.NSGlobalDomain.AppleInterfaceStyle = "Dark";

  # Whether to automatically switch between light and dark mode. The default is false.
  system.defaults.NSGlobalDomain.AppleInterfaceStyleSwitchesAutomatically = false;

  # Whether to enable the press-and-hold feature. The default is true.
  system.defaults.NSGlobalDomain.ApplePressAndHoldEnabled = true;

  # Jump to the spot that’s clicked on the scroll bar. The default is false.
  system.defaults.NSGlobalDomain.AppleScrollerPagingBehavior = true;

  # Whether to show all file extensions in Finder. The default is false.
  system.defaults.NSGlobalDomain.AppleShowAllExtensions = true;

  # Whether to always show hidden files. The default is false.
  system.defaults.NSGlobalDomain.AppleShowAllFiles = true;

  # When to show the scrollbars. Options are ‘WhenScrolling’, ‘Automatic’ and ‘Always’.
  # Type: null or one of “WhenScrolling”, “Automatic”, “Always”
  system.defaults.NSGlobalDomain.AppleShowScrollBars = "Always";

  # If you press and hold certain keyboard keys when in a text area,
  # the key’s character begins to repeat. For example, the Delete key continues
  # to remove text for as long as you hold it down.
  # This sets how long you must hold down the key before it starts repeating.
  system.defaults.NSGlobalDomain.InitialKeyRepeat = 0;

  # If you press and hold certain keyboard keys when in a text area, the key’s character begins to repeat.
  # For example, the Delete key continues to remove text for as long as you hold it down.
  # This sets how fast it repeats once it starts.
  system.defaults.NSGlobalDomain.KeyRepeat = 0;

  # Whether to enable automatic capitalization. The default is true.
  system.defaults.NSGlobalDomain.NSAutomaticCapitalizationEnabled = false;

  # Whether to enable smart dash substitution. The default is true.
  system.defaults.NSGlobalDomain.NSAutomaticDashSubstitutionEnabled = false;

  # Whether to enable inline predictive text. The default is true.
  system.defaults.NSGlobalDomain.NSAutomaticInlinePredictionEnabled = false;

  # Whether to enable smart period substitution. The default is true.
  system.defaults.NSGlobalDomain.NSAutomaticPeriodSubstitutionEnabled = false;

  # Whether to enable smart quote substitution. The default is true.
  system.defaults.NSGlobalDomain.NSAutomaticQuoteSubstitutionEnabled = false;

  # Whether to enable automatic spelling correction. The default is true.
  system.defaults.NSGlobalDomain.NSAutomaticSpellingCorrectionEnabled = false;

  # Whether to animate opening and closing of windows and popovers. The default is true.
  system.defaults.NSGlobalDomain.NSAutomaticWindowAnimationsEnabled = true;

  # Whether to save new documents to iCloud by default. The default is true.
  system.defaults.NSGlobalDomain.NSDocumentSaveNewDocumentsToCloud = false;

  # Whether to use expanded save panel by default. The default is false.
  system.defaults.NSGlobalDomain.NSNavPanelExpandedStateForSaveMode = true;

  # LOL what?
  # Whether to use expanded save panel by default. The default is false.
  system.defaults.NSGlobalDomain.NSNavPanelExpandedStateForSaveMode2 = true;

  # Whether to enable smooth scrolling. The default is true.
  system.defaults.NSGlobalDomain.NSScrollAnimationEnabled = true;

  # Whether to enable moving window by holding anywhere on it like on Linux. The default is false.
  system.defaults.NSGlobalDomain.NSWindowShouldDragOnGesture = true;

  # Whether to autohide the menu bar. The default is false.
  system.defaults.NSGlobalDomain._HIHideMenuBar = false;

  # Automatically install Mac OS software updates. Defaults to false.
  system.defaults.SoftwareUpdate.AutomaticallyInstallMacOSUpdates = false;

  # Enable Stage Manager Stage Manager arranges your recent windows into a single strip
  # for reduced clutter and quick access. Default is false.
  system.defaults.WindowManager.GloballyEnabled = true;

  # Grouping strategy when showing windows from an application. false means “One at a time” true means “All at once”
  # system.defaults.WindowManager.AppWindowGroupingBehavior = true;

  # Click wallpaper to reveal desktop Clicking your wallpaper will move all
  # windows out of the way to allow access to your desktop items and widgets.
  # Default is true. false means “Only in Stage Manager” true means “Always”
  system.defaults.WindowManager.EnableStandardClickToShowDesktop = false;

  # Auto hide stage strip showing recent apps. Default is false.
  system.defaults.WindowManager.AutoHide = true;

  # Hide items in Stage Manager.
  system.defaults.WindowManager.HideDesktop = false;

  # Hide widgets in Stage Manager.
  system.defaults.WindowManager.StageManagerHideWidgets = false;

  # Hide items on desktop.
  system.defaults.WindowManager.StandardHideDesktopIcons = false;

  # Hide widgets on desktop.
  system.defaults.WindowManager.StandardHideWidgets = false;

  # Whether to automatically hide and show the dock. The default is false.
  system.defaults.dock.autohide = true;

  # Sets the speed of the autohide delay. The default is given in the example.
  system.defaults.dock.autohide-delay = 100.0; # 0.24

  # Whether to automatically rearrange spaces based on most recent use. The default is true.
  system.defaults.dock.mru-spaces = false;

  # Persistent applications in the dock.
  system.defaults.dock.persistent-apps = [];

  # Persistent folders in the dock.
  system.defaults.dock.persistent-others = [];

  # Show recent applications in the dock. The default is true.
  system.defaults.dock.show-recents = false;

  # Whether to show warnings when change the file extension of files. The default is true.
  system.defaults.finder.FXEnableExtensionChangeWarning = false;

  # Change the default finder view. “icnv” = Icon view, “Nlsv” = List view, “clmv” = Column View, “Flwv” = Gallery View The default is icnv.
  system.defaults.finder.FXPreferredViewStyle = "Nlsv";

  # Whether to allow quitting of the Finder. The default is false.
  system.defaults.finder.QuitMenuItem = true;

  # Show path breadcrumbs in finder windows. The default is false.
  system.defaults.finder.ShowPathbar = true;

  # Show status bar at bottom of finder windows with item/disk space stats. The default is false.
  system.defaults.finder.ShowStatusBar = true;

  # Show status bar at bottom of finder windows with item/disk space stats. The default is false.
  system.defaults.finder._FXShowPosixPathInTitle = true;

  # Disables the ability for a user to access the console by typing “>console” for a username at the login window. Default is false.
  system.defaults.loginwindow.DisableConsoleAccess = true;

  # Allow users to login to the machine as guests using the Guest account. Default is true.
  system.defaults.loginwindow.GuestEnabled = false;

  # Text to be shown on the login window. Default is “\\U03bb”.
  system.defaults.loginwindow.LoginwindowText = "🗝️";

  # Displays login window as a name and password field instead of a list of users. Default is false.
  system.defaults.loginwindow.SHOWFULLNAME = true;

  # The filesystem path to which screencaptures should be written.
  system.defaults.screencapture.location = "~/Captures";

  # Show thumbnail after screencapture before writing to file. The default is true.
  system.defaults.screencapture.show-thumbnail = false;

  # 0 to enable Silent Clicking, 1 to disable. The default is 1.
  system.defaults.trackpad.ActuationStrength = 0;

  # Whether to enable trackpad tap to click. The default is false.
  system.defaults.trackpad.Clicking = true;

  # 0 to disable three finger tap, 2 to trigger Look up & data detectors. The default is 2.
  system.defaults.trackpad.TrackpadThreeFingerTapGesture = 0;

  # Whether to enable the startup chime.
  # By default, this option does not affect your system configuration in any way. However,
  # this means that after it has been set once, unsetting it will not return to the old behavior.
  # It will allow the setting to be controlled in System Settings, though.
  system.startup.chime = false;

  # Every once in a while, a new NixOS release may change configuration defaults in a way incompatible
  # with stateful data. For instance, if the default version of PostgreSQL changes, the new version will
  # probably be unable to read your existing databases. To prevent such breakage, you can set the value
  # of this option to the NixOS release with which you want to be compatible. The effect is that NixOS
  # will option defaults corresponding to the specified release (such as using an older version of PostgreSQL).
  system.stateVersion = 4;

  # The time zone used when displaying times and dates. See https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
  # or run sudo systemsetup -listtimezones for a comprehensive list of possible values for this setting.
  time.timeZone = "America/New_York";

  # A list of permissible login shells for user accounts. No need to mention /bin/sh and other shells that are available by default on macOS.
  programs.zsh.enable = true;
  #environment.loginShell = pkgs.zsh;
  environment.shells = [pkgs.zsh];
}

================
File: system/with/desktop-environment/gnome.nix
================
{pkgs, ...}: {
  config = {
    services.xserver.enable = true;
    services.xserver.displayManager.gdm.enable = true;
    services.xserver.desktopManager.gnome.enable = true;
    environment.gnome.excludePackages =
      (with pkgs; [gnome-photos gnome-tour gedit cheese epiphany yelp geary])
      ++ (with pkgs.gnome; [
        gnome-music
        gnome-characters
        tali
        iagno
        hitori
        atomix
        gnome-contacts
        gnome-initial-setup
      ]);
    programs.dconf.enable = true;
    environment.systemPackages = with pkgs; [gnome-tweaks];
  };
}

================
File: system/with/desktop-environment/hyprland.nix
================
{
  inputs,
  pkgs,
  ...
}: {
  programs.hyprland.enable = true;
  #programs.hyperland.package = inputs.hyperland.packages.${pkgs.stdenv.hostPlatform.system}.hyperland;
}

================
File: system/with/desktop-environment/sway.nix
================
{pkgs, ...}: {programs.sway.enable = true;}

================
File: system/with/hardware/vm.nix
================
{lib, ...}: {
  # Hardware

  boot.initrd.availableKernelModules = ["xhci_pci"];
  boot.initrd.kernelModules = [];
  boot.kernelModules = [];
  boot.extraModulePackages = [];
  fileSystems."/" = {
    device = "/dev/disk/by-label/nixos";
    fsType = "ext4";
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-label/boot";
    fsType = "vfat";
    options = ["fmask=0022" "dmask=0022"];
  };
  nixpkgs.hostPlatform = lib.mkDefault "aarch64-linux";

  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;

  system.stateVersion = "24.05";
}

================
File: system/with/trait/allow-unfree-packages.nix
================
{...}: {nixpkgs.config.allowUnfree = true;}

================
File: system/with/trait/has-swapfile.nix
================
{
  lib,
  config,
  ...
}:
with lib; let
  cfg = config.has-swapfile;
in {
  options.has-swapfile = {
    sizeGb = mkOption {
      type = types.int;
      default = 1;
    };
  };

  config = {
    swapDevices = [
      {
        device = "/swapfile";
        size = 1024 * cfg.sizeGb;
      }
    ];
  };
}

================
File: system/with/trait/ssh-enabled.nix
================
{...}: {
  services.openssh.enable = true;
  services.openssh.settings.PermitRootLogin = "yes";
  services.openssh.settings.PasswordAuthentication = false;
  networking.firewall.allowedTCPPorts = [22];
}

================
File: system/with/user/with/desktop-environment/hyperland.nix
================
{
  pkgs,
  lib,
  inputs,
  ...
}: {
  programs.hyperland.enable = true;
  programs.hyperland.package =
    inputs.hyperland.packages."${pkgs.system}".hyperland;
}

================
File: system/with/user/with/development-environment/binwarden/default.nix
================
{config, ...}: {
  home.sessionPath = ["/Users/me/bin/binwarden"];

  services.autoclone.repo.bitwarden-binwarden = {
    enable = true;
    url = "git@github.com:addisonbeck/binwarden.git";
    save-path = "${config.home.homeDirectory}/binwarden";
    ssh-key = "${config.age.secrets.github.path}";
  };
}

================
File: system/with/user/with/development-environment/bitwarden/default.nix
================
{config, ...}: {
  services.autoclone.repo.bitwarden-server = {
    enable = true;
    url = "git@github.com:bitwarden/server.git";
    save-path = "${config.home.homeDirectory}/bitwarden/server";
    ssh-key = "${config.age.secrets.github.path}";
  };
  services.autoclone.repo.bitwarden-clients = {
    enable = true;
    url = "git@github.com:bitwarden/clients.git";
    save-path = "${config.home.homeDirectory}/bitwarden/clients";
    ssh-key = "${config.age.secrets.github.path}";
  };
  services.autoclone.repo.bitwarden-directory-connector = {
    enable = true;
    url = "git@github.com:bitwarden/directory-connector.git";
    save-path = "${config.home.homeDirectory}/bitwarden/directory-connector";
    ssh-key = "${config.age.secrets.github.path}";
  };
  programs.direnv.config.whitelist.exact = [
    "${config.home.homeDirectory}/bitwarden/server"
    "${config.home.homeDirectory}/bitwarden/clients"
    "${config.home.homeDirectory}/bitwarden/directory-connector"
  ];
}

================
File: system/with/user/with/development-environment/dotfiles/default.nix
================
{config, ...}: {
  # For files and scripts that are still managed through the `d` cli
  home.sessionPath = [
    "/Users/me/dotfiles/bin"
  ];

  services.autoclone.repo.dotfiles = {
    enable = true;
    url = "git@github.com:addisonbeck/dotfiles.git";
    save-path = "${config.home.homeDirectory}/dotfiles";
    ssh-key = "${config.age.secrets.github.path}";
  };
}

================
File: system/with/user/with/development-environment/nix/default.nix
================
{config, ...}: {
  services.autoclone.repo.nix = {
    enable = true;
    url = "git@github.com:addisonbeck/nix.git";
    save-path = "${config.home.homeDirectory}/nix";
    ssh-key = "${config.age.secrets.github.path}";
  };
}

================
File: system/with/user/with/development-environment/notes/default.nix
================
{config, ...}: {
  services.autoclone.repo.notes = {
    enable = true;
    url = "git@github.com:addisonbeck/notes.git";
    save-path = "${config.home.homeDirectory}/notes";
    ssh-key = "${config.age.secrets.github.path}";
  };
  programs.direnv.config.whitelist.exact = ["${config.home.homeDirectory}/notes"];
}

================
File: system/with/user/with/program/neovim/auto-commands/default.nix
================
{conf, ...}: {
  autoCommands = [
    # disable semantic highlighting
    {
      event = ["LspAttach"];
      callback = {
        __raw = ''
          function(args)
            local client = vim.lsp.get_client_by_id(args.data.client_id)
            client.server_capabilities.semanticTokensProvider = nil
          end
        '';
      };
    }
    {
      event = [
        "FileType"
      ];
      pattern = [
        "qf"
        "help"
        "man"
        "lspinfo"
      ];
      callback = {
        __raw = ''
          function()
          vim.cmd([[
              set buflisted
              wincmd o
          ]])
          end
        '';
      };
    }
    # {
    #   event = [
    #     "BufEnter"
    #     "FileChangedShellPost"
    #     "Syntax"
    #     "TextChanged"
    #     "TextChangedI"
    #     "InsertLeave"
    #     "WinScrolled"
    #   ];
    #   pattern = [
    #     "*.markdown"
    #     "*.md"
    #   ];
    #   callback = {
    #     __raw = ''
    #       function()
    #         local function get_code_blocks()
    #           local parser = vim.treesitter.get_parser(0)
    #           local tree = parser:parse()[1]
    #           local root = tree:root()
    #
    #           local function find_code_blocks(node)
    #             local result = {}
    #             local function traverse(node)
    #               if node:type() == 'fenced_code_block' then
    #                 local start_row, start_col, end_row, end_col = node:range()
    #                 table.insert(result, {start_row, start_col, end_row, end_col})
    #               end
    #               for child in node:iter_children() do
    #                 traverse(child)
    #               end
    #             end
    #             traverse(node)
    #             return result
    #           end
    #
    #           return find_code_blocks(root)
    #         end
    #
    #         local code_blocks = get_code_blocks()
    #         local namespace = vim.api.nvim_create_namespace('ab_md_code_blocks')
    #         vim.api.nvim_buf_clear_namespace(0, namespace, 0, -1)
    #         for _, node in ipairs(code_blocks) do
    #           local start_row, start_col, end_row, end_col = unpack(node)
    #           vim.api.nvim_buf_set_extmark(0, namespace, start_row, start_col, {
    #             end_row = end_row,
    #             end_col = end_col,
    #             hl_group = "CodeFence",
    #             hl_eol = true,
    #           })
    #         end
    #       end
    #     '';
    #   };
    # }
    {
      event = ["BufWinEnter"];
      # TODO: Fine a real syntax highlighting solution for haxe
      pattern = ["*.hx"];
      command = "set filetype=ts";
    }
    {
      event = ["TextYankPost"];
      pattern = ["*"];
      command = ''lua vim.highlight.on_yank({higroup="ActiveYank", timeout=300})'';
    }
    {
      event = ["User"];
      pattern = ["TelescopePreviewerLoaded"];
      command = ''lua vim.wo.wrap = true'';
    }
    # {
    #   event = ["BufEnter"];
    #   pattern = ["octo://*/pull/*"];
    #   callback = {
    #     __raw = ''
    #       function(args)
    #         local bufnr = args.buf
    #         vim.defer_fn(function()
    #             local utils = require('octo.utils')
    #             local details = utils.get_details_from_buffer()
    #             if details and details.number and details.repo and details.owner then
    #                 local key = string.format("PR #%d: %s/%s", details.number, details.owner, details.repo)
    #                 vim.api.nvim_buf_set_name(bufnr, key)
    #             end
    #         end, 100)
    #       end
    #     '';
    #   };
    # }
  ];
}

================
File: system/with/user/with/program/neovim/colors/default.nix
================
{conf, ...}: {
  options = {
    background = "${conf.activeTheme.systemTheme}";
    termguicolors = false;
  };
  highlight = {
    CodeFence = {
      bg = conf.themes.${conf.activeTheme.colorScheme}.${conf.activeTheme.systemTheme}.base01;
    };
  };
  colorscheme = {
    gruvbox = {
      enable = conf.activeTheme.colorScheme == "gruvbox";
      settings = {
        transparent_mode = true;
        overrides = {
          SatelliteBackground.link = "SignColumn";
          SatelliteBar.link = "VisualMode";
          MatchParen.link = "Cursor";
          ActiveYank = {
            # "Incandescent Light Bulb
            bg = "#FFBB73";
            fg = "#000000";
          };
          NormalFloat = {
            bg = conf.themes.gruvbox.${conf.activeTheme.systemTheme}.base01;
          };
          SignColumn = {
            bg = "none";
            ctermbg = "none";
          };
          Nontext = {
            link = "Normal";
          };
          "@function" = {
            italic = false;
          };
          "@function.builtin" = {
            italic = false;
          };
          "@markup.list.checked.markdown" = {
            italic = true;
            fg = "#b8bb26";
          };
          Comment = {
            bold = false;
            italic = true;
          };
          Winbar = {
            bold = true;
            #fg = 4;
            bg = "NONE";
          };
          WinbarNC = {
            bold = true;
            #fg = 8;
            bg = "NONE";
          };
          "@markup.raw.markdown_inline" = {
            bg = conf.themes.${conf.activeTheme.colorScheme}.${conf.activeTheme.systemTheme}.base01;
            fg = conf.themes.${conf.activeTheme.colorScheme}.${conf.activeTheme.systemTheme}.base09;
            italic = false;
            bold = true;
          };
          # "@markup.raw.block.markdown" = {
          #   bg = conf.themes.${conf.activeTheme.colorScheme}.${conf.activeTheme.systemTheme}.base01;
          # };
          "@markup.link.label.markdown_inline" = {
            link = "GruvboxBlue";
          };
          "@markup.quote.markdown" = {
            italic = true;
            bold = false;
            bg =
              conf.themes.${conf.activeTheme.colorScheme}.${conf.activeTheme.systemTheme}.base01;
            fg =
              conf.themes.${conf.activeTheme.colorScheme}.${conf.activeTheme.systemTheme}.base0E;
          };
          "@markup.heading" = {
            underdotted = true;
            bold = true;
            italic = true;
          };
        };
      };
    };
  };
}

================
File: system/with/user/with/program/neovim/commands/default.nix
================
{lib, ...}: let
  mkVimKeymap = key: command: {
    action.__raw = command.action.__raw;
    key = command.vimKeymapBinding.key;
    mode = command.vimKeymapBinding.modes;
    options = {
      desc = command.description;
      silent = command.vimKeymapBinding.silent;
    };
  };

  mkVimUserCommand = key: command: {
    ${command.vimCommandName} = {
      command.__raw = command.action.__raw;
      desc = command.description;
    };
  };

  mkVimKeymaps = commandList: lib.attrValues (lib.mapAttrs mkVimKeymap commandList);
  mkVimUserCommands = commandList: lib.concatMapAttrs mkVimUserCommand commandList;

  # Command definitions are written as raw lua functions to force the
  # `desc` property to apply and appear in commands like :command. If a
  # simple string as passed as the command definition that is always used
  # instead of `desc`. Neovim upstream doesn't currently have any plans for
  # a true description field for commands 😔
  #
  # I've gotten into some nasty error messages writing my commands this
  # way. Rebuilding the config will say something like
  #
  # ```
  # unexpected token # '{'
  # ```
  #
  # The error will appear to be tied to a specific user command, but really
  # it will just show the first command defined in alphabetical order.
  #
  # The issue will really be related to a random defined command. I've
  # bumped into this by:
  #
  # - Leaving a `lua` call in front of a bit of lua code from converting it
  #   to a function.
  commands = {
    # TODO: Implement this command that will toggle back and forth between
    # the last two buffers:
    # ```
    # action = '':b#<cr>'';
    # ```
    searchGitFiles = {
      description = ''
        Search files in the current working directory's git repository
      '';
      # TODO: Add aliases or multiple vim command definitions for a single
      # command structure.
      vimCommandName = "SearchGitFiles";
      vimKeymapBinding = {
        modes = ["n" "v" "i"];
        key = "<C-g>";
        silent = true;
      };
      action.__raw = ''
        function()
          require('telescope.builtin').git_files({
            prompt_title = "",
            results_title = "",
            border = true,
            borderchars = {
              prompt = { "─", "│", " ", "│", "╭", "╮", "│", "│" },
              results = { "─", "│", "─", "│", "├", "┤", "╯", "╰" },
              preview = { "─", "│", "─", "│", "╭", "╮", "╯", "╰" },
            },
            layout_strategy = "center",
            layout_config = {
              height = 0.4,
              width = 0.6,
            },
          })
        end
      '';
    };
    searchDefinitions = {
      description = ''
        Search lsp definitions of the symbol under the cursor
      '';
      vimCommandName = "SearchDefintions";
      vimKeymapBinding = {
        modes = ["n" "v"];
        key = "<Space>d";
        silent = true;
      };
      action.__raw = ''
        function()
          require('telescope.builtin').lsp_definitions()
        end
      '';
    };
    searchImplementations = {
      description = ''
        Search lsp implementations of the symbol under the cursor
      '';
      vimCommandName = "SearchImplementations";
      vimKeymapBinding = {
        modes = ["n" "v"];
        key = "<Space>i";
        silent = true;
      };
      action.__raw = ''
        function()
          require('telescope.builtin').lsp_implementations()
        end
      '';
    };
    searchReferences = {
      description = ''
        Search lsp references of the symbol under the cursor
      '';
      vimCommandName = "SearchReferences";
      vimKeymapBinding = {
        modes = ["n" "v"];
        key = "<Space>r";
        silent = true;
      };
      action.__raw = ''
        function()
          require('telescope.builtin').lsp_references()
        end
      '';
    };
    searchMarks = {
      description = ''
        Search for marks with telescope.
      '';
      vimCommandName = "SearchMarks";
      vimKeymapBinding = {
        modes = ["n" "v"];
        key = "<C-m>";
        silent = true;
      };
      action.__raw = builtins.readFile ./search_marks.lua;
    };
    searchNotes = {
      description = ''Grep search my notes'';
      vimCommandName = "SearchNotes";
      vimKeymapBinding = {
        modes = ["n" "v"];
        key = "<C-n>";
        silent = true;
      };
      action.__raw = ''
        function()
          require('telescope.builtin').git_files({
            cwd = '~/notes',
            color_devicons = false,
            prompt_title = "",
            results_title = "",
            border = true,
            borderchars = {
              prompt = { "─", "│", " ", "│", "╭", "╮", "│", "│" },
              results = { "─", "│", "─", "│", "├", "┤", "╯", "╰" },
              preview = { "─", "│", "─", "│", "╭", "╮", "╯", "╰" },
            },
            layout_strategy = "center",
            layout_config = {
              --anchor = "N",
              height = 0.4,
              width = 0.6,
            },
          })
        end
      '';
    };
    liveGrepWordWithNotes = {
      description = ''
        Grep search the current directory. Also includes the ~/notes directory
      '';
      vimCommandName = "SearchLiveGrep";
      vimKeymapBinding = {
        modes = ["n" "v" "i"];
        key = "<C-0>";
        silent = true;
      };
      action.__raw = ''
        function()
          local picker = require('telescope-live-grep-args.shortcuts');
          picker.grep_word_under_cursor({
            search_dirs = {'.', '~/notes/'}
          });
        end
      '';
    };
    resumeLastOpenedTelescopePicker = {
      description = ''
        Resume the last opened telescope picker
      '';
      vimCommandName = "SearchResume";
      vimKeymapBinding = {
        modes = ["n" "v"];
        key = "<Space>.";
        silent = true;
      };
      action.__raw = ''
        function()
          require('telescope.builtin').resume();
        end
      '';
    };
    searchTelescopePickers = {
      description = ''
        Search telescope pickers
      '';
      vimCommandName = "SearchTelescopePickers";
      vimKeymapBinding = {
        modes = ["n" "v"];
        key = "<Space><Space>";
        silent = true;
      };
      action.__raw = ''
        function()
          require('telescope.builtin').pickers();
        end
      '';
    };
    renameCurrentFile = {
      description = ''
        Rename the currently open file
      '';
      vimCommandName = "RenameCurrentFile";
      vimKeymapBinding = {
        modes = ["n" "v"];
        key = "<Space>R";
        silent = true;
      };
      action.__raw = ''
        function()
          vim.lsp.buf.rename();
        end
      '';
    };
    spellCheck = {
      description = ''
        Open spell suggest for the symbol under the cursor
      '';
      vimCommandName = "Spellcheck";
      vimKeymapBinding = {
        modes = ["n" "v"];
        # I'd rather this be mapped to save all quit
        key = "<C-z>";
        silent = true;
      };
      action.__raw = ''
        function()
          require('telescope.builtin').spell_suggest({
            borderchars = {
              prompt = { "─", "│", " ", "│", "╭", "╮", "│", "│" },
              results = { "─", "│", "─", "│", "├", "┤", "╯", "╰" },
            },
            prompt_title = "";
            results_title = "";
            prompt_prefix = "";
            entry_prefix = "";
            selection_caret = "";
            layout_strategy = "cursor",
            layout_config = {
              height = 0.4,
              width = 0.2,
            },
          })
        end
      '';
    };
    runCodeAction = {
      description = ''
        Open code action suggestions for the diagnostic under the cursor
      '';
      vimCommandName = "RunCodeAction";
      vimKeymapBinding = {
        modes = ["n"];
        key = "CA";
        silent = true;
      };
      action.__raw = ''
        function()
          vim.lsp.buf.code_action()
        end
      '';
    };
    searchBuffers = {
      description = ''
        Search through the currently open vim buffers
      '';
      vimCommandName = "SearchBuffers";
      vimKeymapBinding = {
        modes = ["n" "v" "i"];
        key = "<C-b>";
        silent = true;
      };
      action.__raw = builtins.readFile ./search_buffers.lua;
    };
    searchOldfiles = {
      description = ''
        Search through vim's oldfiles
      '';
      vimCommandName = "SearchOldfiles";
      vimKeymapBinding = {
        modes = ["n" "v" "i"];
        key = "<C-o>";
        silent = true;
      };
      action.__raw = ''
        function()
          require('telescope.builtin').oldfiles();
        end
      '';
    };
    searchFileTree = {
      description = ''
        Open a file tree browser
      '';
      vimCommandName = "SearchFileTree";
      vimKeymapBinding = {
        modes = ["n" "v" "i"];
        key = "<C-t>";
        silent = true;
      };
      action.__raw = ''
        function()
          require('telescope').extensions.file_browser.file_browser({
            depth = 1,
            display_stat = false,
            git_status = false,
            layout_strategy = "horizontal",
            prompt_title = "";
            --results_title = "";
            preview_title = "";
            prompt_prefix = "";
            layout_config = {
              height = 0.99,
              preview_cutoff = 0,
              prompt_position = "bottom",
              width = 0.99,
              preview_width = 0.6,
            },
          });
        end
      '';
    };
    formatBuffer = {
      description = ''
        Format the open buffer
      '';
      vimCommandName = "FormatBuffer";
      vimKeymapBinding = {
        modes = ["n" "v" "i"];
        key = "<C-f>";
        silent = true;
      };
      action.__raw = ''
        function()
          vim.lsp.buf.format();
        end
      '';
    };
    copyRelativePath = {
      description = ''
        Copy the relative path (compared to the current open directory) of
        the file loaded in the open buffer
      '';
      vimCommandName = "CopyRelativePath";
      vimKeymapBinding = {
        modes = ["n" "v"];
        key = "<Space>crp";
        silent = true;
      };
      action.__raw = ''
        function()
          require("where-am-i.commands").copy_file_name({
            content = {
              file_path = {
                format = "present_working_dir_path"
              }
            }
          });
        end
      '';
    };
    copyFullPath = {
      description = ''
        Copy the full system path of the file loaded in the open buffer
      '';
      vimCommandName = "CopyFullPath";
      vimKeymapBinding = {
        modes = ["n" "v"];
        key = "<Space>cfp";
        silent = true;
      };
      action.__raw = ''
        function()
          require("where-am-i.commands").copy_file_name({
            content = {
              file_path = {
                format = "system_path"
              }
            }
          });
        end
      '';
    };
    copyFileName = {
      description = ''
        Copy the file name of the file loaded in the open buffer
      '';
      vimCommandName = "CopyFileName";
      vimKeymapBinding = {
        modes = ["n" "v"];
        key = "<Space>cfn";
        silent = true;
      };
      action.__raw = ''
        function()
          require("where-am-i.commands").copy_file_name({
            content = {
              file_path = {
                format = "filename_only"
              }
            }
          });
        end
      '';
    };
    generateGuid = {
      description = ''
        Generate a guid and paste it under the cursor
      '';
      vimCommandName = "GenerateGuid";
      vimKeymapBinding = {
        modes = ["n" "v" "i"];
        key = "<C-g>";
        silent = true;
      };
      action.__raw = ''
        function()
          vim.cmd.normal('silent! read !uuidgen')
        end
      '';
    };
    closeOtherBuffers = {
      description = ''
        Close all open buffers except for the currently loaded one
      '';
      vimCommandName = "Bd";
      vimKeymapBinding = {
        modes = ["n" "v" "i"];
        key = "<C-->";
        silent = true;
      };
      action.__raw = ''
        function()
          vim.cmd.normal('silent! execute \'%bd|e#|bd#')
        end
      '';
    };
    searchLspDiagnostics = {
      description = ''
        Search lsp diagnostics
      '';
      vimCommandName = "SearchLspDiagnostics";
      vimKeymapBinding = {
        modes = ["n" "v" "i"];
        key = "<C-0>";
        silent = true;
      };
      action.__raw = ''
        function()
          require('telescope.builtin').diagnostics()
        end
      '';
    };
    searchKeymaps = {
      description = ''
        Search registered keymaps
      '';
      vimCommandName = "SearchKeymaps";
      vimKeymapBinding = {
        modes = ["n" "v"];
        key = "<Space>k";
        silent = true;
      };
      action.__raw = builtins.readFile ./search_keymaps.lua;
    };
    searchCommands = {
      description = ''
        Search registered user commands
      '';
      vimCommandName = "SearchCommands";
      vimKeymapBinding = {
        modes = ["n" "v" "i"];
        key = "<C-c>";
        silent = true;
      };
      action.__raw = builtins.readFile ./search_commands.lua;
    };
    jumpDownHalfThePage = {
      description = "Jump down half of the screen height";
      vimCommandName = "JumpDownHalfAPage";
      vimKeymapBinding = {
        modes = ["n" "v"];
        key = "<S-j>";
        silent = true;
      };
      # This emulates the default behavior or <C-d>
      action.__raw = builtins.readFile ./jump_down_half_a_page.lua;
    };
    jumpUpHalfThePage = {
      description = "Jump up half of the screen height";
      vimCommandName = "JumpUpHalfAPage";
      vimKeymapBinding = {
        modes = ["n" "v"];
        key = "<S-k>";
        silent = true;
      };
      # This emulates the default behavior or <C-u>
      action.__raw = builtins.readFile ./jump_up_half_a_page.lua;
    };
    toggleNumberLine = {
      description = "Toggle line numbers";
      vimCommandName = "ToggleLineNumbers";
      vimKeymapBinding = {
        key = "<S-n>";
        modes = ["n"];
        silent = true;
      };
      action.__raw = ''
        function()
          vim.cmd('set relativenumber! nu!')
        end
      '';
    };
    checkDiagnostic = {
      description = ''
        Check the LSP diagnostic under the cursor
      '';
      vimCommandName = "CheckDiagnostic";
      vimKeymapBinding = {
        key = "DD";
        modes = ["n"];
        silent = true;
      };
      action.__raw = ''
        function()
          vim.diagnostic.open_float()
        end
      '';
    };
    checkHover = {
      description = ''
        Check the LSP hover under the cursor
      '';
      vimCommandName = "Hover";
      vimKeymapBinding = {
        key = "HH";
        modes = ["n"];
        silent = true;
      };
      action.__raw = ''
        function()
          vim.lsp.handlers["textDocument/hover"] = vim.lsp.with(
            vim.lsp.handlers.hover,
            {
              -- ["single", "double", "rounded", "solid", "shadow", or a list
              -- of characters]
              border = "solid",
              max_width = 80,
              max_height = 20,
            }
          )
          vim.lsp.buf.hover()
        end
      '';
    };
    focusSplitLeft = {
      description = ''
        Move focus to the split left of the current active split
      '';
      vimCommandName = "FocusSplitLeft";
      vimKeymapBinding = {
        key = "<C-h>";
        modes = ["n" "v" "i"];
        silent = true;
      };
      action.__raw = ''
        function()
          vim.cmd("wincmd h");
        end
      '';
    };
    focusSplitDown = {
      description = ''
        Move focus to the split below the current active split
      '';
      vimCommandName = "FocusSplitDown";
      vimKeymapBinding = {
        key = "<C-j>";
        modes = ["n" "v" "i"];
        silent = true;
      };
      action.__raw = ''
        function()
          vim.cmd("wincmd j");
        end
      '';
    };
    focusSplitUp = {
      description = ''
        Move focus to the split above the current active split
      '';
      vimCommandName = "FocusSplitUp";
      vimKeymapBinding = {
        key = "<C-k>";
        modes = ["n" "v" "i"];
        silent = true;
      };
      action.__raw = ''
        function()
          vim.cmd("wincmd k");
        end
      '';
    };
    focusSplitRight = {
      description = ''
        Move focus to the split to the right of the current active split
      '';
      vimCommandName = "FocusSplitRight";
      vimKeymapBinding = {
        key = "<C-l>";
        modes = ["n" "v" "i"];
        silent = true;
      };
      action.__raw = ''
        function()
          vim.cmd("wincmd l");
        end
      '';
    };
    jump = {
      description = ''
        Start a flash.nvim jump search
      '';
      vimCommandName = "Jump";
      vimKeymapBinding = {
        key = "s";
        modes = ["n" "v" "x"];
        silent = true;
      };
      action.__raw = ''
        function()
          require('flash').jump()
        end
      '';
    };
    copyUrlOfCurrentLineOnGithub = {
      description = ''
        Copy a URL of the line under the cursor on Github to the clipboard
      '';
      vimCommandName = "CopyUrlOfCurrentLineOnGithub";
      vimKeymapBinding = {
        key = "yg";
        # TODO: Implement this for a visual mode rand selection
        modes = ["n"];
        silent = true;
      };
      action.__raw = ''
        function()
          local gitlinker = require("gitlinker");
          local actions = require("gitlinker.actions");
          gitlinker.get_buf_range_url("n", {
            action_callback = actions.copy_to_clipboard
          });
        end
      '';
    };
    superSearch = {
      description = ''
        Search buffers, oldfiles, git_files, and notes.
      '';
      vimCommandName = "SuperSearch";
      vimKeymapBinding = {
        modes = ["n" "v"];
        key = "<C-s>";
        silent = true;
      };
      action.__raw = builtins.readFile ./super_search.lua;
    };
    mkNote = {
      description = ''
        Create and open a new file in my notes
      '';
      vimCommandName = "MkNote";
      vimKeymapBinding = {
        modes = ["n" "v"];
        key = "MKN";
        silent = true;
      };
      action.__raw = ''
        function()
          vim.ui.input({ prompt = 'Note name: ' }, function(input)
            if input then
              local home_dir = os.getenv("HOME")
              local file, err = io.open(home_dir .. "/notes/" .. input .. ".md", "w")
              vim.cmd("e ~/notes/" .. input .. ".md")
            end
          end)
        end
      '';
    };
    zenMode = {
      description = ''
        Toggle zen mode
      '';
      vimCommandName = "ZM";
      vimKeymapBinding = {
        modes = ["n" "v"];
        key = "<Space>z";
        silent = true;
      };
      action.__raw = ''
        function()
          require("zen-mode").toggle()
        end
      '';
    };
    redo = {
      description = ''
        Redo the last undo (replaces <Ctrl-r>)
      '';
      vimCommandName = "Redo";
      vimKeymapBinding = {
        modes = ["n" "v"];
        key = "U";
        silent = true;
      };
      action.__raw = ''
        function()
          vim.api.nvim_command('redo')
        end
      '';
    };
    codeCompanion = {
      description = ''
        Toggle CodeCompanion
      '';
      vimCommandName = "ToggleCodeCompanion";
      vimKeymapBinding = {
        modes = ["n" "v"];
        key = "<C-a>";
        silent = true;
      };
      action.__raw = ''
        function()
          vim.cmd("CodeCompanionChat Toggle");
        end
      '';
    };
    talkToANorwegianBoatCaptain = {
      description = ''
        Speak with a norweigian boat captain who codes.
      '';
      vimCommandName = "TalkToCapn";
      vimKeymapBinding = {
        modes = ["n" "v"];
        key = "<Space>aic";
        silent = true;
      };
      action.__raw = ''
        function()
          local target_name = "[CodeCompanion]: Captain"
          for _, buf in ipairs(vim.api.nvim_list_bufs()) do
            local name = vim.api.nvim_buf_get_name(buf)
            if name:match(target_name .. "$") then
              return
            end
          end
          require("codecompanion").prompt("captain")
          local bufnr = vim.api.nvim_get_current_buf()
          vim.api.nvim_buf_set_name(bufnr, target_name)
        end
      '';
    };
    talkToASecurityAuditor = {
      description = ''
        Speak with a security auditor
      '';
      vimCommandName = "TalkToAuditor";
      vimKeymapBinding = {
        modes = ["n" "v"];
        key = "<Space>aia";
        silent = true;
      };
      action.__raw = ''
        function()
          local target_name = "[CodeCompanion]: Security Auditor"
          for _, buf in ipairs(vim.api.nvim_list_bufs()) do
            local name = vim.api.nvim_buf_get_name(buf)
            if name:match(target_name .. "$") then
              return
            end
          end
          require("codecompanion").prompt("auditor")
          local bufnr = vim.api.nvim_get_current_buf()
          vim.api.nvim_buf_set_name(bufnr, target_name)
        end
      '';
    };
    githubPrUnderCursor = {
      description = ''
        Open the PR at the URL under the cursor using Octo
      '';
      vimCommandName = "OctoUnderCursor";
      vimKeymapBinding = {
        modes = ["n"];
        key = "<Space>oe";
        silent = true;
      };
      action.__raw = ''
        function()
            local url = vim.fn.expand('<cWORD>')
            url = url:gsub('^[%p]*(.-)[%p]*$', '%1')

            -- Check if it's a valid GitHub Issue or PR URL
            local pr_pattern = "github.com/([%w-]+)/([%w-]+)/pull/(%d+)"
            local issue_pattern = "github.com/([%w-]+)/([%w-]+)/issues/(%d+)"

            local owner, repo, number = url:match(pr_pattern)
            local is_pr = true

            if not owner then
                owner, repo, number = url:match(issue_pattern)
                is_pr = false
            end

            if not owner then
                vim.notify("Not a valid GitHub Issue or PR URL", vim.log.levels.ERROR)
                return
            end

            -- Just pass the components separately
            local cmd = string.format('Octo %s edit %s/%s %s',
                is_pr and "pr" or "issue",
                owner,
                repo,
                number)

            local success, error = pcall(vim.cmd, cmd)
            if not success then
                vim.notify("Failed to open: " .. tostring(error), vim.log.levels.ERROR)
            end
        end
      '';
    };
    # This doesn't work
    githubFetchSummaryPrUnderCursor = {
      description = ''
        Gets a summary of the PR under the cursor and adds it to the
        clipboard
      '';
      vimCommandName = "OctoUnderCursor";
      vimKeymapBinding = {
        modes = ["n"];
        key = "<Space>os";
        silent = true;
      };
      action.__raw = ''
        function()
            local url = vim.fn.expand('<cWORD>')
            url = url:gsub('^[%p]*(.-)[%p]*$', '%1')
            local pr_pattern = "github.com/([%w-]+)/([%w-]+)/pull/(%d+)"
            local owner, repo, number = url:match(pr_pattern)
            if not owner then
                vim.notify("Not a valid GitHub PR URL", vim.log.levels.ERROR)
                return
            end

            -- Use gh cli to fetch PR data in JSON format from the current directory
            local cmd = string.format('gh pr view %s --repo %s/%s --json title,body', number, owner, repo)
            local handle = io.popen(cmd)
            local result = handle:read("*a")
            handle:close()

            local ok, data = pcall(vim.fn.json_decode, result)
            if not ok then
                vim.notify("Failed to parse GitHub PR data", vim.log.levels.ERROR)
                return
            end

            -- Extract tracking information from body
            local body = data.body or ""
            local tracking_id = body:match('[Tt]racking.-#([A-Z0-9%-]+)') or "Not found"
            local tracking_url = body:match('[Tt]racking.-%(([^%)]+)%)') or "Not found"

            -- Get current cursor position
            local row = vim.api.nvim_win_get_cursor(0)[1] - 1

            local text = string.format([[# %s
        * Jira ID: %s
        * Jira URL: %s
        * PR: %s]],
                data.title or "No title found",
                tracking_id,
                tracking_url,
                url)

            -- Split and insert the text
            local lines = vim.split(text, "\n", { plain = true })
            vim.api.nvim_buf_set_text(0, row, 0, row, 0, lines)
        end
      '';
    };
    tmuxSessionSwitcher = {
      description = "Tmux: Open window switcher";
      vimCommandName = "SearchTmuxWindows";
      vimKeymapBinding = {
        key = "<C-j>";
        modes = ["n"];
        silent = true;
      };
      action.__raw = ''
        function()
          vim.fn.jobstart('tmux display-popup -E "fzf-tmux-popup"', {
            detach = true
          })
          vim.cmd('redraw!')
        end
      '';
    };
    tmuxPopup = {
      description = "Toggle a persistent tmux popup for the current Neovim instance";
      vimCommandName = "ToggleTmuxPopup";
      vimKeymapBinding = {
        modes = ["n" "v"];
        key = "<C-p>";
        silent = true;
      };
      action.__raw = ''
        function()
          -- Get Neovim's server name as unique identifier
          local nvim_id = vim.v.servername:gsub("/", "_")
          local popup_session = "nvim_popup_" .. nvim_id

          -- Check if the popup exists
          local check_cmd = string.format("tmux has-session -t %s 2>/dev/null", popup_session)
          local popup_exists = os.execute(check_cmd)

          if popup_exists then
            -- If popup exists, toggle it off
            vim.fn.system(string.format("tmux kill-session -t %s", popup_session))
          else
            -- Create new persistent session and show popup
            local cmd = string.format([[
              tmux new-session -d -s %s;
              tmux display-popup -E \
                -w 80%% -h 80%% \
                -x 10%% -y 10%% \
                "tmux attach -t %s"
            ]], popup_session, popup_session)

            vim.fn.jobstart(cmd, {
              detach = true,
              on_exit = function()
                vim.cmd('redraw!')
              end
            })
          end
        end
      '';
    };
  };
in {
  keymaps =
    [
      # Custom keymaps can be added here if needed, but I stick to using
      # `mkVimKeymaps` and the `commands` data structure it references.
    ]
    ++ mkVimKeymaps commands;

  userCommands =
    {
      # Custom commands can be added here if needed, but I stick to using
      # `mkVimUserCommand` and the `commands` data structure it references.
    }
    // mkVimUserCommands commands;
}

================
File: system/with/user/with/program/neovim/commands/jump_down_half_a_page.lua
================
function()
  -- Get the current window height
  local win_id = vim.api.nvim_get_current_win()
  local height = vim.api.nvim_win_get_height(win_id)

  -- Get the current cursor position (row, col)
  local cursor = vim.api.nvim_win_get_cursor(win_id)
  local current_row = cursor[1]

  -- Calculate the new row (half the window height below the current position)
  local new_row = current_row + math.floor(height / 2)

  -- Ensure the new row is within the bounds of the buffer
  local buf_line_count = vim.api.nvim_buf_line_count(0)
  new_row = math.min(new_row, buf_line_count)  -- Don't scroll past the last line

  -- Move the cursor to the new row (the column remains the same)
  vim.api.nvim_win_set_cursor(win_id, {new_row, cursor[2]})
end

================
File: system/with/user/with/program/neovim/commands/jump_up_half_a_page.lua
================
function()
  -- Get the current window height
  local win_id = vim.api.nvim_get_current_win()
  local height = vim.api.nvim_win_get_height(win_id)

  -- Get the current cursor position (row, col)
  local cursor = vim.api.nvim_win_get_cursor(win_id)
  local current_row = cursor[1]

  -- Calculate the new row (half the window height below the current position)
  local new_row = current_row - math.floor(height / 2)

  -- Ensure the new row is within the bounds of the buffer
  local buf_line_count = vim.api.nvim_buf_line_count(0)
  new_row = math.max(new_row, 1)  -- Don't scroll above the first line

  -- Move the cursor to the new row (the column remains the same)
  vim.api.nvim_win_set_cursor(win_id, {new_row, cursor[2]})
end

================
File: system/with/user/with/program/neovim/commands/search_buffers.lua
================
function()
  local actions = require('telescope.actions')
  local actions_state = require('telescope.actions.state')
  local pickers = require('telescope.pickers')
  local finders = require('telescope.finders')
  local sorters = require('telescope.sorters')
  local themes = require('telescope.themes')
  local utils = require('telescope.utils')
  local conf = require("telescope.config").values

  local function get_buffers()
    local buffers = {}
    for _, bufnr in ipairs(vim.api.nvim_list_bufs()) do
      if vim.api.nvim_buf_is_loaded(bufnr) then
        local filename = vim.api.nvim_buf_get_name(bufnr)
        if filename ~= "" then
          table.insert(buffers, { filename, bufnr })
        end
      end
    end
    return buffers
  end

  local buffers = get_buffers()

  pickers.new({
    prompt_title = "",
    results_title = "",
    border = true,
    borderchars = {
      prompt = { "─", "│", " ", "│", "╭", "╮", "│", "│" },
      results = { "─", "│", "─", "│", "├", "┤", "╯", "╰" },
      preview = { "─", "│", "─", "│", "╭", "╮", "╯", "╰" },
    },
    layout_strategy = "center",
    layout_config = {
      height = 0.4,
      width = 0.4,
    },
    finder = finders.new_table {
      results = buffers,
      entry_maker = function(entry)
        local file_name = vim.fn.fnamemodify(entry[1], ":t")
        return {
          value = entry[2],
          display = vim.fn.fnamemodify(entry[1], ":h:t") .. "/" .. file_name,
          ordinal = entry[1],
          filename = entry[1]
        }
      end,
    },
    sorter = sorters.get_generic_fuzzy_sorter(),
    --previewer = conf.grep_previewer({}),

  attach_mappings = function(prompt_bufnr, map)
    map('i', '<CR>', function()
      local selection = actions_state.get_selected_entry()
      actions.close(prompt_bufnr)
      vim.api.nvim_set_current_buf(selection.value)
    end)
    map('n', 'd', function()
      local selection = actions_state.get_selected_entry()
      actions.close(prompt_bufnr)
      vim.api.nvim_buf_delete(selection.value, { force = true })
    end)
    return true
  end,
  }):find()
end

================
File: system/with/user/with/program/neovim/commands/search_commands.lua
================
function()
  local pickers = require('telescope.pickers')
  local finders = require('telescope.finders')
  local actions = require('telescope.actions')
  local action_state = require('telescope.actions.state')
  local make_entry = require "telescope.make_entry"
  local entry_display = require "telescope.pickers.entry_display"
  local sorters = require('telescope.sorters')
  local previewers = require('telescope.previewers')
  local conf = require("telescope.config").values

  local gen_from_commands = function()
    local displayer = entry_display.create {
      separator = "▏",
      items = {
        { remaining = true },
      }
    }
  local make_display = function(entry)
    local attrs = ""
    if entry.bang then
      attrs = attrs .. "!"
    end
    if entry.bar then
      attrs = attrs .. "|"
    end
    if entry.register then
      attrs = attrs .. '"'
    end
    return displayer {
      { entry.name, "TelescopeResultsIdentifier" },
    }
    end
    return function(entry)
      return make_entry.set_default_entry_mt({
        name = entry.name,
        bang = entry.bang,
        nargs = entry.nargs,
        complete = entry.complete,
        definition = entry.definition,
        --
        value = entry,
        desc = entry.desc,
        ordinal = entry.name,
        display = make_display,
      }, opts)
      end
    end
    pickers.new({
      layout_strategy = "cursor",
      border = true;
      borderchars = {
        prompt = { "─", "│", " ", "│", "╭", "╮", "│", "│" },
        results = { "─", "│", "─", "│", "├", "┤", "╯", "╰" },
        preview = { "─", "│", "─", "│", "╭", "╮", "╯", "╰" },
      },
      layout_config = {
        height = 0.4,
        width = 0.6,
      },
      preview = {
        wrap = true,
      },
      previewer = previewers.new_buffer_previewer ({
        define_preview = function(self, entry, status)
          local lines = {}
          if entry.definition ~= nil then
            for line in string.gmatch(entry.definition, "([^\n]*)") do
              table.insert(lines, line)
            end
            vim.api.nvim_buf_set_lines(self.state.bufnr, 0, -1, false, lines)
          end
        end
      }),
      prompt_title = "";
      results_title = "";
      prompt_prefix = "";
      min_length = 1;
      entry_prefix = "";
      selection_caret = "";
      finder = finders.new_table {
        results = (function()
          local command_iter = vim.api.nvim_get_commands {}
          local commands = {}
          for _, cmd in pairs(command_iter) do
            table.insert(commands, cmd)
          end
          local buf_command_iter = vim.api.nvim_buf_get_commands(0, {})
          buf_command_iter[true] = nil -- remove the redundant entry
          for _, cmd in pairs(buf_command_iter) do
            table.insert(commands, cmd)
          end
          return commands
        end)(),
        entry_maker = gen_from_commands(),
      },
      sorter = conf.generic_sorter(opts),
      attach_mappings = function(prompt_bufnr)
        actions.select_default:replace(function()
          local selection = action_state.get_selected_entry()
          if selection == nil then
            utils.__warn_no_selection "builtin.commands"
            return
          end
          actions.close(prompt_bufnr)
          local val = selection.value
          local cmd = string.format([[:%s ]], val.name)
          if val.nargs == "0" then
            local cr = vim.api.nvim_replace_termcodes("<cr>", true, false, true)
            cmd = cmd .. cr
          end
          vim.cmd [[stopinsert]]
          vim.api.nvim_feedkeys(cmd, "nt", false)
        end)
        return true
      end,
      }):find()
  end

================
File: system/with/user/with/program/neovim/commands/search_keymaps.lua
================
function()
  local pickers = require('telescope.pickers')
  local finders = require('telescope.finders')
  local actions = require('telescope.actions')
  local action_state = require('telescope.actions.state')
  local make_entry = require "telescope.make_entry"
  local entry_display = require "telescope.pickers.entry_display"
  local sorters = require('telescope.sorters')
  local previewers = require('telescope.previewers')
  local utils = require "telescope.utils"
  local conf = require("telescope.config").values

  local keymap_encountered = {} -- used to make sure no duplicates are inserted into keymaps_table
  local keymaps_table = {}
  local max_len_lhs = 0

  -- helper function to populate keymaps_table and determine max_len_lhs
  local function extract_keymaps(keymaps)
    for _, keymap in pairs(keymaps) do
      local keymap_key = keymap.buffer .. keymap.mode .. keymap.lhs -- should be distinct for every keymap
      if not keymap_encountered[keymap_key] then
        keymap_encountered[keymap_key] = true
        table.insert(keymaps_table, keymap)
        max_len_lhs = math.max(max_len_lhs, #utils.display_termcodes(keymap.lhs))
      end
    end
  end
  for _, mode in pairs({ "n", "i", "c", "x" }) do
    local global = vim.api.nvim_get_keymap(mode)
    local buf_local = vim.api.nvim_buf_get_keymap(0, mode)
    extract_keymaps(global)
    extract_keymaps(buf_local)
  end
    pickers.new({
      layout_strategy = "cursor",
      layout_config = {
        height = 0.4,
        width = 0.6,
      },
      border = true;
      borderchars = {
        prompt = { "─", "│", " ", "│", "╭", "╮", "│", "│" },
        results = { "─", "│", "─", "│", "├", "┤", "╯", "╰" },
        preview = { "─", "│", "─", "│", "╭", "╮", "╯", "╰" },
      },
      preview = {
        wrap = true,
      },
      previewer = previewers.new_buffer_previewer ({
        define_preview = function(self, entry, status)
          local lines = {}
          if entry.definition ~= nil then
            for line in string.gmatch(entry.definition, "([^\n]*)") do
              table.insert(lines, line)
            end
            vim.api.nvim_buf_set_lines(self.state.bufnr, 0, -1, false, lines)
          end
        end
      }),
      prompt_title = "";
      results_title = "";
      prompt_prefix = "";
      min_length = 1;
      entry_prefix = "";
      selection_caret = "";
      finder = finders.new_table {
        results = keymaps_table,
        entry_maker = make_entry.gen_from_keymaps({}),
      },
      sorter = conf.generic_sorter(opts),
      attach_mappings = function(prompt_bufnr)
        actions.select_default:replace(function()
          local selection = action_state.get_selected_entry()
          if selection == nil then
            utils.__warn_no_selection "builtin.keymaps"
            return
          end

          vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes(selection.value.lhs, true, false, true), "t", true)
          return actions.close(prompt_bufnr)
        end)
        return true
      end,
      }):find()
  end

================
File: system/with/user/with/program/neovim/commands/search_marks.lua
================
function()
  local utils = require('telescope.utils');
  local conf = require("telescope.config").values

  local marks = {}
  local current_buf = vim.api.nvim_get_current_buf();
  local bufname = vim.api.nvim_buf_get_name(current_buf);
  local local_marks = {
    items = vim.fn.getmarklist(current_buf),
    name_func = function(_, line)
      return vim.api.nvim_buf_get_lines(current_buf, line - 1, line, false)[1]
    end,
  }
  local global_marks = {
    items = vim.fn.getmarklist(),
    name_func = function(mark, _)
      -- get buffer name if it is opened, otherwise get file name
      return vim.api.nvim_get_mark(mark, {})[4]
    end,
  }

  local marks_table = {}
  local marks_others = {}
  local all_marks = { local_marks, global_marks }
  -- for _, mark in ipairs(all_marks) do
  --   local mark_name = mark.name
  --   local line_number = mark.line
  --   local file_name = mark.file
  --   local line_text = vim.fn.getline(line_number)
  --   table.insert(marks, {
  --     value = { file = file_name, line = line_number, text = line_text, mark = mark_name },
  --     --display = string.format("%s: %s (%d): %s", mark_name, file_name, line_number, line_text),
  --     display = mark_name .. ": " .. line_text,
  --     ordinal = mark_name .. ": " .. file_name .. " " .. line_text,
  --   })
  -- end
  for _, cnf in ipairs(all_marks) do
    for _, v in ipairs(cnf.items) do
      -- strip the first single quote character
      local mark = string.sub(v.mark, 2, 3)
      local _, lnum, col, _ = unpack(v.pos)
      local name = cnf.name_func(mark, lnum)
      -- same format to :marks command
      local line = string.format("%s %6d %4d %s", mark, lnum, col - 1, name);
      local filename = utils.path_expand(v.file or bufname);
      local line_text = "Line text not found!";

      if vim.fn.filereadable(filename) == 1 then
        local file_lines = vim.fn.readfile(filename)
        if file_lines[lnum] then
          line_text = file_lines[lnum]:gsub("^%s+", "")
        end
      end

      local row = {
        -- line = line,
        -- lnum = lnum,
        -- col = col,
        -- filename = utils.path_expand(v.file or bufname),
        value = {
          filename = filename,
          line = lnum,
          col = col,
        },
        display = mark .. ": " .. line_text,
        ordinal = line_text .. " " .. mark .. " " .. filename,
      }
      -- I don't care about non-letter marks
      if mark:match "%a" then
        table.insert(marks_table, row)
      end
      --   table.insert(marks_others, row)
      -- end
    end
  end
  -- marks_table = vim.fn.extend(marks_table, marks_others)
  require('telescope.pickers').new({}, {
    prompt_title = "",
    results_title = "",
    border = true,
    borderchars = {
      prompt = { "─", "│", " ", "│", "╭", "╮", "│", "│" },
      results = { "─", "│", "─", "│", "├", "┤", "╯", "╰" },
      preview = { "─", "│", "─", "│", "╭", "╮", "╯", "╰" },
    },
    layout_strategy = "center",
    layout_config = {
      height = 0.4,
      width = 0.6,
    },
    finder = require('telescope.finders').new_table({
      results = marks_table,
      entry_maker = function(entry)
        return {
          value = entry.value,
          display = entry.display,
          ordinal = entry.ordinal,
        }
      end
    }),
    sorter = require('telescope.sorters').get_fuzzy_file(),
    --previewer = (require("telescope.previewers")).vim_buffer_vimgrep.new(""),
    attach_mappings = function(prompt_bufnr, map)
      map('i', '<CR>', function()
        local selection = require('telescope.actions.state').get_selected_entry()
        require('telescope.actions').close(prompt_bufnr)
        vim.cmd('e! ' .. selection.value.filename)
        vim.fn.cursor(selection.value.line, selection.value.col)
      end)
      return true
  end
  }):find()
end

================
File: system/with/user/with/program/neovim/commands/super_search.lua
================
-- TODO: This does not work at all
function()
  local sorters = require('telescope.sorters');
  local builtin = require('telescope.builtin');
  local finders = require "telescope.finders";
  local pickers = require "telescope.pickers";
  local conf = require("telescope.config").values;

  local opts = conf.default or {}
  opts.prompt_title = "Combined Files";
  opts.sorter = sorters.get_fuzzy_file();
  opts.finder = finders.new_table({
    results = vim.tbl_extend("force",
      (builtin.buffers({}) or {}),
      (builtin.oldfiles({}) or {}),
      (builtin.git_files({}) or {})
    );
  });
  pickers.new(opts):find();
end

================
File: system/with/user/with/program/neovim/options/default.nix
================
{...}: {
  # Arbitrary vim options: `vim.opts`
  # These deserve more organized homes.
  undofile = true;
  autoindent = true;
  smartindent = false;
  smarttab = true;
  tabstop = 8;
  softtabstop = 0;
  confirm = false;
  swapfile = false;
  wrap = false;
  clipboard = "unnamed";
  cmdheight = 0;
  hidden = true;
  ignorecase = true;
  lazyredraw = true;
  mouse = "a";
  scrolljump = 5;
  showmode = false;
  smartcase = true;
  splitbelow = true;
  splitright = true;
  updatetime = 300;
  spell = true;
  spelllang = "en_us";
  textwidth = 77;
  cursorline = false;
  expandtab = true;
  shiftwidth = 2;
  wm = 2;
  signcolumn = "yes";
}

================
File: system/with/user/with/program/neovim/plugins/default.nix
================
{
  inputs,
  pkgs,
  ...
}: {
  plugins.copilot-lua = {
    enable = true;
  };
  plugins.mini = {
    enable = true;
  };

  plugins.which-key.enable = false;
  plugins.barbecue.enable = false; # This is cool
  plugins.precognition.enable = false;
  plugins.web-devicons.enable = true;
  plugins.telescope.enable = true;
  plugins.telescope.extensions.file-browser.enable = true;
  plugins.telescope.extensions.file-browser.settings.hidden.file_browser =
    true;
  plugins.telescope.extensions.file-browser.settings.hidden.folder_browser =
    true;
  plugins.telescope.extensions.file-browser.settings.path = "%:p:h";
  plugins.telescope.extensions.file-browser.settings.select_buffer = true;
  plugins.telescope.settings.defaults.sorting_strategy = "ascending";
  plugins.telescope.settings.defaults.ignore_current_buffer = false;
  plugins.telescope.settings.defaults.sort_mru = true;
  plugins.telescope.settings.defaults.path_display = ["smart"];
  plugins.telescope.settings.defaults.layout_strategy = "vertical";
  plugins.telescope.settings.defaults.layout_config.width = 0.99;
  plugins.telescope.settings.defaults.layout_config.vertical.height = 0.99;
  plugins.telescope.settings.defaults.layout_config.vertical.mirror = true;
  plugins.telescope.settings.defaults.layout_config.vertical.prompt_position = "top";
  plugins.telescope.settings.defaults.layout_config.vertical.preview_height = 0.6;
  plugins.telescope.settings.defaults.layout_config.vertical.preview_cutoff = 0;
  plugins.telescope.settings.defaults.show_all_buffers = true;
  plugins.telescope.settings.defaults.cache_picker.num_pickers = 20;
  plugins.telescope.settings.defaults.cache_picker.ignore_empty_prompt = true;
  plugins.auto-session.enable = true;
  plugins.auto-session.settings.auto_create = true;
  plugins.auto-session.settings.auto_restore = true;
  plugins.auto-session.settings.auto_save = true;
  plugins.auto-session.settings.use_git_branch = true;
  plugins.auto-session.settings.suppressed_dirs = [
    "/"
    "~/"
    "~/Downloads"
  ];

  plugins.lsp.enable = true;
  plugins.lsp.servers.nixd.enable = true;
  plugins.lsp.servers.nixd.autostart = true;
  plugins.lsp.servers.nixd.cmd = ["nixd"];
  plugins.lsp.servers.csharp_ls.enable = true;
  plugins.lsp.servers.marksman.enable = true;
  plugins.lsp.servers.jsonls.enable = true;
  plugins.lsp.servers.marksman.settings.formatting.command = ["prettierd"];
  plugins.lsp.servers.ts_ls.enable = true;
  plugins.lsp.servers.eslint.enable = true;
  plugins.lsp.servers.sqls.enable = true;
  plugins.lsp.servers.rust_analyzer.enable = true;
  plugins.lsp.servers.lua_ls.enable = true;
  # Cargo should probably be installed by a devshell
  # Maybe vim should too
  plugins.lsp.servers.rust_analyzer.installCargo = false;
  plugins.lsp.servers.rust_analyzer.installRustc = false;
  plugins.flash.enable = true;
  plugins.flash.settings.jump.autojump = true;
  plugins.trouble.enable = false;
  plugins.trouble.settings.modes.diagnostics.auto_open = true;
  plugins.trouble.settings.modes.diagnostics.auto_close = true;
  plugins.trouble.settings.modes.lsp_document_symbols.auto_open = false;
  plugins.trouble.settings.modes.diagnostics.use_diagnostic_signs = true;
  plugins.trouble.settings.win.position = "right";
  plugins.trouble.settings.win.size.width = 60;
  plugins.noice.enable = false;
  #plugins.fidget.enable = true;
  #plugins.fidget.notification.overrideVimNotify = true;
  # local prettier = {
  #   formatCommand = 'prettierd "${INPUT}"',
  #   formatStdin = true,
  #   env = {
  #     string.format('PRETTIERD_DEFAULT_CONFIG=%s', vim.fn.expand('~/.config/nvim/utils/linter-config/.prettierrc.json')),
  #   },
  # }
  plugins.lsp.inlayHints = true;
  plugins.marks.enable = true;
  plugins.markview.enable = false;
  plugins.octo = {
    enable = true;
    settings = {
      mappings_disable_default = true;
    };
  };
  #plugins.nvim-web-devicons.enable = true;
  #plugins.plenary.enable = true;
  plugins.gitsigns.enable = true;
  plugins.gitlinker.enable = true;
  plugins.gitlinker.printUrl = false;
  plugins.lazygit.enable = true;

  # plugins.cmp.enable = true;
  # plugins.cmp.autoEnableSources = true;
  # plugins.cmp.settings.sources = [
  #   {name = "nvim_lsp";}
  # ];
  # plugins.cmp.settings.experimental.ghost_text = true;
  # plugins.cmp.settings.performance.max_view_entries = 5;
  # plugins.cmp.settings.window.completion.border = "rounded";
  # plugins.cmp.settings.window.documentation.border = "rounded";
  # plugins.cmp.settings.window.completion.col_offset = -3;
  # plugins.cmp.settings.window.completion.side_padding = 0;
  # plugins.cmp.settings.formatting.expandable_indicator = true;
  # plugins.cmp.settings.performance.debounce = 60;
  # plugins.cmp.settings.performance.fetching_timeout = 200;
  # plugins.cmp.settings.completion.autocomplete = false;

  plugins.indent-blankline.enable = false;

  plugins.telescope.enabledExtensions = ["live_grep_args"];
  plugins.markdown-preview.enable = true;
  plugins.markdown-preview.settings.auto_close = 0;
  plugins.markdown-preview.settings.auto_start = 0;
  plugins.markdown-preview.settings.combine_preview = 1;
  plugins.markdown-preview.settings.echo_preview_url = 1;
  plugins.markdown-preview.settings.refresh_slow = 1;
  plugins.markdown-preview.settings.page_title = "$${name}";
  plugins.markdown-preview.settings.markdown_css = "${
    pkgs.writeText
    "markdown-preview.css"
    (builtins.readFile ./markdown-preview.css)
  }";

  plugins.treesitter.enable = true;
  plugins.treesitter.nixvimInjections = true;
  plugins.treesitter.settings.highlight.enable = true;
  plugins.treesitter.settings.incremental_selection.enable = false;
  plugins.treesitter.settings.indent.enable = false;

  plugins.zen-mode = {
    enable = true;
    # package = (pkgs.vimUtils.buildVimPlugin {
    #   name = "zen-mode";
    #   src = pkgs.fetchFromGitHub {
    #     owner = "alichtman";
    #     repo = "zen-mode.nvim";
    #     rev = "4191bcc9acb0c3634cd3c56339c06b248dbb9b3a";
    #     hash = "sha256-SOY7B/+YUCLEMc7CAqUp8X/9MoqTS7bNnG9oCtVVscA=";
    #   };
    # });
    settings = {
      # dont_exit_on_win_enter = true;
      window = {
        backdrop = 0.95; # shade the backdrop of the Zen window. Set to 1 to keep the same as Normal
        # height and width can be:
        # * an absolute number of cells when > 1
        # * a percentage of the width / height of the editor when <= 1
        # * a function that returns the width or the height
        width = 80; # width of the Zen window
        height = 0.9; # height of the Zen window
        # by default, no options are changed for the Zen window
        # uncomment any of the options below, or add other vim.wo options you want to apply
        options = {
          signcolumn = "yes"; # disable signcolumn
          number = false; # disable number column
          relativenumber = false; # disable relative numbers
          cursorline = false; # disable cursorline
          cursorcolumn = false; # disable cursor column
          foldcolumn = "0"; # disable fold column
          list = false; # disable whitespace characters
        };
      };
      plugins = {
        # disable some global vim options (vim.o...)
        # comment the lines to not apply the options
        options = {
          enabled = true;
          ruler = false; # disables the ruler text in the cmd line area
          showcmd = false; # disables the command in the last line of the screen
          # you may turn on/off statusline in zen mode by setting 'laststatus'
          # statusline will be shown only if 'laststatus' == 3
          laststatus = 0; # turn off the statusline in zen mode
        };
        twilight = {
          enabled = true;
        }; # enable to start Twilight when zen mode opens
        gitsigns = {
          enabled = true;
        }; # disables git signs
        tmux = {
          enabled = false;
        }; # disables the tmux statusline
        # this will change the font size on kitty when in zen mode
        # to make this work, you need to set the following kitty options:
        # - allow_remote_control socket-only
        # - listen_on unix:/tmp/kitty
        kitty = {
          enabled = true;
          font = "+4"; # font size increment
        };
      };
    };
  };

  # I really want to use this, but it seems to always do unexpected stuff.
  # Last time I enabled this it made the bottom row of the vim editor
  # blank.
  plugins.image = {
    enable = false;
    editorOnlyRenderWhenFocused = true;
    backend = "kitty";
    hijackFilePatterns = [
      "*.png"
      "*.jpg"
      "*.jpeg"
      "*.gif"
      "*.webp"
    ];
    maxHeightWindowPercentage = 25;
    tmuxShowOnlyInActiveWindow = true;
    integrations = {
      markdown = {
        enabled = true;
        clearInInsertMode = true;
        onlyRenderImageAtCursor = true;
        downloadRemoteImages = true;
        filetypes = [
          "markdown"
          "vimwiki"
          "mdx"
        ];
      };
    };
  };

  plugins.render-markdown = {
    enable = false;
  };

  plugins.telescope.settings.pickers.buffers.mappings.i."<C-d>" = "delete_buffer";
  plugins.telescope.settings.pickers.buffers.mappings.n."d" = "delete_buffer";

  extraPlugins = with pkgs.vimPlugins; [
    plenary-nvim
    nvim-web-devicons
    telescope-live-grep-args-nvim
    #      (pkgs.vimUtils.buildVimPlugin {
    #        name = "bookmarks";
    # src = pkgs.fetchFromGitHub {
    #   owner = "addisonbeck";
    #   repo = "bookmarks.nvim";
    #   rev = "a798ff9a6af038641e02b74a47692b030947e64b";
    #   hash = "sha256-yGDOMHSPPrUxSLvZuS80yumsQEzJ2ha0IB48gL44tNs=";
    # };
    #        # src = builtins.fetchGit ./${config.home}/bookmarks.nvim;
    #      })
    # (pkgs.vimUtils.buildVimPlugin {
    #   name = "satellite";
    #   src = pkgs.fetchFromGitHub {
    #     owner = "lewis6991";
    #     repo = "satellite.nvim";
    #     rev = "ea0a2e92bbb57981043fca334f5b274c0f279238";
    #     hash = "sha256-WVOYouiEFeLkQBe1Ptazw/mIfzxmaQmOuEK8KlfMYoQ=";
    #   };
    # })
    inputs.where-am-i-nvim.packages.${pkgs.system}.default
  ];

  plugins.oil.enable = true;
}

================
File: system/with/user/with/program/neovim/plugins/markdown-preview.css
================
:root {
  --color-text-primary: #333;
  --color-text-tertiary: #777;
  --color-text-link: #4078c0;
  --color-bg-primary: #fff;
  --color-bg-secondary: #fafbfc;
  --color-bg-tertiary: #f8f8f8;
  --color-border-primary: #ddd;
  --color-border-secondary: #eaecef;
  --color-border-tertiary: #d1d5da;
  --color-kbd-foreground: #444d56;
  --color-markdown-blockquote-border: #dfe2e5;
  --color-markdown-table-border: #dfe2e5;
  --color-markdown-table-tr-border: #c6cbd1;
  --color-markdown-code-bg: #1b1f230d;
}
[data-theme="dark"] {
  --color-text-primary: #c9d1d9;
  --color-text-tertiary: #8b949e;
  --color-text-link: #58a6ff;
  --color-bg-primary: #0d1117;
  --color-bg-secondary: #0d1117;
  --color-bg-tertiary: #161b22;
  --color-border-primary: #30363d;
  --color-border-secondary: #21262d;
  --color-border-tertiary: #6e7681;
  --color-kbd-foreground: #b1bac4;
  --color-markdown-blockquote-border: #3b434b;
  --color-markdown-table-border: #3b434b;
  --color-markdown-table-tr-border: #272c32;
  --color-markdown-code-bg: #f0f6fc26;
}

.markdown-body ol ol,
.markdown-body ul ol,
.markdown-body ol ul,
.markdown-body ul ul,
.markdown-body ol ul ol,
.markdown-body ul ul ol,
.markdown-body ol ul ul,
.markdown-body ul ul ul {
  margin-top: 0;
  margin-bottom: 0;
}
.markdown-body {
  font-family: "Helvetica Neue", Helvetica, "Segoe UI", Arial, freesans, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  color: var(--color-text-primary);
  line-height: 1.6;
  word-wrap: break-word;
  padding: 45px;
  background: var(--color-bg-primary);
  border: 1px solid var(--color-border-primary);
  -webkit-border-radius: 0 0 3px 3px;
  border-radius: 0 0 3px 3px;
}
.markdown-body > *:first-child {
  margin-top: 0 !important;
}
.markdown-body > *:last-child {
  margin-bottom: 0 !important;
}
.markdown-body .table-of-contents ol {
  list-style: none;
}
.markdown-body .table-of-contents > ol {
  padding-left: 0;
}
.markdown-body * {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}
.markdown-body h1,
.markdown-body h2,
.markdown-body h3,
.markdown-body h4,
.markdown-body h5,
.markdown-body h6 {
  margin-top: 1em;
  margin-bottom: 16px;
  font-weight: bold;
  line-height: 1.4;
}
.markdown-body h1 .anchor,
.markdown-body h2 .anchor,
.markdown-body h3 .anchor,
.markdown-body h4 .anchor,
.markdown-body h5 .anchor,
.markdown-body h6 .anchor {
  margin-left: -24px;
  visibility: hidden;
}
.markdown-body h1:hover .anchor,
.markdown-body h2:hover .anchor,
.markdown-body h3:hover .anchor,
.markdown-body h4:hover .anchor,
.markdown-body h5:hover .anchor,
.markdown-body h6:hover .anchor {
  visibility: visible;
}
.markdown-body p,
.markdown-body blockquote,
.markdown-body ul,
.markdown-body ol,
.markdown-body dl,
.markdown-body table,
.markdown-body pre {
  margin-top: 0;
  margin-bottom: 16px;
}
.markdown-body h1 {
  margin: 0.67em 0;
  padding-bottom: 0.3em;
  font-size: 2.25em;
  line-height: 1.2;
  border-bottom: 1px solid var(--color-border-secondary);
}
.markdown-body h2 {
  padding-bottom: 0.3em;
  font-size: 1.75em;
  line-height: 1.225;
  border-bottom: 1px solid var(--color-border-secondary);
}
.markdown-body h3 {
  font-size: 1.5em;
  line-height: 1.43;
}
.markdown-body h4 {
  font-size: 1.25em;
}
.markdown-body h5 {
  font-size: 1em;
}
.markdown-body h6 {
  font-size: 1em;
  color: var(--color-text-tertiary);
}
.markdown-body hr {
  margin-top: 20px;
  margin-bottom: 20px;
  height: 0;
  border: 0;
  border-top: 1px solid var(--color-border-primary);
}
.markdown-body ol,
.markdown-body ul {
  padding-left: 2em;
}
.markdown-body ol ol,
.markdown-body ul ol {
  list-style-type: lower-roman;
}
.markdown-body ol ul,
.markdown-body ul ul {
  list-style-type: circle;
}
.markdown-body ol ul ul,
.markdown-body ul ul ul {
  list-style-type: square;
}
.markdown-body ol {
  list-style-type: decimal;
}
.markdown-body ul {
  list-style-type: disc;
}
.markdown-body dl {
  margin-bottom: 1.3em
}
.markdown-body dl dt {
  font-weight: 700;
}
.markdown-body dl dd {
  margin-left: 0;
}
.markdown-body dl dd p {
  margin-bottom: 0.8em;
}
.markdown-body blockquote {
  margin-left: 0;
  margin-right: 0;
  padding: 0 15px;
  color: var(--color-text-tertiary);
  border-left: 4px solid var(--color-markdown-blockquote-border);
}
.markdown-body table {
  display: block;
  width: 100%;
  overflow: auto;
  word-break: normal;
  word-break: keep-all;
  border-collapse: collapse;
  border-spacing: 0;
}
.markdown-body table tr {
  background-color: var(--color-bg-primary);
  border-top: 1px solid var(--color-markdown-table-tr-border);
}
.markdown-body table tr:nth-child(2n) {
  background-color: var(--color-bg-tertiary);
}
.markdown-body table th,
.markdown-body table td {
  padding: 6px 13px;
  border: 1px solid var(--color-markdown-table-border);
  vertical-align: top;
}
.markdown-body kbd {
  display: inline-block;
  padding: 5px 6px;
  font: 14px SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace;
  line-height: 10px;
  color: var(--color-kbd-foreground);
  vertical-align: middle;
  background-color: var(--color-bg-secondary);
  border: 1px solid var(--color-border-tertiary);
  border-radius: 3px;
  box-shadow: inset 0 -1px 0 var(--color-border-tertiary);
}
.markdown-body pre {
  word-wrap: normal;
  padding: 16px;
  overflow: auto;
  font-size: 85%;
  line-height: 1.45;
  background-color: var(--color-bg-tertiary);
  -webkit-border-radius: 3px;
  border-radius: 3px;
}
.markdown-body pre code {
  display: inline;
  max-width: initial;
  padding: 0;
  margin: 0;
  overflow: initial;
  font-size: 100%;
  line-height: inherit;
  word-wrap: normal;
  white-space: pre;
  border: 0;
  -webkit-border-radius: 3px;
  border-radius: 3px;
  background-color: transparent;
}
.markdown-body pre code:before,
.markdown-body pre code:after {
  content: normal;
}
.markdown-body code {
  font-family: Consolas, "Liberation Mono", Menlo, Courier, monospace;
  padding: 0;
  padding-top: 0.2em;
  padding-bottom: 0.2em;
  margin: 0;
  font-size: 85%;
  background-color: var(--color-markdown-code-bg);
  -webkit-border-radius: 3px;
  border-radius: 3px;
}
.markdown-body code:before,
.markdown-body code:after {
  letter-spacing: -0.2em;
  content: "\00a0";
}
.markdown-body a {
  color: var(--color-text-link);
  text-decoration: none;
  background: transparent;
}
.markdown-body img {
  max-width: 100%;
  max-height: 100%;
}
.markdown-body strong {
  font-weight: bold;
}
.markdown-body em {
  font-style: italic;
}
.markdown-body del {
  text-decoration: line-through;
}
.task-list-item {
  list-style-type: none;
}
.task-list-item input {
  font: 13px/1.4 Helvetica, arial, nimbussansl, liberationsans, freesans, clean, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  margin: 0 0.35em 0.25em -1.6em;
  vertical-align: middle;
}
.task-list-item input[disabled] {
  cursor: default;
}
.task-list-item input[type="checkbox"] {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  padding: 0;
}
.task-list-item input[type="radio"] {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  padding: 0;
}

#page-ctn {
  max-width: 100%;
}

.mermaid {
  overflow: scroll;
}

================
File: system/with/user/with/program/neovim/default.nix
================
# use z<Enter> z. and z- more!
{
  pkgs,
  lib,
  inputs,
  conf,
  ...
}: {
  home.packages = [pkgs.neovim-remote];
  programs.nixvim =
    (import ./nixvim.nix {inherit pkgs lib inputs conf;})
    // {
      enable = true;
    };
}

================
File: system/with/user/with/program/neovim/nixvim.nix
================
# use z<Enter> z. and z- more!
{
  pkgs,
  lib,
  inputs,
  conf,
  ...
}: let
  options =
    (
      import ./options {}
    )
    // (
      (import ./colors {inherit conf;}).options
    );
in {
  vimAlias = true;
  opts = options;
  colorschemes = (import ./colors {inherit conf;}).colorscheme;
  highlight = (import ./colors {inherit conf;}).highlight;
  plugins = (import ./plugins {inherit inputs pkgs;}).plugins;
  extraPlugins = (import ./plugins {inherit inputs pkgs;}).extraPlugins;
  autoCmd = (import ./auto-commands {inherit conf;}).autoCommands;
  keymaps =
    [
      # Custom nixvim style keymaps can be added here if needed, but I
      # stick to using `mkVimKeymaps` and the `commands` data structure it
      # references.
    ]
    ++ (import ./commands {inherit lib;}).keymaps;
  userCommands =
    {
      # Custom nixvim style commands can be added here if needed, but I
      # stick to using `mkVimUserCommand` and the `commands` data structure
      # it references.
    }
    // (import ./commands {inherit lib;}).userCommands;
  diagnostics = {
    signs = false;
    underline = true;
    update_in_insert = false;
    float = {
      focused = false;
      style = "minimal";
      border = "rounded";
      source = "always";
      header = "";
      prefix = "";
    };
  };
  globals.netrw_banner = 0;
  extraConfigVim = ''
    set laststatus=0
    hi! link StatusLine Normal
    hi! link StatusLineNC Normal
    set statusline=%{repeat('─',winwidth('.'))}
  '';
  extraConfigLua = ''
         require('where-am-i').setup({
           features = {
             user_commands = {
               enable = true;
             },
             keymaps = {
               enable = true;
             },
           },
           display = {
             style = {
               border = "single",
             },
           },
         })
    --      require('satellite').setup({
    --     current_only = false,
    --      winblend = 0,
    --      zindex = 40,
    --      excluded_filetypes = {},
    --      width = 2,
    --      handlers = {
    --        cursor = {
    --          enable = true,
    --          -- Supports any number of symbols
    --          symbols = { '⎺', '⎻', '⎼', '⎽' }
    --          -- symbols = { '⎻', '⎼' }
    --          -- Highlights:
    --          -- - SatelliteCursor (default links to NonText
    --        },
    --        search = {
    --          enable = true,
    --          -- Highlights:
    --          -- - SatelliteSearch (default links to Search)
    --          -- - SatelliteSearchCurrent (default links to SearchCurrent)
    --        },
    --        diagnostic = {
    --          enable = true,
    --          signs = {'-', '=', '≡'},
    --          min_severity = vim.diagnostic.severity.HINT,
    --          -- Highlights:
    --          -- - SatelliteDiagnosticError (default links to DiagnosticError)
    --          -- - SatelliteDiagnosticWarn (default links to DiagnosticWarn)
    --          -- - SatelliteDiagnosticInfo (default links to DiagnosticInfo)
    --          -- - SatelliteDiagnosticHint (default links to DiagnosticHint)
    --        },
    --        gitsigns = {
    --          enable = true,
    --          signs = { -- can only be a single character (multibyte is okay)
    --     add = "│",
    --     change = "│",
    --     delete = "-",
    --          },
    --          -- Highlights:
    --          -- SatelliteGitSignsAdd (default links to GitSignsAdd)
    --          -- SatelliteGitSignsChange (default links to GitSignsChange)
    --          -- SatelliteGitSignsDelete (default links to GitSignsDelete)
    --        },
    --        marks = {
    --          enable = true,
    --          show_builtins = false, -- shows the builtin marks like [ ] < >
    --          key = 'm'
    --          -- Highlights:
    --          -- SatelliteMark (default links to Normal)
    --        },
    --        quickfix = {
    --          signs = { '-', '=', '≡' },
    --          -- Highlights:
    --          -- SatelliteQuickfix (default links to WarningMsg)
    --        }
    --      },
    --      });
                 vim.diagnostic.config({
                   virtual_text = {
                     prefix = "",
                     spacing = 0,
                     format = function(diagnostic)
                       if diagnostic.severity == vim.diagnostic.severity.ERROR then
                         return '←🧚'
                       end
                       if diagnostic.severity == vim.diagnostic.severity.WARN then
                         return '←🧚'
                       end
                       if diagnostic.severity == vim.diagnostic.severity.INFO then
                         return '←🧚'
                       end
                       if diagnostic.severity == vim.diagnostic.severity.HINT then
                         return '←🧚'
                       end
                       return diagnostic.message
                     end
                   },
                 })
  '';
}

================
File: system/with/user/with/program/audacity.nix
================
{pkgs, ...}: {home.packages = [pkgs.audacity];}

================
File: system/with/user/with/program/azure-data-studio.nix
================
{pkgs, ...}: {home.packages = [pkgs.azuredatastudio];}

================
File: system/with/user/with/program/b.nix
================
{pkgs, ...}: {
  home.packages = [(pkgs.callPackage ../../../../../tool/b/b.nix {})];
}

================
File: system/with/user/with/program/bash.nix
================
{...}: {programs.bash.enable = true;}

================
File: system/with/user/with/program/binwarden.nix
================
{
  inputs,
  pkgs,
  ...
}: {
  home.packages = [inputs.binwarden.packages.${pkgs.system}.default];
}

================
File: system/with/user/with/program/bitwarden-cli.nix
================
{pkgs, ...}: {home.packages = [pkgs.bitwarden-cli];}

================
File: system/with/user/with/program/clang.nix
================
{pkgs, ...}: {home.packages = [pkgs.clang];}

================
File: system/with/user/with/program/d.nix
================
{
  inputs,
  pkgs,
  ...
}: {
  home.packages = [inputs.d.packages.${pkgs.system}.default];
}

================
File: system/with/user/with/program/direnv.nix
================
{...}: {
  programs.direnv.enable = true;
  programs.direnv.nix-direnv.enable = true;
  programs.direnv.enableBashIntegration = true;
  programs.direnv.enableZshIntegration = true;
}

================
File: system/with/user/with/program/docker-desktop.nix
================
{
  pkgs,
  lib,
  ...
}: let
  pkgFromApp = {
    name,
    appName ? name,
    version,
    src,
    description,
    homepage,
    buildInputs ? [],
    unpackPhase ? "",
    postInstall ? "",
    sourceRoot ? "${appName}.app",
    ...
  }:
    pkgs.stdenv.mkDerivation {
      name = "${name}-${version}";
      version = "${version}";
      inherit src;
      inherit sourceRoot;
      buildInputs = with pkgs; [undmg unzip] ++ buildInputs;
      phases = ["unpackPhase" "installPhase"];
      inherit unpackPhase;
      installPhase =
        ''
          mkdir -p "$out/Applications/${appName}.app"
          cp -pR * "$out/Applications/${appName}.app"
        ''
        + postInstall;
      meta = with lib; {
        inherit description;
        inherit homepage;
        maintainers = with maintainers; [];
        platforms = platforms.darwin;
      };
    };

  docker-desktop = pkgFromApp rec {
    name = "Docker";
    version = "4.5.0";
    revision = "74594";
    src = builtins.fetchurl {
      url = "https://desktop.docker.com/mac/main/arm64/${revision}/Docker.dmg";
      sha256 = "0161vncg3aq1xlakr0wxsw3lnbxjxc8frqrv6lx9h9cr8rwz7sr4";
    };
    description = "Docker desktop client";
    homepage = "https://docker.com";
  };
in {
  home.packages = [docker-desktop];

  launchd.agents.docker-desktop = {
    enable = true;
    config = {
      ProgramArguments = ["${docker-desktop}/Applications/Docker.app/Contents/MacOS/Docker"];
      KeepAlive = true;
      RunAtLoad = true;
    };
  };
}

================
File: system/with/user/with/program/dolphin-emu.nix
================
{pkgs, ...}: {home.packages = [pkgs.dolphin-emu];}

================
File: system/with/user/with/program/dotnet.nix
================
{pkgs, ...}: {home.packages = [pkgs.dotnet-sdk_8];}

================
File: system/with/user/with/program/emacs.nix
================
{
  pkgs,
  lib,
  ...
}: let
  eventCategories = [
    "personal habit"
    "work habit"
    "family habit"
    "one-off"
    "event"
    "school-function"
    "holiday"
    "birthday"
    "work meeting"
  ];

  categoriesString = builtins.concatStringsSep "|" eventCategories;

  basicConfig =
    #lisp
    ''
          (setq make-backup-files nil)

          ;; Configure indentation behavior
          ;; - Use spaces for indentation instead of tabs
          ;; - Automatically indent new lines
          (setq-default indent-tabs-mode nil)
          (electric-indent-mode 1)

          ;; Set tab display width and stops
          ;; - Tabs appear 8 spaces wide (display only)
          ;; - Create tab stops every 2 spaces up to 120
          (setq-default tab-width 2
                        indent-tabs-mode nil
                        tab-stop-list (number-sequence 2 120 2))

          ;; Disable exit confirmation prompt
          (setq confirm-kill-emacs nil)

          ;; Disable automatic backup and lock files
          (setq auto-save-default nil
                create-lockfiles nil)

          ;; Disable line wrapping
          ;;(setq-default truncate-lines t)

          ;; Enable system clipboard integration
          (setq select-enable-clipboard t)

          ;; Allow saving modified buffers without confirmation
          ;; (setq-default buffer-save-without-query t)

          ;; Enable case-insensitive search
          (setq case-fold-search t)

          ;; Enable mouse support in terminal
          (xterm-mouse-mode 1)

          ;;; Configure spell checking
          ;;; - Use aspell as the spell program
          ;;; - Set American English as dictionary
          ;;; - Enable spellcheck in text modes
          ;;; - Enable code-aware spellcheck in programming modes
          ;(setq ispell-program-name "aspell"
          ;      ispell-dictionary "american")
          ;(add-hook 'text-mode-hook 'flyspell-mode)
          ;(add-hook 'prog-mode-hook 'flyspell-prog-mode)

          ;; Set maximum line length for text formatting
          (setq-default fill-column 77)

          ;; Disable current line highlighting
          (global-hl-line-mode -1)

        (defun kill-other-buffers ()
          "Kill all buffers except the current one"
          (interactive)
          (mapc 'kill-buffer
                (delq (current-buffer)
                      (buffer-list))))
      (defun my/delete-this-file ()
      "Delete the current file and kill its buffer."
      (interactive)
      (let ((file (buffer-file-name)))
          (when (and file
                  (y-or-n-p (format "Delete %s?" file)))
          (delete-file file)
          (kill-buffer)
          (message "Deleted %s" file))))

    '';

  dashboardConfig =
    #lisp
    ''
      (use-package nerd-icons)
      (require 'projectile)  ;; Ensure projectile is loaded first
      (use-package dashboard
        :ensure t
        :init
        (setq dashboard-icon-type 'nerd-icons)
        (setq dashboard-projects-backend 'projectile)  ;; Explicitly set projectile as backend
        :config
        (dashboard-setup-startup-hook)
        (setq dashboard-center-content t
              ;; dashboard-startup-banner 'logo
              dashboard-items '((recents . 5)
                              (projects . 5)
                              (bookmarks . 5))
              ;; dashboard-banner-logo-title "Welcome to Emacs"
              dashboard-set-heading-icons t
              dashboard-set-file-icons t
              dashboard-show-shortcuts t  ;; Changed from dashboard-startupify-list
              dashboard-set-navigator t)
        ;; Set specific icons for dashboard
        (setq dashboard-heading-icons '((recents   . "nf-oct-history")
                                      (bookmarks . "nf-oct-bookmark")
                                      (projects  . "nf-oct-project"))))
    '';

  fontConfig =
    #lisp
    ''
      (set-face-attribute 'default nil :family "Iosevka" :height 140)
      (set-face-attribute 'variable-pitch nil :family "Iosevka Etoile" :height 100)
    '';

  uiConfig =
    #lisp
    ''
              ;;(background-color . "#282828")
              ;;(foreground-color . "#ebdbb2")
      (setq default-frame-alist
            '((menu-bar-lines . 0)
              (tool-bar-lines . 0)
              (vertical-scroll-bars)
              (left-fringe . 0)
              (right-fringe . 0)
              (internal-border-width . 0)
              (undecorated . t)
              (fullscreen . maximized)))
      (setq inhibit-startup-message t)
      (setq initial-frame-alist default-frame-alist)
      (setq-default mode-line-format nil)
      (advice-add #'display-startup-echo-area-message :override #'ignore)
    '';

  evilConfig =
    #lisp
    ''
      ;; Set evil options before loading evil
      (setq evil-want-integration t)
      (setq evil-want-keybinding nil)  ;; Moved before evil loading
      (setq evil-want-C-u-scroll t)

      (use-package evil
        :ensure t
        :config
        (evil-mode 1)
        ;; Define functions to move cursor half page
        (defun evil-move-half-page-down ()
          "Move cursor half page down"
          (interactive)
          (evil-next-line (/ (window-height) 4))
          (evil-scroll-line-to-center nil))

        (defun evil-move-half-page-up ()
          "Move cursor half page up"
          (interactive)
          (evil-previous-line (/ (window-height) 4))
          (evil-scroll-line-to-center nil))

        ;; Bind J and K to the new functions
        (define-key evil-normal-state-map (kbd "J") 'evil-move-half-page-down)
        (define-key evil-normal-state-map (kbd "K") 'evil-move-half-page-up))

      (use-package evil-collection
        :ensure t
        :after evil
        :config
        (evil-collection-init))

        (with-eval-after-load 'evil-collection-magit
                              (evil-collection-define-key 'normal 'magit-status-mode-map
                              "V" #'magit-start-region-select))

      (use-package evil-org
      :ensure t
      :after org
      :hook (org-mode . evil-org-mode)
      :config
      (require 'evil-org-agenda)
      (evil-org-agenda-set-keys)
      ;; Add your custom keys AFTER evil-org-agenda-set-keys
      (evil-define-key 'motion org-agenda-mode-map
          (kbd "<left>") 'org-agenda-earlier
          (kbd "<right>") 'org-agenda-later
          (kbd "C-c j") 'org-agenda-goto-date
          (kbd "gx")  'org-agenda-open-link
          (kbd "t") 'org-agenda-todo
          (kbd "T") 'org-agenda-todo-yesterday
      ))
    '';

  serverConfig =
    #lisp
    ''
      (require 'server)
      (defvar with-editor-emacsclient-executable "${pkgs.emacs}/bin/emacsclient")  ;; Declare variable before use
      (unless (server-running-p)
        (server-start))
    '';

  projectileConfig =
    #lisp
    ''
      (use-package projectile
        :ensure t
        :config
        (projectile-mode +1)
        ;; Manually specify known projects with expanded paths
        (setq projectile-known-projects
              (mapcar 'expand-file-name
                      '("~/notes"
                        "~/nix"
                        "~/bitwarden/clients"
                        "~/bitwarden/server"
                        "~/bitwarden/sdk"
                        "~/bitwarden/sdk-internal"
                        "~/bitwarden/wg-open-source-at-bitwarden"
                        "~/bitwarden/contributing-docs"
                        "~/d"
                        "~/binwarden"
                        "~/recipes")))
        ;; Disable auto-discovery
        (setq projectile-auto-discover nil)
        ;; Save the project list immediately
        (projectile-save-known-projects)
        :bind-keymap
        ("C-c p" . projectile-command-map))
    '';

  magitConfig =
    #lisp
    ''
      (defun magit-status-project ()
        "Switch project and open magit."
        (interactive)
        (let ((projectile-switch-project-action 'magit-status))
          (projectile-switch-project)))

      (global-set-key (kbd "C-c m") 'magit-status-project)
      (use-package forge
        :ensure t
        :after magit
        :config
        ;; Configure GitHub authentication
        (setq auth-sources '("~/.authinfo"))
        ;; Optionally set the number of items to fetch
        (setq forge-topic-list-limit '(60 . 0)))
    '';

  treesitterConfig =
    #lisp
    ''
      ;; Tree-sitter configuration
      (require 'treesit)

      ;; Enable tree-sitter based modes by default
      (setq treesit-language-source-alist nil) ;; we're using nix-provided parsers

      ;; Configure nix-mode to use tree-sitter
      (require 'nix-mode)
      (defvar nix-mode-use-tree-sitter t)  ;; Declare variable before use
    '';

  verticoConfig =
    #lisp
    ''
      (use-package vertico
        :ensure t
        :init
        (vertico-mode))

      (use-package orderless
        :ensure t
        :custom
        (completion-styles '(orderless basic))
        (completion-category-overrides '((file (styles . (partial-completion))))))

      (use-package marginalia
        :ensure t
        :init
        (marginalia-mode))

      (use-package consult
        :ensure t
        :bind
        (("C-s" . consult-line)
         ("C-c b" . consult-buffer)
         ("C-c f" . consult-find)
         ("C-c r" . consult-ripgrep)))

      (defun find-from-here ()
        "Find files from current buffer's directory"
        (interactive)
        (when buffer-file-name
          (consult-find (file-name-directory buffer-file-name))))

      (global-set-key (kbd "C-c d") 'find-from-here)
    '';

  gptelConfig =
    #lisp
    ''
            (use-package gptel
              :ensure t
              :config
              ;; Token access for GitHub Copilot
      (defvar gptel-github-api-key
        (lambda ()
          (when-let ((auth (car (auth-source-search
                                :host "github.copilot"
                                :require '(:secret)))))
            (let ((token (plist-get auth :secret)))
              (if (functionp token)
                  (funcall token)
                token)))))

      (defun gptel-copilot--exchange-token ()
        (let* ((github-token (if (functionp gptel-github-api-key)
                                (funcall gptel-github-api-key)
                              gptel-github-api-key))
               (url-request-method "GET")
               (url-request-extra-headers
                `(("Authorization" . ,(format "Bearer %s" github-token))
                  ("Accept" . "application/json")))
               response-buffer token-str)
          (setq response-buffer
                (url-retrieve-synchronously
                 "https://api.github.com/copilot_internal/v2/token"
                 t nil 30))
          (when response-buffer
            (with-current-buffer response-buffer
              (goto-char (point-min))
              (when (re-search-forward "^$" nil t)
                (forward-char)
                (condition-case nil
                    (let ((json-response (json-read)))
                      (setq token-str (cdr (assoc 'token json-response))))
                  (error nil)))
              (kill-buffer response-buffer)))
          token-str))

              ;; Store the exchanged token
              (defvar gptel-copilot--exchanged-token nil)
              (setq gptel-copilot--exchanged-token (gptel-copilot--exchange-token))

              ;; Update gptel-api-key to use the exchanged token
              (setq gptel-api-key
                    (lambda ()
                      (or gptel-copilot--exchanged-token
                          (setq gptel-copilot--exchanged-token
                                (gptel-copilot--exchange-token)))))

              ;; Advice to include full path in message
              (defun gptel--insert-at-beginning-with-path (initial-point)
                "Include full path when showing buffer contents."
                (let ((full-path (buffer-file-name)))
                  (goto-char initial-point)
                  (insert
                   (format "In file %s:\n\n"
                           (if full-path
                               (expand-file-name full-path)
                             (buffer-name))))))

              (advice-add 'gptel--insert-at-beginning :override #'gptel--insert-at-beginning-with-path)

              ;; Create custom backend for GitHub Copilot
              (setq gptel-copilot-backend
                    (gptel-make-openai
                     "github-copilot"
                     :host "api.githubcopilot.com/"
                     :endpoint "chat/completions"
                     :key 'gptel-api-key
                     :stream t
                     :models '((gpt-4o-2024-08-06 :name "gpt-4o-2024-08-06")
                              (claude-3.5-sonnet :name "claude-3.5-sonnet")
                              (o1-2024-12-17 :name "o1-2024-12-17")
                              (o1-mini-2024-09-12 :name "o1-mini-2024-09-12"))
                     :header (lambda ()
                              `(("Authorization" . ,(format "Bearer %s" (funcall gptel-api-key)))
                                ("Content-Type" . "application/json")
                                ("Accept" . "application/json")
                                ("Copilot-Integration-Id" . "vscode-chat")
                                ("editor-version" . "vscode/1.84.2")
                                ("editor-plugin-version" . "1.138.0")
                                ("user-agent" . "GithubCopilot/1.138.0")))))

      (advice-add 'gptel--url-parse-response :around
        (lambda (orig-fun backend proc-info)
          (let ((result (funcall orig-fun backend proc-info)))
            (when (or (and (string-match-p "400" (cadr result))
                           (string-match-p "Malformed JSON" (cadr result)))
                      (string-match-p "401" (cadr result)))
              (message "Token invalid or expired, refreshing...")
              (setq gptel-copilot--exchanged-token nil))
            result)))

      (defun test-gptel-token-refresh ()
        "Test gptel token refresh logic."
        (interactive)
        (message "=== Starting Token Test ===")
        (message "Current token (first 50 chars): %s..."
                 (substring gptel-copilot--exchanged-token 0 50))

        ;; Force token refresh by setting to nil
        (setq gptel-copilot--exchanged-token nil)
        (message "Cleared token, making request...")

        ;; Make request that should trigger token refresh
        (gptel-request
         "Test message"
         :callback (lambda (response info)
                     (message "=== Request completed ===")
                     (message "New token (first 50 chars): %s..."
                             (substring gptel-copilot--exchanged-token 0 50))
                     (message "Response status: %s" (plist-get info :status))
                     (message "Got response: %s" response))))

              (setq gptel-backend gptel-copilot-backend
                    gptel-model 'claude-3.5-sonnet
                    gptel-auto-save-directory "~/chats"
                    gptel--mark-prompts-and-responses nil
                    gptel-auto-save-buffers t
                    gptel-prompt-prefix
                      "You are a large language model living in Emacs and a helpful assistant.
                      You are assisting a software engineer at Bitwarden, an open source password management solution.
                      When expressing uncertainty, make it clear.
                      When making assumptions, state them explicitly.
                      Always respond concisely."
                    gptel-default-mode 'markdown-mode))

    '';

  lspConfig =
    #lisp
    ''
      (use-package lsp-mode
        :ensure t
        :hook ((typescript-mode . lsp)
               (csharp-mode . lsp)
               (rust-mode . lsp)
               (nix-mode . lsp)
               (json-mode . lsp)
               (sql-mode . lsp)
               (lua-mode . lsp))
        :commands lsp
        :config
        (setq lsp-nix-nixd-server-path "${pkgs.nixd}/bin/nixd")
        (setq lsp-enabled-clients '(nixd-lsp))
        (setq lsp-auto-guess-root t)
        (setq lsp-enable-symbol-highlighting t)
        (setq lsp-enable-on-type-formatting t)
        (setq lsp-modeline-code-actions-enable t)
        (setq lsp-modeline-diagnostics-enable t)
        (setq lsp-diagnostics-provider :flycheck)
        (setq lsp-ui-doc-enable t)
        (setq lsp-ui-doc-show-with-cursor t)
        (add-to-list 'lsp-disabled-clients 'copilot-ls)
        (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\chats\\'")
        (setq lsp-headerline-breadcrumb-enable nil)
        (setq lsp-headerline-breadcrumb-mode nil)
        (lsp-enable-which-key-integration t))

      (use-package lsp-ui
        :ensure t
        :commands lsp-ui-mode)

      ;; Company mode for completions
      (use-package company
        :ensure t
        :config
        (setq company-minimum-prefix-length 1
              company-idle-delay 0.0))

      ;; Add flycheck configuration
      (use-package flycheck
        :ensure t
        :init (global-flycheck-mode))

    '';

  notesConfig =
    #lisp
    ''
            (message "Starting notes config...")

            ;; Basic settings
            (setq notes-directory "~/notes")
            (setq markdown-command "${pkgs.pandoc}/bin/pandoc")

            ;; Markdown configuration
            (use-package markdown-mode
              :ensure t
              :mode (("\\.md\\'" . markdown-mode)
                     ("\\.markdown\\'" . markdown-mode)))

            ;; Basic org settings
            (use-package org
              :ensure t
              :bind
              (("C-c a" . org-agenda))
              :config
              (setq org-directory "~/notes")
              (setq org-startup-truncated nil)
              (setq org-agenda-files (list org-directory))
              (setq org-log-done 'time)
              (setq org-log-into-drawer t)
              (setq org-global-properties
                    '(("STATUS_ALL" . "Not-Started\\|In-Progress\\|Blocked\\|Done")
                      ("TYPE_ALL" . "Bug\\|Feature\\|Chore\\|Spike\\|Review")))
              (setq org-clock-persist 'history
                    org-clock-idle-time 15
                    org-clock-into-drawer t)
              (org-clock-persistence-insinuate))

            ;; Add the global keybinding explicitly
            (global-set-key (kbd "C-c c") 'org-capture)

            (defun sanitize-filename (name)
            (downcase (replace-regexp-in-string "[^a-zA-Z0-9]" "-" name)))


      (setq org-capture-templates
      '(
      ("p" "Personal habit" entry
       (file (lambda ()
               (let ((name (read-string "File name: ")))
                 (expand-file-name (concat (sanitize-filename name) ".org")
                                 "~/notes/"))))
       "* TODO %^{Task description}
      SCHEDULED: <%<%Y-%m-%d> +1d>
      :PROPERTIES:
      :CATEGORIES: personal habit
      :CUSTOM_ID: %^{Custom id}
      :END:")
      ("f" "Family habit" entry
       (file (lambda ()
               (let ((name (read-string "File name: ")))
                 (expand-file-name (concat (sanitize-filename name) ".org")
                                 "~/notes/"))))
       "* TODO %^{Task description}
      SCHEDULED: <%<%Y-%m-%d> +1d>
      :PROPERTIES:
      :CATEGORIES: family habit
      :CUSTOM_ID: %^{Custom id}
      :END:")
      ("w" "Work habit" entry
       (file (lambda ()
               (let ((name (read-string "File name: ")))
                 (expand-file-name (concat (sanitize-filename name) ".org")
                                 "~/notes/"))))
       "* TODO %^{Task description}
      SCHEDULED: <%<%Y-%m-%d> +1d>
      :PROPERTIES:
      :CATEGORIES: work habit
      :CUSTOM_ID: %^{Custom id}
      :END:")
      ("j" "Journal Entry" plain
               (function (lambda ()
                 (let* ((id (completing-read "Choose entry: "
                                           '("me" "emily" "lincoln" "nora" "fern" "harry")))
                        (file "~/notes/log.org")
                        (full-id (concat "log-" id)))
                   (find-file file)
                   (goto-char (point-min))
                   (when (re-search-forward (format ":CUSTOM_ID: %s" full-id) nil t)
                     (org-back-to-heading t)
                     (re-search-forward ":LOGBOOK:" nil t)
                     (forward-line 1)))))
               "- Note taken on %U \\\\\n  %?"
               :immediate-finish nil)
      ("e" "Event" entry
                 (file "~/notes/events.org")
                 "* %^{Description}
      SCHEDULED: %^T
      :PROPERTIES:
      :CUSTOM_ID: %^{ID}
      :CATEGORIES: %^{Category|${categoriesString}}
      :END:

        %?"
                 :immediate-finish nil)
      ))

            ;; Face customization
            (with-eval-after-load 'org
              (set-face-attribute 'org-scheduled-previously nil
                :foreground "#d79921"
                :weight 'bold))


            ;; Date tracking functions
            (defun my/org-set-completed-date ()
              (when (equal "Done" (org-entry-get nil "STATUS"))
                (org-entry-put nil "COMPLETED"
                  (format-time-string "[%Y-%m-%d %a]"))))

            (defun my/org-set-started-date ()
              (when (equal "In-Progress" (org-entry-get nil "STATUS"))
                (org-entry-put nil "STARTED"
                  (format-time-string "[%Y-%m-%d %a]"))))

            (add-hook 'org-property-changed-functions
              (lambda (property value)
                (when (equal property "STATUS")
                  (my/org-set-completed-date)
                  (my/org-set-started-date))))

            ;; Conversion functions
            (defun convert-to-org ()
              "Convert current markdown buffer to org format."
              (interactive)
              (let* ((md-file (buffer-file-name))
                     (org-file (concat (file-name-sans-extension md-file) ".org")))
                (when (and md-file (file-exists-p md-file))
                  (call-process "${pkgs.pandoc}/bin/pandoc" nil nil nil
                               "-f" "markdown"
                               "-t" "org"
                               md-file
                               "-o" org-file)
                  (find-file org-file))))

            (defun convert-to-markdown ()
              "Convert current org buffer to markdown format."
              (interactive)
              (let* ((org-file (buffer-file-name))
                     (md-file (concat (file-name-sans-extension org-file) ".md")))
                (when (and org-file (file-exists-p org-file))
                  (call-process "${pkgs.pandoc}/bin/pandoc" nil nil nil
                               "-f" "org"
                               "-t" "markdown"
                               org-file
                               "-o" md-file)
                  (find-file md-file))))

            (with-eval-after-load 'markdown-mode
              (define-key markdown-mode-map (kbd "C-c C-o") 'convert-to-org))

            (with-eval-after-load 'org
              (define-key org-mode-map (kbd "C-c C-m") 'convert-to-markdown))

            (defun my/move-to-custom-id-file ()
              "Move selected org item to a new file named after its CUSTOM_ID property."
              (interactive)
              (save-excursion
                (let* ((region-content (buffer-substring (region-beginning) (region-end)))
                       (custom-id (save-excursion
                                   (goto-char (region-beginning))
                                   (org-entry-get nil "CUSTOM_ID"))))
                  (if custom-id
                      (let ((new-file (concat "~/notes/" custom-id ".org")))
                        (with-temp-file new-file
                          (insert "#+TITLE: " custom-id "\n\n")
                          (insert region-content))
                        (delete-region (region-beginning) (region-end))
                        (insert (format "[[file:%s][%s]]\n" new-file custom-id))
                        (message "Moved to %s" new-file))
                    (message "No CUSTOM_ID property found!")))))
    '';

  agendaConfig =
    #lisp
    ''
                        ;; Set this globally
                        (setq org-agenda-block-separator nil)
                        (setq org-agenda-window-setup 'only-window)
                        (setq org-agenda-timegrid-use-ampm t)
                        (setq org-agenda-time-leading-zero t)
                        (setq org-agenda-todo-keyword-format "%s")
                        (setq org-agenda-include-diary t)
                        (setq org-refile-targets '((nil :maxlevel . 8)
                                (org-agenda-files :maxlevel . 2)))

                        (require 'diary-lib)

                          (use-package org-super-agenda
                          :after org-agenda
                          :config
                          (setq org-super-agenda-header-map nil)  ; Disable super-agenda keybindings
                          (setq org-super-agenda-header-properties nil)
                          (org-super-agenda-mode)
                          )

                        (setq warning-suppress-types '((org-element)))

      (setq org-agenda-custom-commands
                '(("d" "daily dashboard"
                  ((agenda "Schedule and Habits"
                          ((org-agenda-span 'day)
                           (org-agenda-sorting-strategy '((agenda time-up todo-state-down alpha-up)))
                           (org-agenda-overriding-header "")
                           (org-super-agenda-groups
                            '((:name "Today's Schedule"
                                :time-grid t)
                              (:name "Events Today"
                               :property ("CATEGORIES" (lambda (value)
                                (message "Checking events: %s" value)
                                                      (and value
                                                           (string-match-p "event" value)))))
                              (:name "Inbox items"
                               :property ("CATEGORIES" (lambda (value)
                                (message "Checking inbox: %s" value)
                                                      (and value
                                                           (string-match-p "inbox" value)))))
                              (:name "Tasks"
                               :property ("CATEGORIES" (lambda (value)
                                (message "Checking tasks: %s" value)
                                                      (and value
                                                           (string-match-p "task" value)))))
                              (:name "Code reviews"
                              :property ("CATEGORIES" (lambda (value)
                                (message "Checking code reviews: %s" value)
                                                      (and value
                                                          (string-match-p "code-review" value)))))
                              (:name "Personal Habits"
                               :property ("CATEGORIES" (lambda (value)
                                (message "Checking personal habits: %s" value)
                                                      (and value
                                                           (string-match-p "habit" value)
                                                           (string-match-p "personal" value)))))
                              (:name "Family Habits"
                               :property ("CATEGORIES" (lambda (value)
                                (message "Checking family habits: %s" value)
                                                      (and value
                                                           (string-match-p "habit" value)
                                                           (string-match-p "family" value)))))
                              (:name "Work Habits"
                               :property ("CATEGORIES" (lambda (value)
                                (message "Checking work habits: %s" value)
                                                      (and value
                                                           (string-match-p "habit" value)
                                                           (string-match-p "work" value)))))
                              (:discard (:anything t))
                            ))))
                   ))))
                        (defun refresh-org-agenda ()
                          "Refresh org agenda files and rebuild agenda view."
                          (interactive)
                          (setq org-agenda-files (list org-directory))
                          (when (get-buffer "*Org Agenda*")
                            (with-current-buffer "*Org Agenda*"
                              (org-agenda-redo t))))

                        (global-set-key (kbd "C-c r") 'refresh-org-agenda)

                          (setq org-agenda-time-grid-use-ampm t)
                          (setq org-agenda-with-times t)
                          (setq org-agenda-time-format "%I:%M%p")
                          (setq org-agenda-prefix-format
                              '((agenda . " ○ %t ")
                                  (tags   . "○ ")
                                  (todo   . "○ ")))

                          ;;(use-package org-modern
                          ;;:hook (org-agenda-finalize . org-modern-agenda)
                          ;;:config
                          ;;(global-org-modern-mode)
                          ;;:custom
                          ;;(org-modern-variable-pitch nil)
                          ;;(org-modern-hide-stars t)        ; Hide leading stars
                          ;;(org-modern-timestamp t)         ; Pretty timestamps
                          ;;(org-modern-table t)            ; Pretty tables
                          ;;(org-modern-label-offset 0.2) ; Reduces scaling to 20% of default
                          ;;(org-modern-list '((43 . "➜")   ; List bullets (+ character)
                                              ;;(45 . "–")))  ; List bullets (- character)
                          ;;(org-modern-checkbox '((88 . "☑")   ; Checked box (X)
                                                  ;;(45 . "☐")    ; Empty box (-)
                                                  ;;(32 . "☐")))  ; Empty box (space)

                          ;;(org-modern-tag t)              ; Pretty tags
                          ;;(org-modern-priority t)         ; Pretty priorities

                          ;;(org-modern-todo t)             ; Pretty todo keywords
                          ;;(org-modern-block-fringe t)     ; Add fringe markers to blocks
                          ;;(org-modern-block-name t)       ; Pretty source block names

                          ;;(org-modern-checkbox t)         ; Pretty checkboxes
                          ;;(org-modern-statistics t)       ; Pretty statistics cookies

                          ;;(org-modern-table-vertical 1)   ; Table spacing
                          ;;(org-modern-table-horizontal 0.2) ; Table spacing
                          ;;)

                          (add-hook 'org-mode-hook (lambda ()
                                (variable-pitch-mode))
                          t)

                          (defun my-org-auto-save-settings ()
                          (setq-local auto-save-interval 1)
                          (setq-local auto-save-timeout 5))

                          (add-hook 'org-mode-hook 'my-org-auto-save-settings)

                          (custom-set-faces
                          '(org-document-info-keyword ((t (:height 1.0))))
                          '(org-document-title ((t (:height 140)))) ; Instead of default 2.0
                          '(org-level-1 ((t (:height 140))))  ; Instead of default 1.5
                          '(org-level-2 ((t (:height 140))))  ; Instead of default 1.3
                          '(org-level-3 ((t (:height 140)))) ; And so on
                          '(org-level-4 ((t (:height 140))))
                          '(org-level-5 ((t (:height 140))))
                          '(org-level-6 ((t (:height 140))))
                          '(org-level-7 ((t (:height 140))))
                          '(org-level-8 ((t (:height 140))))
                          '(org-modern-label ((t (:height 140))))
                          '(org-modern-statistics ((t (:height 140))))
                          '(org-modern-tag ((t (:height 140))))
                          '(org-drawer ((t (:height 140))))
                          '(org-drawer-content ((t (:height 140))))
                          '(variable-pitch-text ((t (:height 140))))
                          '(variable-pitch ((t (:height 140))))
                          '(org-property-value ((t (:height 140))))
                          '(org-special-keyword ((t (:height 140)))))

                  (setq org-agenda-span 'day
                        org-agenda-start-on-weekday nil) ; Start on current day instead of Monday

                    (with-eval-after-load 'org-agenda
                      (define-key org-agenda-mode-map "L" (lambda ()
                      (interactive)
                      (let* ((marker (or (org-get-at-bol 'org-marker)
                        (org-agenda-error)))
                        (repeat (with-current-buffer (marker-buffer marker)
                          (goto-char (marker-position marker))
                        (org-get-repeat))))
                    (org-agenda-schedule nil (if repeat repeat "+1d"))))))
    '';

  githubConfig =
    #lisp
    ''
          (require 'ghub)

          (defvar my/github-pr-file "~/notes/github-prs.org"
            "File to store GitHub PR todos.")

          (defvar my/github-pr-queries
            '(("Involved PRs" . "is:open is:pr involves:addisonbeck -author:addisonbeck")
              ("Renovate PRs" . "is:open is:pr involves:addisonbeck author:app/renovate")
              ))

      (defun my/pr-exists-p (url)
        "Check if PR with URL already exists in the org file."
        (message "Checking for existing PR: %s" url)
        (when (file-exists-p my/github-pr-file)
          (message "File exists, checking content")
          (with-temp-buffer
            (insert-file-contents my/github-pr-file)
            (message "File contents loaded")
            ;; Instead of using buffer positions, just check if the string exists
            (string-match-p (regexp-quote url) (buffer-string)))))

      (defun my/fetch-github-prs ()
        "Fetch PRs and create new org entries if they don't exist."
        (interactive)
        (message "Starting PR fetch")
        (let ((buf (find-file-noselect my/github-pr-file)))
          (message "Buffer created: %S" buf)
          (with-current-buffer buf
            (message "In buffer")
            (org-mode)
            (message "Org mode enabled")
            (let ((max-point (point-max)))
              (message "Max point: %S" max-point)
              (goto-char max-point)
              (message "Moved to end of buffer")
              (dolist (query-pair my/github-pr-queries)
                (let* ((section-name (car query-pair))
                       (query (cdr query-pair)))
                  (message "Processing query: %s" section-name)
                  (let ((response (ghub-graphql
                                  "query($query: String!) {
                                    search(query: $query, type: ISSUE, first: 100) {
                                      nodes {
                                        ... on PullRequest {
                                          title
                                          url
                                          repository {
                                            nameWithOwner
                                          }
                                          author {
                                            login
                                          }
                                          updatedAt
                                          state
                                        }
                                      }
                                    }
                                  }"
                                  `((query . ,query)))))
                    (message "Got GraphQL response")
                    (when-let ((prs (alist-get 'nodes (alist-get 'search (alist-get 'data response)))))
                      (message "Found %d PRs" (length prs))
                      (dolist (pr prs)
                        (message "Processing PR: %S" pr)
                        (let-alist pr
                          (message "Checking if PR exists: %s" .url)
                          (let ((exists-result (my/pr-exists-p .url)))
                            (message "PR exists check returned: %S" exists-result)  ; New debug message
                            (unless exists-result
                              (message "PR doesn't exist, inserting")
                              (let ((insert-point (point)))
                                (message "Current point before insert: %S" insert-point)
                                (insert (format "* TODO %s
      :PROPERTIES:
      :PR_URL: %s
      :REPO: %s
      :AUTHOR: %s
      :CATEGORIES: code-review
      :END:

      [[%s][Open in GitHub]]

      "
                                              .title
                                              .url
                                              .repository.nameWithOwner
                                              .author.login
                                              .url))
                                (message "Insert completed"))))))))))))
          (message "Saving buffer")
          (save-buffer)
          (message "PR fetch completed")))

          (global-set-key (kbd "C-c g p") #'my/fetch-github-prs)

            (defun remove-duplicate-org-entries ()
            (interactive)
            (let ((seen-urls (make-hash-table :test 'equal)))
                (org-map-entries
                (lambda ()
                (let ((pr-url (org-entry-get nil "PR_URL")))
                    (if (and pr-url (gethash pr-url seen-urls))
                        (org-cut-subtree)
                    (when pr-url
                        (puthash pr-url t seen-urls))))))))
    '';

  whichKeyConfig =
    #lisp
    ''
      (which-key-mode)
      (setq which-key-idle-delay 0.3
            which-key-prefix-prefix "→"
            which-key-sort-order 'which-key-key-order-alpha
            which-key-side-window-location 'bottom
            which-key-side-window-max-height 0.25)
    '';

  themeConfig =
    #lisp
    ''
      (use-package gruvbox-theme
      :config
      (load-theme 'gruvbox-dark-hard t))
    '';

  elfeedConfig =
    #lisp
    ''
      (use-package elfeed
        :ensure t
        :bind
        ("C-x w" . elfeed)
        :config
        (evil-define-key 'normal elfeed-search-mode-map
          (kbd "r") 'elfeed-search-untag-all-unread
          (kbd "u") 'elfeed-search-tag-all-unread
          (kbd "RET") 'elfeed-search-show-entry
          (kbd "q") 'quit-window
          (kbd "g") 'elfeed-update
          (kbd "G") 'elfeed-search-update--force)

        (evil-define-key 'normal elfeed-show-mode-map
          (kbd "r") 'elfeed-show-untag-unread
          (kbd "u") 'elfeed-show-tag-unread
          (kbd "q") 'quit-window
          (kbd "n") 'elfeed-show-next
          (kbd "p") 'elfeed-show-prev
          (kbd "b") 'elfeed-show-visit)

        (setq elfeed-search-filter "+unread or +starred")
        (setq elfeed-sort-order 'descending))

      (use-package elfeed-protocol
        :ensure t
        :after elfeed
        :custom
        (elfeed-use-curl t)
        (elfeed-protocol-enabled-protocols '(fever))
        (setq elfeed-protocol-log-trace t)
        (elfeed-protocol-fever-update-unread-only t)
        (elfeed-protocol-fever-fetch-category-as-tag t)
        (elfeed-protocol-feeds '(("fever+https://me@rss.addisonbeck.dev"
                                       :api-url "https://rss.addisonbeck.dev/api/fever.php"
                                       :use-authinfo t)))
        (elfeed-protocol-enabled-protocols '(fever))
        :config
        (elfeed-protocol-enable))


      (defun my/elfeed-reset ()
        "Reset elfeed database and update."
        (interactive)
        (when (yes-or-no-p "Really reset elfeed database? ")
          (let ((db (expand-file-name "~/.elfeed/index"))
                (data (expand-file-name "~/.elfeed/data")))
            (message "Checking paths: index=%s data=%s" db data)

            ;; Try to close elfeed first
            (elfeed-db-unload)
            (message "Database unloaded")

            ;; Delete files with error checking
            (condition-case err
                (progn
                  (when (file-exists-p db)
                    (delete-file db)
                    (message "Deleted index file"))
                  (when (file-exists-p data)
                    (delete-directory data t)
                    (message "Deleted data directory")))
              (error (message "Error during deletion: %s" err)))

            ;; Restart elfeed
            (elfeed)
            (elfeed-search-update--force)
            (message "Reset complete"))))
    '';

  packages = epkgs:
    with epkgs; [
      use-package
      evil
      evil-collection
      evil-org
      projectile
      company
      treemacs
      magit
      which-key
      consult
      gruvbox-theme
      solarized-theme
      poet-theme
      with-editor
      dashboard
      nerd-icons
      treesit-grammars.with-all-grammars
      nix-mode
      gptel
      markdown-mode
      cl-lib
      counsel
      vterm
      vertico
      consult
      marginalia
      orderless
      org
      markdown-mode
      lsp-mode
      lsp-ui
      company
      flycheck
      forge
      ghub
      org-super-agenda
      elfeed
      elfeed-protocol
    ];

  emacsConfig = pkgs.writeText "config.el" ''
    ;;; -*- lexical-binding: t -*-

    ${uiConfig}
    ${basicConfig}
    ${projectileConfig}
    ${serverConfig}
    ${treesitterConfig}
    ${gptelConfig}
    ${verticoConfig}
    ${notesConfig}
    ${agendaConfig}
    ${githubConfig}
    ${magitConfig}
    ${lspConfig}
    ${evilConfig}
    ${whichKeyConfig}
    ${fontConfig}
    ${themeConfig}
    ${elfeedConfig}
    (desktop-save-mode 1)
  '';
in {
  programs.emacs = {
    enable = true;
    package = pkgs.emacsWithPackagesFromUsePackage {
      package = pkgs.emacs-unstable.override {
        withTreeSitter = true;
      };
      config = emacsConfig;
      defaultInitFile = true;
      alwaysEnsure = true;
      extraEmacsPackages = packages;
    };
  };
  home.packages = with pkgs; [
    aspell
    aspellDicts.en
    pandoc
    nixd
    nodePackages.typescript-language-server
    omnisharp-roslyn
    marksman
    nodePackages.vscode-langservers-extracted
    nodePackages.eslint
    sqls
    rust-analyzer
    lua-language-server
    iosevka
    iosevka-bin
    (iosevka-bin.override {variant = "Aile";})
    (iosevka-bin.override {variant = "Etoile";})
  ];
  home.file.".emacs.d/diary".text = ''
    # This is my diary file
    # It can be empty but needs to exist
  '';
}

================
File: system/with/user/with/program/fish.nix
================
{lib, ...}: {
  programs.fish.enable = true;
  programs.kitty.shellIntegration.enableFishIntegration = false;
  # FIXME: This is needed to address bug where the $PATH is re-ordered by
  # the `path_helper` tool, prioritising Apple’s tools over the ones we’ve
  # installed with nix.
  #
  # This gist explains the issue in more detail: https://gist.github.com/Linerre/f11ad4a6a934dcf01ee8415c9457e7b2
  # There is also an issue open for nix-darwin: https://github.com/LnL7/nix-darwin/issues/122
  programs.fish.shellInit = let
    # We should probably use `config.environment.profiles`, as described in
    # https://github.com/LnL7/nix-darwin/issues/122#issuecomment-1659465635
    # but this takes into account the new XDG paths used when the nix
    # configuration has `use-xdg-base-directories` enabled. See:
    # https://github.com/LnL7/nix-darwin/issues/947 for more information.
    profiles = [
      "/etc/profiles/per-user/$USER" # Home manager packages
      "$HOME/.nix-profile"
      "(set -q XDG_STATE_HOME; and echo $XDG_STATE_HOME; or echo $HOME/.local/state)/nix/profile"
      "/run/current-system/sw"
      "/nix/var/nix/profiles/default"
    ];

    makeBinSearchPath = lib.concatMapStringsSep " " (path: "${path}/bin");
  in ''
    # Disable greeting text.
    set -g fish_greeting

    # Fix path that was re-ordered by Apple's path_helper
    fish_add_path --move --prepend --path ${makeBinSearchPath profiles}
    set fish_user_paths $fish_user_paths
  '';
}

================
File: system/with/user/with/program/fzf.nix
================
{...}: {
  programs.fzf.enable = true;
}

================
File: system/with/user/with/program/gh-dash.nix
================
{...}: {
  programs.gh-dash.enable = true;
  programs.gh-dash.settings = {
    repoPaths = {
      "addisonbeck/nix" = "~/nix";
      "bitwarden/server" = "~/bitwarden/server";
      "bitwarden/clients" = "~/bitwarden/clients";
      "bitwarden/directory-connector" = "~/bitwarden/directory-connector";
      "bitwarden/splunk" = "~/bitwarden/splunk";
      "addisonbeck/d" = "~/d";
      "addisonbeck/binwarden" = "~/binwarden";
      "addisonbeck/notes" = "~/notes";
      "addisonbeck/recipes" = "~/recipes";
    };
    prSections = [
      {
        title = "My PRs (Open)";
        filters = "is:open author:@me";
        layout.author.hidden = true;
      }
      {
        title = "My PRs (All)";
        filters = "author:@me";
        layout.author.hidden = true;
      }
      {
        title = "Involved";
        filters = "is:open involves:@me -author:@me";
      }
      {
        title = "Involved (Renovate)";
        filters = "is:open involves:@me author:app/renovate";
      }
      {
        title = "Needs My Review";
        filters = "is:open is:pr review-requested:addisonbeck archived:false ";
      }
    ];
    keybindings = {
      prs = [
        {
          key = "O";
          command = ''
            tmux new-window -c {{.RepoPath}} 'nvim -c ":Octo pr edit {{.PrNumber}}"';
          '';
        }
      ];
    };
  };
}

================
File: system/with/user/with/program/ghostty.nix
================
{
  conf,
  config,
  pkgs,
  ...
}: let
  colors = conf.themes.${conf.activeTheme.colorScheme}.${conf.activeTheme.systemTheme};
  paletteConfig =
    if conf.activeTheme.systemTheme == "light"
    then ''
      palette = 0=${colors.base00}
      palette = 1=${colors.base08}
      palette = 2=${colors.base0B}
      palette = 3=${colors.base09}
      palette = 4=${colors.base0D}
      palette = 5=${colors.base0E}
      palette = 6=${colors.base0C}
      palette = 7=${colors.base05}
      palette = 8=${colors.base03}
      palette = 9=${colors.base08}
      palette = 10=${colors.base0B}
      palette = 11=${colors.base0A}
      palette = 12=${colors.base0D}
      palette = 13=${colors.base0F}
      palette = 14=${colors.base01}
      palette = 15=${colors.base05}
    ''
    else ''
      palette = 0=${colors.base00}
      palette = 1=${colors.base08}
      palette = 2=${colors.base0B}
      palette = 3=${colors.base09}
      palette = 4=${colors.base0D}
      palette = 5=${colors.base0E}
      palette = 6=${colors.base0C}
      palette = 7=${colors.base05}
      palette = 8=${colors.base03}
      palette = 9=${colors.base08}
      palette = 10=${colors.base0B}
      palette = 11=${colors.base0A}
      palette = 12=${colors.base0D}
      palette = 13=${colors.base0F}
      palette = 14=${colors.base06}
      palette = 15=${colors.base07}
    '';
  shaderRepo = pkgs.fetchFromGitHub {
    owner = "m-ahdal";
    repo = "ghostty-shaders";
    rev = "main";
    sha256 = "sha256-N6MP9QX/80ppg+TdmxmMVYsoeguicRIXfPHyoMGt92s=";
  };
  makeShader = name: {
    target = ".config/ghostty/shaders/${name}";
    source = "${shaderRepo}/${name}";
  };
  shaderFiles = [
    "animated-gradient-shader.glsl"
    "bettercrt.glsl"
    "bloom.glsl"
    "crt.glsl"
    "cubes.glsl"
    "dither.glsl"
    "drunkard.glsl"
    "gears-and-belts.glsl"
    "glitchy.glsl"
    "glow-rgbsplit-twitchy.glsl"
    "gradient-background.glsl"
    "inside-the-matrix.glsl"
    "just-snow.glsl"
    "matrix-hallway.glsl"
    "negative.glsl"
    "retro-terminal.glsl"
    "smoke-and-ghost.glsl"
    "sparks-from-fire.glsl"
    "spotlight.glsl"
    "starfield-colors.glsl"
    "starfield.glsl"
    "tft.glsl"
    "underwater.glsl"
    "water.glsl"
  ];
  shaderConfigs = builtins.listToAttrs (
    map
    (name: {
      inherit name;
      value = makeShader name;
    })
    shaderFiles
  );
in {
  home.file =
    shaderConfigs
    // {
      ghostty = {
        target = ".config/ghostty/config";
        text = ''
          font-family = "MonaspiceAr Nerd Font Mono"
          font-family-italic = "MonaspiceRn Nerd Font Mono"
          font-family-bold = "MonaspiceKr Nerd Font Mono"
          font-family-bold-italic =  "MonaspiceXe Nerd Font Mono"
          font-thicken = false
          minimum-contrast = 3
          font-size = 13
          macos-titlebar-style = hidden
          ${paletteConfig}
          background = ${colors.base00}
          foreground = ${colors.base05}
          cursor-text = ${colors.base00}
          cursor-color = ${colors.base05}
          selection-foreground = ${colors.base00}
          selection-background = ${colors.base05}
          window-padding-balance = true
          window-padding-x = 3
          window-padding-y = 3
          clipboard-read = allow
          clipboard-write = allow
          confirm-close-surface = false
          quit-after-last-window-closed = true
          fullscreen = true
          # custom-shader = "${config.home.file."underwater.glsl".source}"
        '';
      };
    };
}

================
File: system/with/user/with/program/gimp.nix
================
{pkgs, ...}: {home.packages = [pkgs.gimp];}

================
File: system/with/user/with/program/git.nix
================
{...}: {
  programs.git.enable = true;
  programs.git.delta.enable = true;
  programs.git.extraConfig = {
    github.user = "addisonbeck";
  };
}

================
File: system/with/user/with/program/github-cli.nix
================
{...}: {
  programs.gh.enable = true;
}

================
File: system/with/user/with/program/homebrew.nix
================
{...}: {
  # Homebrew can't be managed through nix, but adding these paths here is
  # helpful for configs.
  home.sessionPath = [
    "/opt/homebrew/bin"
    "/opt/homebrew/sbin"
  ];
}

================
File: system/with/user/with/program/ice.nix
================
{pkgs, ...}: {home.packages = [pkgs.ice-bar];}

================
File: system/with/user/with/program/jira-cli.nix
================
{pkgs, ...}: {home.packages = [pkgs.jira-cli-go];}

================
File: system/with/user/with/program/khal.nix
================
{
  lib,
  config,
  ...
}: {
  accounts.calendar = {
    basePath = "calendar";
    accounts."addisonbeck_com" = {
      primary = true;
      primaryCollection = "personal";
      khal = {
        enable = true;
        color = "dark blue";
        glob = "*";
        priority = 10;
        readOnly = false;
        type = "discover";
      };
      vdirsyncer = {
        enable = true;
        collections = ["from a" "from b"];
        conflictResolution = "remote wins";
        # TODO: Maybe get this working? Otherwise manually declaring each
        # collection might be smart.
        metadata = ["color"];
      };
      remote = {
        type = "caldav";
        url = "https://box.addisonbeck.com/cloud/remote.php/dav/calendars/me@addisonbeck.com/";
        userName = "me@addisonbeck.com";
      };
      local = {
        type = "filesystem";
        fileExt = ".ics";
      };
    };
    accounts."bitwarden" = {
      khal = {
        enable = true;
        type = "discover";
        glob = "*";
        color = "light red";
      };
      vdirsyncer = {
        enable = true;
        collections = ["from a" "from b"];
        conflictResolution = "remote wins";
        tokenFile = "${config.xdg.dataHome}/calendars/google_token_file";
      };
      remote = {type = "google_calendar";};
      primaryCollection = "addison@bitwarden.com";
    };
  };

  programs.vdirsyncer = {enable = true;};
  services.vdirsyncer = {
    frequency = "*:0/5";
  };

  programs.khal = {
    enable = true;
    locale = {
      dateformat = "%d-%e-%Y";
      datetimeformat = "%A %B %e @ %I:%M%p";
      default_timezone = "EST";
      # Monday is 0, Sunday is 6
      firstweekday = 0;
      #longdateformat = "%A %B %e %Y";
      #longdatetimeformat = "%A %B %e @ %I:%M%p";
      timeformat = "%I:%M%p";
      unicode_symbols = true;
    };
    settings = {
      view = {
        agenda_event_format = lib.strings.concatStrings [
          "{calendar-color}"
          "{calendar}"
          ": "
          "{cancelled}"
          "{start-end-time-style}"
          " "
          "{title}"
          "{repeat-symbol}"
          "{reset}"
        ];
        # TODO This isn't doing what I expect it to
        blank_line_before_day = true;
      };
    };
  };
}

================
File: system/with/user/with/program/kitty.nix
================
{...}: {
  programs.kitty.enable = true;
  programs.kitty.settings.hide_window_decorations = "no";
  programs.kitty.settings.confirm_os_window_close = "0";
  programs.kitty.settings.window_padding_width = "0 0";
  programs.kitty.settings.undercurl_style = "thin-sparse";
  programs.kitty.settings.cursor_blink_interval = "0.5";
  programs.kitty.settings.cursor_stop_blinking_after = "0";
  programs.kitty.shellIntegration.mode = "no-cursor";
  programs.kitty.settings.cursor_shape = "block";
  programs.kitty.settings.cursor_unfocused = "hollow";
  programs.kitty.extraConfig = ''
    modify_font strikethrough_position 120%
    modify_font strikethrough_thickness 250%
    modify_font underline_position 150%
    modify_font underline_thickness 1px
    modify_font baseline 3
    modify_font cell_height 85%
    modify_font cell_width 95%

    # The regular font is sans serif and is handled by stylix

    # Handwritten
    italic_font      MonaspiceRn Nerd Font Mono Regular

    # Mechanical
    bold_font        MonaspiceKr Nerd Font Mono Regular

    # Serif
    bold_italic_font MonaspiceXe Nerd Font Mono Regular
  '';
}

================
File: system/with/user/with/program/lazygit.nix
================
{pkgs, ...}: {
  programs.lazygit.enable = true;
  #programs.lazygit.settings.pager = "${pkgs.delta}/bin/delta --dark --paging=never";
  programs.lazygit.settings = {
    git.paging.colorArg = "always";
    git.paging.pager = "${pkgs.delta}/bin/delta --dark --paging=never";
    gui.portraitMode = "auto";
    customCommands = [
      {
        key = "O";
        command = "nvim -c ':Octo pr create draft'";
        context = "localBranches";
        loadingText = "Loading Octo";
        description = "Open pull request with Octo as a draft";
        subprocess = true;
      }
    ];
  };
}

================
File: system/with/user/with/program/lazysql.nix
================
{pkgs ? import <nixpkgs> {}, ...}: let
  # configContent = ''
  #   host = "localhost"
  #   port = 3306
  #   user = "user"
  #   password = "password"
  #   database = "dbname"
  #
  #   [[queries]]
  #   name = "query1"
  #   sql = "SELECT * FROM table1"
  #
  #   [[queries]]
  #   name = "query2"
  #   sql = "SELECT * FROM table2 WHERE column1 = "value""
  #
  #   [logging]
  #   level = "INFO"
  #   file = "lazysql.log"
  #
  #   [settings]
  #   timeout = 30
  #   retries = 3
  # '';
in {
  home.packages = [pkgs.lazysql];
  # home.file.".config/lazysql/config.toml".text = configContent;
}

================
File: system/with/user/with/program/markdown-mermaid-converter.nix
================
{pkgs, ...}: {
  home.packages = [
    (pkgs.writeShellScriptBin "markdown-mermaid-converter" ''
      mmdc -i $1.md -o $1.generated.md
    '')
  ];
}

================
File: system/with/user/with/program/mermaid-cli.nix
================
{pkgs, ...}: {home.packages = [pkgs.mermaid-cli];}

================
File: system/with/user/with/program/minecraft.nix
================
{pkgs-forked, ...}: {
  home.packages = [pkgs-forked.modrinth-app];
}

================
File: system/with/user/with/program/mkcert.nix
================
{pkgs, ...}: {home.packages = [pkgs.mkcert];}

================
File: system/with/user/with/program/neomutt.nix
================
{...}: {
  programs.neomutt.enable = true;
  programs.neomutt.sidebar.enable = true;
  programs.mbsync.enable = true;
  services.mbsync = {
    frequency = "*:0/5";
  };
  accounts.email = {
    maildirBasePath = "mail";
    accounts."addisonbeck_com" = {
      primary = true;
      address = "me@addisonbeck.com";
      userName = "me@addisonbeck.com";
      realName = "Addison Beck";
      imap.host = "box.addisonbeck.com";
      smtp.host = "box.addisonbeck.com";
      #folders.inbox = "virtual.all";
      neomutt = {enable = true;};
      mbsync = {
        enable = true;
        create = "both";
        remove = "both";
        expunge = "both";
      };
    };
    accounts."bitwarden" = {
      flavor = "gmail.com";
      address = "addison@bitwarden.com";
      userName = "addison@bitwarden.com";
      realName = "Addison Beck";
      neomutt = {enable = true;};

      mbsync = {
        enable = true;
        create = "both";
        remove = "both";
        expunge = "both";
      };
    };
    accounts."gmail" = {
      flavor = "gmail.com";
      address = "addisonbeck1@gmail.com";
      userName = "addisonbeck1@gmail.com";
      realName = "Addison Beck";
      neomutt = {enable = true;};

      mbsync = {
        enable = true;
        create = "both";
        remove = "both";
        expunge = "both";
      };
    };
  };
}

================
File: system/with/user/with/program/newsboat.nix
================
{...}: {
  programs.newsboat.enable = true;
  programs.newsboat.autoReload = true;
  programs.newsboat.browser = "open";
  programs.newsboat.extraConfig = ''
    show-read-feeds yes

    bind-key j down feedlist
    bind-key k up feedlist
    bind-key j next articlelist
    bind-key k prev articlelist
    bind-key J next-feed articlelist
    bind-key K prev-feed articlelist
    bind-key j down article
    bind-key k up article

    unbind-key C feedlist
    confirm-exit no
  '';
  programs.newsboat.urls = [
    {
      title = "HN";
      url = "https://news.ycombinator.com/rss";
      tags = ["hn"];
    }
    {url = "https://lukesmith.xyz/rss.xml";}
    {url = "https://www.hanselman.com/blog/";}
    {url = "https://github.com/bitwarden/server/commits.atom";}
    {url = "https://github.com/bitwarden/clients/releases.atom";}
    {url = "https://github.com/bitwarden/server/releases.atom";}
    {url = "https://github.com/bitwarden/clients/releases.atom";}
    {url = "https://rsshub.app/github/pull/bitwarden/server";}
    {url = "https://rsshub.app/github/pull/bitwarden/clients";}
  ];
}

================
File: system/with/user/with/program/nixfmt.nix
================
{pkgs, ...}: {home.packages = [pkgs.nixfmt];}

================
File: system/with/user/with/program/node.nix
================
{pkgs, ...}: {home.packages = [pkgs.nodejs_20];}

================
File: system/with/user/with/program/nuke-docker.nix
================
{pkgs, ...}: {
  home.packages = [
    (pkgs.writeShellScriptBin "nuke-docker" ''
      docker stop $(docker ps -a -q)
      docker rm $(docker ps -a -q)
      docker volume rm $(docker volume ls -q)
      docker network prune
    '')
  ];
}

================
File: system/with/user/with/program/opentoonz.nix
================
{pkgs, ...}: {home.packages = [pkgs.opentoonz];}

================
File: system/with/user/with/program/pika.nix
================
{pkgs, ...}: {home.packages = [pkgs.pika];}

================
File: system/with/user/with/program/powershell.nix
================
{pkgs, ...}: {home.packages = [pkgs.powershell];}

================
File: system/with/user/with/program/prettierd.nix
================
{pkgs, ...}: {home.packages = [pkgs.prettierd];}

================
File: system/with/user/with/program/python3.9.nix
================
{pkgs, ...}: {home.packages = [pkgs.python39 pkgs.poetry];}

================
File: system/with/user/with/program/python3.nix
================
{pkgs, ...}: {home.packages = [pkgs.python3];}

================
File: system/with/user/with/program/raycast.nix
================
{pkgs, ...}: {
  home.packages = [pkgs.raycast];

  launchd.agents.raycast = {
    enable = true;
    config = {
      ProgramArguments = ["${pkgs.raycast}/Applications/Raycast.app/Contents/MacOS/Raycast"];
      KeepAlive = true;
      RunAtLoad = true;
    };
  };
}

================
File: system/with/user/with/program/repomix.nix
================
{pkgs, ...}: {home.packages = [pkgs.repomix];}

================
File: system/with/user/with/program/ripgrep.nix
================
{...}: {programs.ripgrep.enable = true;}

================
File: system/with/user/with/program/rust.nix
================
{pkgs, ...}: let
  rustToolchain = pkgs.rust-bin.stable.latest.default.override {
    extensions = ["rust-src"];
  };
in {
  home.packages = with pkgs; [
    rustToolchain
    # rust-analyzer
    # pkg-config
    # cargo
    # clippy
    # rustfmt
  ];
}

================
File: system/with/user/with/program/sed.nix
================
{pkgs, ...}: {home.packages = [pkgs.gnused];}

================
File: system/with/user/with/program/set-color-scheme.nix
================
{
  pkgs,
  hostname,
  ...
}: {
  home.packages = [
    (pkgs.writeShellScriptBin "set-color-scheme" ''
      cd ~/nix
      nix develop .#toggle-theme --command nix-set-colorscheme ${hostname} $1
    '')
  ];
}

================
File: system/with/user/with/program/sqlite.nix
================
{pkgs, ...}: {home.packages = [pkgs.sqlite pkgs.sqlite-web];}

================
File: system/with/user/with/program/starship.nix
================
{...}: {
  programs.starship.enable = true;
}

================
File: system/with/user/with/program/stylix.nix
================
{
  pkgs,
  conf,
  ...
}: {
  stylix.enable = true;
  stylix.image = ../wallpaper/empty.png;
  stylix.base16Scheme = conf.themes."${conf.activeTheme.colorScheme}"."${conf.activeTheme.systemTheme}";

  stylix.fonts = {
    serif = {
      package = pkgs.dejavu_fonts;
      name = "DejaVu Serif";
    };

    sansSerif = {
      package = pkgs.dejavu_fonts;
      name = "DejaVu Sans";
    };

    monospace = {
      package = pkgs.nerd-fonts.monaspace;
      name = "MonaspiceAr Nerd Font Mono";
    };

    emoji = {
      package = pkgs.noto-fonts-emoji;
      name = "Noto Color Emoji";
    };
  };
  stylix.fonts.sizes.terminal = 16;
  #stylix.opacity.terminal = 0.7;

  # This started overwriting the sign column color and I couldn't figure out
  # why. I style vim with nixvim anyway. It would be nice to unify the two
  # someday. {{{
  stylix.targets.nixvim.enable = false;
  stylix.targets.nixvim.transparentBackground.main = true;
  stylix.targets.nixvim.transparentBackground.signColumn = true;
  # }}}
  stylix.targets.emacs.enable = false;

  # This is broken with Kitty + tmux. Possibly related to https://github.com/danth/stylix/issues/202
  stylix.targets.fish.enable = false;
  stylix.targets.wezterm.enable = false;
}

================
File: system/with/user/with/program/tmux.nix
================
{
  inputs,
  pkgs,
  ...
}: {
  home.packages = [
    pkgs.fzf
    inputs.tmux-popr.packages.${pkgs.system}.default
    (pkgs.writeShellScriptBin "fzf-tmux-popup" ''
      active_window=$(tmux display-message -p "#{session_name}:#{window_index} │ #{window_name}")

      window=$(tmux list-windows -a -F "#{session_last_attached}_#{window_last_flag}_#{session_name}:#{window_index} │ #{window_name}" |
              grep -v "$active_window" |
              sort -r |
              cut -d_ -f3- |
              fzf --reverse --no-info --header="Current: $active_window")
      if [ $? -eq 0 ]; then
        session=$(echo "$window" | cut -d: -f1)
        window_id=$(echo "$window" | cut -d: -f2 | cut -d' ' -f1)
        tmux switch-client -t "$session" \; select-window -t "$session:$window_id"
      fi
    '')
    (pkgs.writeShellScriptBin "tmux-toggle-popup" ''
      SESSION_PREFIX="🚮"
      SESSION_NAME="scratchpad"
      SEPARATOR_CHAR="▶"
      SOCKET_NAME="popup-scratch"

      function full_session_name() {
          printf "''${SESSION_PREFIX} ''${SEPARATOR_CHAR} ''${SESSION_NAME}"
      }

      FULL_SESSION="$(full_session_name)"

      # Check if we're already in the popup
      if [ -n "$TMUX" ] && [[ "$TMUX" == *"$SOCKET_NAME"* ]]; then
          tmux -L "$SOCKET_NAME" detach-client
          exit 0
      fi

      # Create or attach to the popup session
      if ! tmux -L "$SOCKET_NAME" has-session -t "$FULL_SESSION" 2>/dev/null; then
          tmux -L "$SOCKET_NAME" new-session -d -s "$FULL_SESSION"
          tmux -L "$SOCKET_NAME" set-option -t "$FULL_SESSION" status off
      fi

      # Show popup with the dedicated socket
      exec tmux popup -d '#{pane_current_path}' -xC -yC -w95% -h95% -E \
        "tmux -L $SOCKET_NAME attach -t \"$FULL_SESSION\""
    '')
    (pkgs.writeShellScriptBin "tmux-session-popup" ''
      # Capture the parent session name before creating the popup
      PARENT_SESSION=$(tmux display-message -p "#{session_name}")
      POPUP_SUFFIX="_popup"
      SOCKET_PREFIX="popup-session"

      function get_popup_session_name() {
        local base_session=$1
        printf "%s%s" "$base_session" "$POPUP_SUFFIX"
      }

      function get_socket_name() {
        local base_session=($1//[^a-zA-Z0-9]/)
        printf "%s-%s" "$SOCKET_PREFIX" "$base_session"
      }

      POPUP_SESSION=$(get_popup_session_name "$PARENT_SESSION")
      SOCKET_NAME=$(get_socket_name "$PARENT_SESSION")

      # Check if we're already in the popup
      if [ -n "$TMUX" ] && [[ "$TMUX" == *"$SOCKET_NAME"* ]]; then
          tmux -L "$SOCKET_NAME" detach-client
          exit 0
      fi

      # Create or attach to the popup session
      if ! tmux -L "$SOCKET_NAME" has-session -t "$POPUP_SESSION" 2>/dev/null; then
          tmux -L "$SOCKET_NAME" new-session -d -s "$POPUP_SESSION"
          tmux -L "$SOCKET_NAME" set-option -t "$POPUP_SESSION" status off
      fi

      # Show popup with the dedicated socket
      exec tmux popup -d '#{pane_current_path}' -xC -yC -w95% -h95% -E \
        "tmux -L $SOCKET_NAME attach -t \"$POPUP_SESSION\""
    '')
    (pkgs.writeShellScriptBin "lazygit-popup" ''
      SOCKET_NAME="popup-lazygit"

      # Check if we're already in the popup
      if [ -n "$TMUX" ] && [[ "$TMUX" == *"$SOCKET_NAME"* ]]; then
          tmux -L "$SOCKET_NAME" detach-client
          exit 0
      fi

      # Show popup with lazygit
      exec tmux popup -d '#{pane_current_path}' -xC -yC -w95% -h95% -E "lazygit"
    '')
  ];

  programs.tmux = {
    enable = true;
    terminal = "tmux-256color";
    disableConfirmationPrompt = true;
    escapeTime = 0;

    extraConfig = ''
      # General Settings
      set -g set-clipboard on
      set -g mouse on
      set -g detach-on-destroy off
      set -g base-index 0
      set-option -sg escape-time 0
      set-option -g focus-events on
      set -gq allow-passthrough on
      set -g visual-activity off
      setw -g pane-base-index 0

      # Terminal Features
      set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'
      set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'
      set-option -ga terminal-overrides ',xterm-kitty:cnorm=\E[?12h\E[?25h'

      # Vi Mode Settings
      setw -g mode-keys vi
      bind -T copy-mode-vi v send -X begin-selection
      bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "pbcopy"
      bind P paste-buffer
      bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "pbcopy"

      # Status Bar Configuration
      set -g status off
      set -g status-position top
      set -g status-interval 15
      set -g status-justify absolute-centre
      set -g status-keys vi
      set -g status-left-length 50
      set -g status-right-length 40
      set -g status-left "#[bold,fg=blue,bg=black]#h: #S"
      set -g status-right ""
      set -g window-status-format ""
      set -g window-status-current-format ""

      # Key Bindings
      unbind C-b
      set -g prefix C-Space
      bind C-Space send-prefix
      bind-key -n C-j display-popup -E "fzf-tmux-popup"
      bind-key p run-shell "tmux-toggle-popup"
      bind-key -n C-p run-shell "tmux-popr"
      bind-key -n C-l run-shell "tmux-popr lazygit"
      bind Space switch-client -l
      bind r source-file ~/.config/tmux/tmux.conf

      # Keybinding Toggle (F12)
      bind -T root F12 \
        set prefix None \;\
        set key-table off \;\
        set status off \;\
        if -F "#{pane_in_mode}" "send-keys -X cancel" \;\
        refresh-client -S

      bind -T off F12 \
        set -u prefix \;\
        set -u key-table \;\
        set status on \;\
        refresh-client -S

      # Remote Config
      if-shell "test -n \"$SSH_CLIENT\"" "source-file ~/.tmux.remote.conf"
    '';
  };
}

================
File: system/with/user/with/program/toggle-sleep-osx.nix
================
{pkgs, ...}: {
  home.packages = [
    (pkgs.writeShellScriptBin "toggle-sleep-osx" ''
      sleepvar="$(pmset -g | grep SleepDisabled)"
      sleepval="$(grep -c 0 <<< $sleepvar)"
      if [ "$sleepval" -eq 1 ];
          then
      	sudo pmset disablesleep 1
      	echo "Disabling sleep"
          else
      	sudo pmset disablesleep 0
      	echo "Enabling sleep"
      fi
    '')
  ];
}

================
File: system/with/user/with/program/toggle-theme.nix
================
#defaults write -g NSRequiresAquaSystemAppearance -bool ${newSystemTheme.darwinBool}
{
  pkgs,
  hostname,
  ...
}: {
  home.packages = [
    (pkgs.writeShellScriptBin "toggle-theme" ''
      cd ~/nix
      nix develop .#toggle-theme --command nix-toggle-theme ${hostname}
    '')
  ];
}

================
File: system/with/user/with/program/ungoogled-chromium.nix
================
{pkgs, ...}: {home.packages = [pkgs.google-chrome];}

================
File: system/with/user/with/program/vim.nix
================
{pkgs, ...}: {home.packages = [pkgs.vim];}

================
File: system/with/user/with/program/vscode.nix
================
{pkgs, ...}: {
  programs.vscode = {
    enable = true;
  };
}

================
File: system/with/user/with/program/weechat.nix
================
{
  lib,
  pkgs,
  ...
}: {
  home.packages = [
    (pkgs.weechat.override {
      configure = {availablePlugins, ...}: {
        plugins = with availablePlugins; [
          (perl.withPackages (p: [p.PodParser]))
          (python.withPackages (ps: [
            ps.websocket_client
            # ps.pync # requires 2.x
          ]))
        ];
        scripts = with pkgs.weechatScripts;
          [wee-slack weechat-autosort colorize_nicks]
          ++ lib.optionals (!pkgs.stdenv.isDarwin) [weechat-notify-send];
      };
    })
  ];
}

================
File: system/with/user/with/program/wezterm.nix
================
{pkgs, ...}: {
  programs.wezterm = {
    enable = true;
    package = pkgs.wezterm;
    extraConfig = ''
      config.front_end = "WebGpu"
      return config
    '';
  };
}

================
File: system/with/user/with/program/xdelta.nix
================
{pkgs, ...}: {home.packages = [pkgs.xdelta];}

================
File: system/with/user/with/program/zsh.nix
================
{...}: {
  programs.zsh.enable = true;
  programs.zsh.profileExtra = ''
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
  '';
}

================
File: system/with/user/with/secret/bw-cal-client-id.nix
================
{
  config,
  pkgs,
  ...
}: {
  age.secretsDir = "${config.home.homeDirectory}/.secrets";
  age.identityPaths = ["${config.home.homeDirectory}/.ssh/me"];
  age.secrets.bw-cal-client-id.file = ./bw-cal-client-id.age;

  accounts.calendar.accounts."bitwarden".vdirsyncer.clientIdCommand = ["${pkgs.coreutils}/bin/cat" "${config.age.secrets.bw-cal-client-id.path}"];
}

================
File: system/with/user/with/secret/bw-cal-client-secret.nix
================
{
  config,
  pkgs,
  ...
}: {
  age.secretsDir = "${config.home.homeDirectory}/.secrets";
  age.identityPaths = ["${config.home.homeDirectory}/.ssh/me"];
  age.secrets.bw-cal-client-secret.file = ./bw-cal-client-secret.age;

  accounts.calendar.accounts."bitwarden".vdirsyncer.clientSecretCommand = ["${pkgs.coreutils}/bin/cat" "${config.age.secrets.bw-cal-client-secret.path}"];
}

================
File: system/with/user/with/secret/bw-mail-password.nix
================
{
  config,
  pkgs,
  ...
}: {
  age.secretsDir = "${config.home.homeDirectory}/.secrets";
  age.identityPaths = ["${config.home.homeDirectory}/.ssh/me"];
  age.secrets.bw-mail-password.file = ./bw-mail-password.age;

  accounts.email.accounts."bitwarden".passwordCommand = "${pkgs.coreutils}/bin/cat ${config.age.secrets.bw-mail-password.path}";
}

================
File: system/with/user/with/secret/email.nix
================
{
  config,
  pkgs,
  ...
}: {
  age.secretsDir = "${config.home.homeDirectory}/.secrets";
  age.identityPaths = ["${config.home.homeDirectory}/.ssh/me"];
  age.secrets.email.file = ./email.age;

  accounts.calendar.accounts."addisonbeck_com".remote.passwordCommand = ["${pkgs.coreutils}/bin/cat" "${config.age.secrets.email.path}"];

  accounts.email.accounts."addisonbeck_com".passwordCommand = "${pkgs.coreutils}/bin/cat ${config.age.secrets.email.path}";
}

================
File: system/with/user/with/secret/freshrss.nix
================
{config, ...}: {
  age.secrets.freshrss = {
    file = ./freshrss.age; # Path to your encrypted secret
    owner = config.services.freshrss.user;
    mode = "0400";
  };
}

================
File: system/with/user/with/secret/github.nix
================
{
  config,
  pkgs,
  ...
}: {
  age.secretsDir = "${config.home.homeDirectory}/.secrets";
  age.identityPaths = ["${config.home.homeDirectory}/.ssh/me"];
  age.secrets.github.file = ./github.age;

  programs.git.signing.key = config.age.secrets.github.path;
  programs.git.extraConfig.gpg.format = "ssh";
  programs.git.signing.signByDefault = true;
  programs.git.userName = "Addison Beck";
  programs.git.userEmail = "github@addisonbeck.com";
  programs.git.extraConfig.pull.rebase = true;

  programs.ssh.enable = true;

  # SSH package defaults to the one provided by the system. Setting this
  # explicitly to pkgs pulls it from nixpkgs even on Darwin
  programs.ssh.package = pkgs.openssh;

  programs.ssh.matchBlocks = {
    "github.com" = {
      hostname = "github.com";
      identityFile = config.age.secrets.github.path;
    };
  };
}

================
File: system/with/user/with/secret/gmail-password.nix
================
{
  config,
  pkgs,
  ...
}: {
  age.secretsDir = "${config.home.homeDirectory}/.secrets";
  age.identityPaths = ["${config.home.homeDirectory}/.ssh/me"];
  age.secrets.gmail-password.file = ./gmail-password.age;

  accounts.calendar.accounts."gmail".remote.passwordCommand = ["${pkgs.coreutils}/bin/cat" "${config.age.secrets.gmail-password.path}"];

  accounts.email.accounts."gmail".passwordCommand = "${pkgs.coreutils}/bin/cat ${config.age.secrets.gmail-password.path}";
}

================
File: system/with/user/with/secret/secrets.nix
================
let
  me_key = "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJJSLY/c9uffjNA0T8o8CjrAI7DdvxNyp0SNBeLjQ4pH";
  rss_key = "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAINCHL5ld7YdBz5uwVhyXmKFR8hcvPkvlcu3leSB/7nHt root@rss.addisonbeck.dev";
in {
  "github.age".publicKeys = [me_key];
  "email.age".publicKeys = [me_key];
  "bw-cal-client-id.age".publicKeys = [me_key];
  "bw-cal-client-secret.age".publicKeys = [me_key];
  "bw-mail-password.age".publicKeys = [me_key];
  "gmail-password.age".publicKeys = [me_key];
  "weechat-plugins-config.age".publicKeys = [me_key];
  "freshrss.age".publicKeys = [me_key rss_key];
}

================
File: system/with/user/with/secret/weechat-plugins-config.nix
================
{config, ...}: {
  age.secretsDir = "${config.home.homeDirectory}/.secrets";
  age.identityPaths = ["${config.home.homeDirectory}/.ssh/me"];
  age.secrets.weechat-plugins-config.file = ./weechat-plugins-config.age;
  age.secrets.weechat-plugins-config.path = "${config.home.homeDirectory}/.config/weechat/plugins.conf";
}

================
File: system/with/user/with/service/autoclone.nix
================
{
  lib,
  pkgs,
  config,
  ...
}: let
  cfg = config.services.autoclone;
  autoclone-type = with lib.types;
    attrsOf (submodule ({name, ...}: {
      options = {
        enable = lib.mkEnableOption "autoclone repo";

        service-name = lib.mkOption {
          type = lib.types.str;
          default = name;
          description = "A name for the service";
        };

        url = lib.mkOption {
          type = lib.types.str;
          description = "Url to clone";
        };

        save-path = lib.mkOption {
          type = lib.types.path;
          description = "Path to save to";
        };

        ssh-key = lib.mkOption {
          type = lib.types.str;
          default = "";
          description = "SSH key used to clone the repository";
        };
      };
    }));
in {
  options = {
    services.autoclone = {
      enable = lib.mkEnableOption "autoclone";
      repo = lib.mkOption {type = autoclone-type;};
    };
  };
  config = let
    repos = lib.filterAttrs (_: {enable, ...}: enable) cfg.repo;
  in
    lib.mkIf cfg.enable {
      # systemd.user.enable = true;
      # systemd.user.startServices = "sd-switch";
      # systemd.user.services.autoclone = {
      #   Unit = {
      #     Description = "Automatically clone ${cfg.name}";
      #     StartLimitIntervalSec = 0;
      #     StartLimitBurst = 3;
      #     OnBootSec = 5;
      #     OnUnitActiveSec = 5;
      #     After = [ "agenix.service" "network.target" "network-online.target"];
      #     Requires = [ "agenix.service" ];
      #   };
      #   Install = {
      #     WantedBy = [ "default.target" ];
      #   };
      #   Service = {
      #     Type = "oneshot";
      #     ExecStart = "${pkgs.writeShellScript "cloneRepos" ''
      #       export GIT_SSH_COMMAND="${pkgs.openssh}/bin/ssh -i ${cfg.ssh-key} -o IdentitiesOnly=yes"
      #       ${pkgs.git}/bin/git clone ${cfg.url} ${cfg.save-path}
      #       if command -v direnv
      #       then
      #         direnv allow ${cfg.save-path}
      #       fi
      #     ''}";
      #   };
      # };
      launchd.agents = lib.optionalAttrs pkgs.stdenv.hostPlatform.isDarwin lib.mapAttrs' (_: {
        service-name,
        url,
        save-path,
        ssh-key,
        ...
      }:
        lib.nameValuePair "autoclone@${service-name}" {
          enable = true;
          config = {
            Label = "clone-${service-name}";
            Program = "${pkgs.writeShellScript "clone-${service-name}" ''
              export GIT_SSH_COMMAND=\"${pkgs.openssh}/bin/ssh -i ${ssh-key} -o IdentitiesOnly=yes\"
              ${pkgs.git}/bin/git clone ${url} ${save-path}
            ''}";
            ProcessType = "Background";
            RunAtLoad = true;
          };
        })
      repos;
    };
}

================
File: system/with/user/with/trait/well-known-hosts.nix
================
{pkgs, ...}: let
  known_hosts = pkgs.writeText "well_known_hosts" ''
    github.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl
    github.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=
    github.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=
  '';
in {
  programs.ssh.enable = true;
  programs.ssh.userKnownHostsFile = "${known_hosts}";
}

================
File: system/with/user/me.nix
================
{
  inputs,
  pkgs,
  lib,
  config,
  ...
}: {
  nixpkgs.config.allowUnfree = true;
  nixpkgs.config.allowBroken = true;
  environment.shells = [pkgs.fish];
  programs.fish.enable = true;
  users.knownUsers = ["me"];

  users.users.me =
    {
      shell = pkgs.fish;
    }
    // lib.optionalAttrs pkgs.stdenv.hostPlatform.isDarwin {
      uid = 502;
      name = "me";
      home = "/Users/me";
      createHome = true;
    }
    // lib.optionalAttrs pkgs.stdenv.hostPlatform.isLinux {
      users.users.me.isNormalUser = true;
      users.users.me.initialPassword = "me";
      users.users.me.extraGroups = ["wheel" "docker"];
    };

  home-manager.users.me = {
    imports = [
      inputs.stylix.homeManagerModules.stylix
      inputs.agenix.homeManagerModules.default
      inputs.nixvim.homeManagerModules.default
      ./with/trait/well-known-hosts.nix
      ./with/program/bash.nix
      ./with/program/stylix.nix
      ./with/program/git.nix
      ./with/program/direnv.nix
      ./with/program/tmux.nix
      ./with/program/kitty.nix
      ./with/secret/github.nix
      #./with/service/autoclone.nix
      #{ services.autoclone.enable = true; }
      #./with/development-environment/notes
      #./with/development-environment/bitwarden
      ./with/program/zsh.nix
      ./with/program/neovim
      ./with/program/lazygit.nix
      #./with/program/nixfmt.nix
      #./with/program/raycast.nix
      ./with/program/dotnet.nix
      ./with/program/nuke-docker.nix
      ./with/program/homebrew.nix
      #./with/development-environment/dotfiles
      #./with/development-environment/binwarden
      ./with/program/fzf.nix
      ./with/program/ripgrep.nix
      ./with/program/prettierd.nix
      ./with/program/starship.nix
      ./with/program/fish.nix
      #./with/development-environment/nix
      #./with/program/docker-desktop.nix
      ./with/program/powershell.nix
      #./with/program/bitwarden-cli.nix
      ./with/program/mkcert.nix
      ./with/program/node.nix
      ./with/program/sed.nix
      ./with/program/github-cli.nix
      ./with/program/gh-dash.nix
      #./with/program/jira-cli.nix
      ./with/program/vscode.nix
      ./with/program/emacs.nix
      #./with/program/khal.nix
      #./with/secret/email.nix
      #./with/secret/bw-cal-client-id.nix
      #./with/secret/bw-cal-client-secret.nix
      #./with/program/python3.nix
      #./with/program/neomutt.nix
      #./with/program/weechat.nix
      #./with/secret/bw-mail-password.nix
      #./with/secret/gmail-password.nix
      #./with/secret/weechat-plugins-config.nix
      ./with/program/sqlite.nix
      ./with/program/d.nix
      ./with/program/binwarden.nix
      # SPLUNK APP
      ./with/program/python3.9.nix
      ./with/program/minecraft.nix
      # python v3.8.10
      # poetry
      # libmagic
      #./with/program/wezterm.nix
      ./with/program/newsboat.nix
      ./with/program/toggle-sleep-osx.nix
      ./with/program/ungoogled-chromium.nix
      ./with/program/mermaid-cli.nix
      ./with/program/markdown-mermaid-converter.nix
      #./with/program/dolphin-emu.nix
      #./with/program/xdelta.nix
      #./with/program/opentoonz.nix <- This doesn't work
      #./with/program/gimp.nix
      #./with/program/audacity.nix
      ./with/program/toggle-theme.nix
      ./with/program/set-color-scheme.nix
      #./with/program/pika.nix
      ./with/program/lazysql.nix
      ./with/program/ghostty.nix
      #./with/program/azure-data-studio.nix
      #./with/program/rust.nix
      ./with/program/repomix.nix
    ];

    home.sessionPath = [];
    home.sessionVariables = {
      EDITOR = "vim";
      NVIM_LISTEN_ADDRESS = "/tmp/nvimsocket";
    };
    home.stateVersion = "24.05";
    home.enableNixpkgsReleaseCheck = false;
  };
}

================
File: system/with/user/root.nix
================
{...}: {users.users.root = {initialPassword = "root";};}

================
File: system/with/user/steve.nix
================
{
  inputs,
  pkgs,
  ...
}: let
  authorizedKeys = pkgs.writeText "authorized_keys" ''
    ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJJSLY/c9uffjNA0T8o8CjrAI7DdvxNyp0SNBeLjQ4pH me@bw
  '';
in {
  nixpkgs.config.allowUnfree = true;
  nixpkgs.config.allowBroken = true;
  environment.shells = [pkgs.fish];
  programs.fish.enable = true;

  users.groups.steve = {};
  users.users.steve = {
    shell = pkgs.bash;
    isNormalUser = true;
    group = "steve";
    extraGroups = ["wheel" "minecraft"];
    openssh.authorizedKeys.keyFiles = ["${authorizedKeys}"];
  };
  home-manager.users.steve = {
    imports = [
      inputs.agenix.homeManagerModules.default
      ./with/trait/well-known-hosts.nix
      ./with/program/bash.nix
      ./with/program/git.nix
      ./with/program/direnv.nix
      ./with/program/tmux.nix
      ./with/program/d.nix
      inputs.nixvim.homeManagerModules.default
      ./with/program/neovim
      ./with/secret/github.nix
      ./with/program/lazygit.nix
      ./with/program/github-cli.nix
      ./with/program/direnv.nix
      ./with/program/ripgrep.nix
    ];

    home.sessionPath = [];
    home.sessionVariables = {EDITOR = "vim";};
    home.stateVersion = "24.05";
    home.enableNixpkgsReleaseCheck = false;
  };
}

================
File: system/with/home-manager.nix
================
{
  inputs,
  outputs,
  nixpkgs,
  pkgs-forked,
  rootPath,
  systemTheme,
  hostname,
  conf,
  emacs-overlay,
  ...
}: {
  home-manager.useGlobalPkgs = true;
  home-manager.useUserPackages = false;
  home-manager.extraSpecialArgs = {
    inherit
      inputs
      outputs
      nixpkgs
      pkgs-forked
      rootPath
      systemTheme
      hostname
      conf
      emacs-overlay
      ;
  };
}

================
File: system/with/nix-darwin.nix
================
{...}: {
  nix = {
    linux-builder.enable = true;
    settings.trusted-users = ["@admin"];
  };
}

================
File: system/with/nix.nix
================
{pkgs, ...}: {
  nix.package = pkgs.nixVersions.latest;
  nix.extraOptions = ''
    experimental-features = nix-command flakes impure-derivations ca-derivations
    keep-outputs = false
    keep-derivations = false
  '';
}

================
File: system/air.nix
================
{inputs, ...}: {
  imports = [
    ./with/nix.nix
    ./with/nix-darwin.nix
    ./with/desktop-environment/darwin.nix
    inputs.home-manager.darwinModules.home-manager
    ./with/home-manager.nix
    ./with/trait/allow-unfree-packages.nix
    ./with/user/me.nix
  ];
}

================
File: system/bw.nix
================
{inputs, ...}: {
  imports = [
    ./with/nix.nix
    ./with/nix-darwin.nix
    ./with/desktop-environment/darwin.nix
    inputs.home-manager.darwinModules.home-manager
    ./with/home-manager.nix
    ./with/trait/allow-unfree-packages.nix
    ./with/user/me.nix
  ];
}

================
File: system/minecraft.nix
================
{
  inputs,
  modulesPath,
  pkgs,
  ...
}: {
  imports = [
    (modulesPath + "/virtualisation/digital-ocean-config.nix")
    inputs.home-manager.nixosModules.home-manager
    ./with/nix.nix
    ./with/home-manager.nix
    ./with/trait/allow-unfree-packages.nix
    ./with/trait/ssh-enabled.nix
    ./with/trait/has-swapfile.nix
    {has-swapfile.sizeGb = 4;}
    ./with/user/root.nix
    ./with/user/steve.nix
    {
      security.sudo = {
        enable = true;
        extraRules = [
          {
            commands = [
              {
                command = "ALL";
                options = ["NOPASSWD"];
              }
            ];
            groups = ["wheel"];
          }
        ];
      };
    }
    inputs.nix-minecraft.nixosModules.minecraft-servers
    {
      services.minecraft-servers = {
        enable = true;
        eula = true;
        managementSystem.systemd-socket = {
          enable = true;
        };
        # dataDir = "/home/steve/servers/";
        # user = "steve";
        # group = "steve";
        servers.bonesfamily = {
          #jvmOpts = ''-Xmx6G -Xms6G -XX:+UseG1GC -Dsun.rmi.dgc.server.gcInterval=2147483646 -XX:+UnlockExperimentalVMOptions -XX:G1NewSizePercent=20 -XX:G1ReservePercent=20 -XX:MaxGCPauseMillis=50 -XX:G1HeapRegionSize=32M'';
          jvmOpts = ''-Xms6144M -Xmx6144M -XX:+UseZGC'';
          enable = true;
          enableReload = false;
          package = inputs.nix-minecraft.legacyPackages.x86_64-linux.fabricServers.fabric-1_21_4;
          openFirewall = true;
          autoStart = true;
          serverProperties = {
            default-player-permission-level = "visitor";
            motd = "Bones bones bones";
            difficulty = "easy";
            gamemode = "survival";
          };
          files = {
            "config/Geyser-Fabric/config.yml".value = {
              remote."auth-type" = "floodgate";
            };
          };
          symlinks = {
            mods = pkgs.linkFarmFromDrvs "mods" (builtins.attrValues {
              FabricAPI = pkgs.fetchurl {
                url = "https://cdn.modrinth.com/data/P7dR8mSH/versions/15ijyoD6/fabric-api-0.113.0%2B1.21.4.jar";
                hash = "sha256-V6sJzn/0qgbpZIjbjpbQynvHqjcRcNkVqaKmmamXRkU=";
              };
              Geyser = pkgs.fetchurl {
                url = "https://cdn.modrinth.com/data/wKkoqHrH/versions/aq2OFs4I/geyser-fabric-Geyser-Fabric-2.6.0-b754.jar";
                sha256 = "sha256-cc8i208l3wcpwmMoHgOAMx3kdH3apW6m3E9ZARToxdk=";
              };
              Floodgate = pkgs.fetchurl {
                url = "https://cdn.modrinth.com/data/bWrNNfkb/versions/nyg969vQ/Floodgate-Fabric-2.2.4-b43.jar";
                hash = "sha256-UbF/VyMY4Eo0SbtZqsCr0739kYbYK2ku0URZNjUPrSU=";
              };
            });
          };
        };
      };
    }
  ];
  nixpkgs.overlays = [inputs.nix-minecraft.overlay];

  networking = {
    firewall = {
      enable = true;
      allowedUDPPorts = [19132];
    };
  };
}

================
File: system/rss.nix
================
{
  config,
  pkgs,
  modulesPath,
  ...
}: {
  imports = [
    (modulesPath + "/virtualisation/digital-ocean-config.nix")
    ./with/nix.nix
    ./with/trait/ssh-enabled.nix
    ./with/trait/has-swapfile.nix
    {has-swapfile.sizeGb = 2;}
    ./with/user/root.nix
    ./with/user/with/secret/freshrss.nix
    {
      security.sudo = {
        enable = true;
        extraRules = [
          {
            commands = [
              {
                command = "ALL";
                options = ["NOPASSWD"];
              }
            ];
            groups = ["wheel"];
          }
        ];
      };
    }
  ];

  services.freshrss = {
    enable = true;
    defaultUser = "me";
    passwordFile = config.age.secrets.freshrss.path;
    baseUrl = "https://rss.addisonbeck.dev";
    virtualHost = "rss.addisonbeck.dev";
    extensions = [pkgs.freshrss-extensions.youtube];
  };

  services.nginx = {
    enable = true;
    virtualHosts = {
      "rss.addisonbeck.dev" = {
        forceSSL = true;
        enableACME = true;
        root = "${pkgs.freshrss}/p";

        # php files handling
        # this regex is mandatory because of the API
        locations."~ ^.+?\\.php(/.*)?$".extraConfig = ''
          fastcgi_pass unix:${config.services.phpfpm.pools."freshrss".socket};
          fastcgi_split_path_info ^(.+\.php)(/.*)$;
          # By default, the variable PATH_INFO is not set under PHP-FPM
          # But FreshRSS API greader.php need it. If you have a “Bad Request” error, double check this var!
          # NOTE: the separate $path_info variable is required. For more details, see:
          # https://trac.nginx.org/nginx/ticket/321
          set $path_info $fastcgi_path_info;
          fastcgi_param PATH_INFO $path_info;
          include ${pkgs.nginx}/conf/fastcgi_params;
          include ${pkgs.nginx}/conf/fastcgi.conf;
        '';

        locations."/" = {
          tryFiles = "$uri $uri/ index.php";
          index = "index.php index.html index.htm";
        };
      };
    };
  };

  security.acme = {
    acceptTerms = true;
    defaults.email = "acme@addisonbeck.com";
  };

  networking.firewall = {
    enable = true;
    allowedTCPPorts = [80 443];
  };

  users.users."root".openssh.authorizedKeys.keys = [
    "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJJSLY/c9uffjNA0T8o8CjrAI7DdvxNyp0SNBeLjQ4pH me@bw"
  ];
}

================
File: system/vm.nix
================
{inputs, ...}: {
  imports = [
    ./with/hardware/vm.nix
    ./with/nix.nix
    ./with/trait/allow-unfree-packages.nix
    ./with/trait/ssh-enabled.nix
    ./with/trait/has-swapfile.nix
    {has-swapfile.sizeGb = 4;}
    ./with/desktop-environment/hyprland.nix
    ./with/desktop-environment/sway.nix
    ./with/user/root.nix
    ./with/user/me.nix
    {
      environment.systemPackages = [inputs.agenix.packages.aarch64-linux.default];
    }
  ];
}

================
File: terraform/terraform.tf
================
terraform {
  required_providers {
    digitalocean = {
      source = "digitalocean/digitalocean"
      version = "2.36.0"
    }
  }
}

# An API key for authenticating with Digital Ocean.
# This can be created from the "API" section of the Digital Ocean dashboard.
variable "DIGITAL_OCEAN_API_KEY" {
  type = string
  sensitive = true
}

# The hostname for the droplet that will be created
variable "DROPLET_HOST_NAME" {
  type = string
}

# An optional domain to assign to the droplet
variable "DROPLET_DOMAIN_NAME" {
  type = string
  default = ""
}

# The region to upload images to & create droplets on
variable "DROPLET_REGION" {
  type = string
  default = "nyc3"
}

# An array of SSH public keys to add to the droplet. 
# At least one is required if you want to be able to ssh to the droplet. 
variable "DROPLET_ALLOWED_PUBLIC_SSH_KEYS" {
  type = list(number)
  default = []
}

# The SKU for the droplet that will be created
variable "DROPLET_SKU" {
  type = string
  default = "s-1vcpu-1gb"
}

# From here we'll start creating resources. In English the subsequent steps
# achieve the following in chronological order:
# 1. Authenticated with Digital Ocean
# 2. Pulling a NixOs image from the internet and uploading it as a custom
#    image to Digital Ocean
# 3. Creating a droplet
# 4. Attaching a domain, optionally based on provided input

provider "digitalocean" {
  token = var.DIGITAL_OCEAN_API_KEY
}

resource "digitalocean_custom_image" "nixos_unstable" {
  name    = "nixos_unstable"
  url     = "https://github.com/hraban/nixos-images/releases/download/latest/nixos-digitalocean-x86_64-linux.qcow.gz"
  regions = [var.DROPLET_REGION]
}

resource "digitalocean_droplet" "development" {
  image    = digitalocean_custom_image.nixos_unstable.id
  name     = var.DROPLET_HOST_NAME
  region   = var.DROPLET_REGION
  size     = var.DROPLET_SKU
  ssh_keys = var.DROPLET_ALLOWED_PUBLIC_SSH_KEYS
}

resource "digitalocean_domain" "development_domain" {
  count      = var.DROPLET_DOMAIN_NAME != "" ? 1 : 0
  name       = var.DROPLET_DOMAIN_NAME
  ip_address = digitalocean_droplet.development.ipv4_address
}

output "droplet_ip" {
  value = digitalocean_droplet.development.ipv4_address
}

================
File: .envrc
================
use flake

================
File: .gitignore
================
*.tfvars
*.tfstate*
.terraform*
.DS_STORE
.direnv/
/result

================
File: bootstrap.sh
================
#!/usr/bin/env bash

install_self () {
  cd "$HOME" || exit

  curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install --no-confirm
  # shellcheck source=/dev/null
  . '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh'
  sudo rm /etc/nix/nix.conf

  # install homebrew
  NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

  nix --extra-experimental-features nix-command --extra-experimental-features flakes run nix-darwin -- switch --flake github:addisonbeck/nix#air

  rm bootstrap.sh
}

install_self

================
File: flake.lock
================
{
  "nodes": {
    "agenix": {
      "inputs": {
        "darwin": "darwin",
        "home-manager": "home-manager",
        "nixpkgs": [
          "nixpkgs"
        ],
        "systems": "systems"
      },
      "locked": {
        "lastModified": 1723293904,
        "narHash": "sha256-b+uqzj+Wa6xgMS9aNbX4I+sXeb5biPDi39VgvSFqFvU=",
        "owner": "ryantm",
        "repo": "agenix",
        "rev": "f6291c5935fdc4e0bef208cfc0dcab7e3f7a1c41",
        "type": "github"
      },
      "original": {
        "owner": "ryantm",
        "repo": "agenix",
        "type": "github"
      }
    },
    "base16": {
      "inputs": {
        "fromYaml": "fromYaml"
      },
      "locked": {
        "lastModified": 1708890466,
        "narHash": "sha256-LlrC09LoPi8OPYOGPXegD72v+//VapgAqhbOFS3i8sc=",
        "owner": "SenchoPens",
        "repo": "base16.nix",
        "rev": "665b3c6748534eb766c777298721cece9453fdae",
        "type": "github"
      },
      "original": {
        "owner": "SenchoPens",
        "repo": "base16.nix",
        "type": "github"
      }
    },
    "base16-fish": {
      "flake": false,
      "locked": {
        "lastModified": 1622559957,
        "narHash": "sha256-PebymhVYbL8trDVVXxCvZgc0S5VxI7I1Hv4RMSquTpA=",
        "owner": "tomyun",
        "repo": "base16-fish",
        "rev": "2f6dd973a9075dabccd26f1cded09508180bf5fe",
        "type": "github"
      },
      "original": {
        "owner": "tomyun",
        "repo": "base16-fish",
        "type": "github"
      }
    },
    "base16-helix": {
      "flake": false,
      "locked": {
        "lastModified": 1725860795,
        "narHash": "sha256-Z2o8VBPW3I+KKTSfe25kskz0EUj7MpUh8u355Z1nVsU=",
        "owner": "tinted-theming",
        "repo": "base16-helix",
        "rev": "7f795bf75d38e0eea9fed287264067ca187b88a9",
        "type": "github"
      },
      "original": {
        "owner": "tinted-theming",
        "repo": "base16-helix",
        "type": "github"
      }
    },
    "base16-vim": {
      "flake": false,
      "locked": {
        "lastModified": 1716150083,
        "narHash": "sha256-ZMhnNmw34ogE5rJZrjRv5MtG3WaqKd60ds2VXvT6hEc=",
        "owner": "tinted-theming",
        "repo": "base16-vim",
        "rev": "6e955d704d046b0dc3e5c2d68a2a6eeffd2b5d3d",
        "type": "github"
      },
      "original": {
        "owner": "tinted-theming",
        "repo": "base16-vim",
        "type": "github"
      }
    },
    "binwarden": {
      "inputs": {
        "nixpkgs": [
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1733864169,
        "narHash": "sha256-nqgwS5UUfpXCS3n0MtzfEkOAB5KBO/VpAqXm89BZ+ig=",
        "owner": "addisonbeck",
        "repo": "binwarden",
        "rev": "9198adb30aed6fc4489d25f97030c9e2e77d20ad",
        "type": "github"
      },
      "original": {
        "owner": "addisonbeck",
        "ref": "main",
        "repo": "binwarden",
        "type": "github"
      }
    },
    "d": {
      "inputs": {
        "nixpkgs": [
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1731020776,
        "narHash": "sha256-eAuIONpT6QZkXBqjfhH2cUD7MELp9TfGqV5k4zJfhLI=",
        "owner": "addisonbeck",
        "repo": "d",
        "rev": "c56b8460ceaa30c4758736062686852b1c5fbf51",
        "type": "github"
      },
      "original": {
        "owner": "addisonbeck",
        "ref": "main",
        "repo": "d",
        "type": "github"
      }
    },
    "darwin": {
      "inputs": {
        "nixpkgs": [
          "agenix",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1700795494,
        "narHash": "sha256-gzGLZSiOhf155FW7262kdHo2YDeugp3VuIFb4/GGng0=",
        "owner": "lnl7",
        "repo": "nix-darwin",
        "rev": "4b9b83d5a92e8c1fbfd8eb27eda375908c11ec4d",
        "type": "github"
      },
      "original": {
        "owner": "lnl7",
        "ref": "master",
        "repo": "nix-darwin",
        "type": "github"
      }
    },
    "devshell": {
      "inputs": {
        "nixpkgs": [
          "nixvim",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1728330715,
        "narHash": "sha256-xRJ2nPOXb//u1jaBnDP56M7v5ldavjbtR6lfGqSvcKg=",
        "owner": "numtide",
        "repo": "devshell",
        "rev": "dd6b80932022cea34a019e2bb32f6fa9e494dfef",
        "type": "github"
      },
      "original": {
        "owner": "numtide",
        "repo": "devshell",
        "type": "github"
      }
    },
    "emacs-overlay": {
      "inputs": {
        "nixpkgs": [
          "nixpkgs"
        ],
        "nixpkgs-stable": "nixpkgs-stable"
      },
      "locked": {
        "lastModified": 1736442082,
        "narHash": "sha256-Z+wS4i2foxmLE+aGV7fJZKN1rvG8tW6d8PL/xXl81wA=",
        "owner": "nix-community",
        "repo": "emacs-overlay",
        "rev": "69ecdf68894d67c91724838d3ef2d35db1a9ea78",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "repo": "emacs-overlay",
        "type": "github"
      }
    },
    "flake-compat": {
      "flake": false,
      "locked": {
        "lastModified": 1673956053,
        "narHash": "sha256-4gtG9iQuiKITOjNQQeQIpoIB6b16fm+504Ch3sNKLd8=",
        "owner": "edolstra",
        "repo": "flake-compat",
        "rev": "35bb57c0c8d8b62bbfd284272c928ceb64ddbde9",
        "type": "github"
      },
      "original": {
        "owner": "edolstra",
        "repo": "flake-compat",
        "type": "github"
      }
    },
    "flake-compat_2": {
      "locked": {
        "lastModified": 1696426674,
        "narHash": "sha256-kvjfFW7WAETZlt09AgDn1MrtKzP7t90Vf7vypd3OL1U=",
        "rev": "0f9255e01c2351cc7d116c072cb317785dd33b33",
        "revCount": 57,
        "type": "tarball",
        "url": "https://api.flakehub.com/f/pinned/edolstra/flake-compat/1.0.1/018afb31-abd1-7bff-a5e4-cff7e18efb7a/source.tar.gz"
      },
      "original": {
        "type": "tarball",
        "url": "https://flakehub.com/f/edolstra/flake-compat/1.tar.gz"
      }
    },
    "flake-compat_3": {
      "flake": false,
      "locked": {
        "lastModified": 1673956053,
        "narHash": "sha256-4gtG9iQuiKITOjNQQeQIpoIB6b16fm+504Ch3sNKLd8=",
        "owner": "edolstra",
        "repo": "flake-compat",
        "rev": "35bb57c0c8d8b62bbfd284272c928ceb64ddbde9",
        "type": "github"
      },
      "original": {
        "owner": "edolstra",
        "repo": "flake-compat",
        "type": "github"
      }
    },
    "flake-parts": {
      "inputs": {
        "nixpkgs-lib": [
          "nixvim",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1733312601,
        "narHash": "sha256-4pDvzqnegAfRkPwO3wmwBhVi/Sye1mzps0zHWYnP88c=",
        "owner": "hercules-ci",
        "repo": "flake-parts",
        "rev": "205b12d8b7cd4802fbcb8e8ef6a0f1408781a4f9",
        "type": "github"
      },
      "original": {
        "owner": "hercules-ci",
        "repo": "flake-parts",
        "type": "github"
      }
    },
    "flake-utils": {
      "inputs": {
        "systems": "systems_2"
      },
      "locked": {
        "lastModified": 1681202837,
        "narHash": "sha256-H+Rh19JDwRtpVPAWp64F+rlEtxUWBAQW28eAi3SRSzg=",
        "owner": "numtide",
        "repo": "flake-utils",
        "rev": "cfacdce06f30d2b68473a46042957675eebb3401",
        "type": "github"
      },
      "original": {
        "owner": "numtide",
        "repo": "flake-utils",
        "type": "github"
      }
    },
    "flake-utils_2": {
      "inputs": {
        "systems": "systems_3"
      },
      "locked": {
        "lastModified": 1731533236,
        "narHash": "sha256-l0KFg5HjrsfsO/JpG+r7fRrqm12kzFHyUHqHCVpMMbI=",
        "owner": "numtide",
        "repo": "flake-utils",
        "rev": "11707dc2f618dd54ca8739b309ec4fc024de578b",
        "type": "github"
      },
      "original": {
        "owner": "numtide",
        "repo": "flake-utils",
        "type": "github"
      }
    },
    "flake-utils_3": {
      "inputs": {
        "systems": [
          "stylix",
          "systems"
        ]
      },
      "locked": {
        "lastModified": 1710146030,
        "narHash": "sha256-SZ5L6eA7HJ/nmkzGG7/ISclqe6oZdOZTNoesiInkXPQ=",
        "owner": "numtide",
        "repo": "flake-utils",
        "rev": "b1d9ab70662946ef0850d488da1c9019f3a9752a",
        "type": "github"
      },
      "original": {
        "owner": "numtide",
        "repo": "flake-utils",
        "type": "github"
      }
    },
    "flake-utils_4": {
      "inputs": {
        "systems": "systems_5"
      },
      "locked": {
        "lastModified": 1731533236,
        "narHash": "sha256-l0KFg5HjrsfsO/JpG+r7fRrqm12kzFHyUHqHCVpMMbI=",
        "owner": "numtide",
        "repo": "flake-utils",
        "rev": "11707dc2f618dd54ca8739b309ec4fc024de578b",
        "type": "github"
      },
      "original": {
        "owner": "numtide",
        "repo": "flake-utils",
        "type": "github"
      }
    },
    "fromYaml": {
      "flake": false,
      "locked": {
        "lastModified": 1689549921,
        "narHash": "sha256-iX0pk/uB019TdBGlaJEWvBCfydT6sRq+eDcGPifVsCM=",
        "owner": "SenchoPens",
        "repo": "fromYaml",
        "rev": "11fbbbfb32e3289d3c631e0134a23854e7865c84",
        "type": "github"
      },
      "original": {
        "owner": "SenchoPens",
        "repo": "fromYaml",
        "type": "github"
      }
    },
    "git-hooks": {
      "inputs": {
        "flake-compat": [
          "nixvim",
          "flake-compat"
        ],
        "gitignore": "gitignore",
        "nixpkgs": [
          "nixvim",
          "nixpkgs"
        ],
        "nixpkgs-stable": [
          "nixvim",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1734425854,
        "narHash": "sha256-nzE5UbJ41aPEKf8R2ZFYtLkqPmF7EIUbNEdHMBLg0Ig=",
        "owner": "cachix",
        "repo": "git-hooks.nix",
        "rev": "0ddd26d0925f618c3a5d85a4fa5eb1e23a09491d",
        "type": "github"
      },
      "original": {
        "owner": "cachix",
        "repo": "git-hooks.nix",
        "type": "github"
      }
    },
    "gitignore": {
      "inputs": {
        "nixpkgs": [
          "nixvim",
          "git-hooks",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1709087332,
        "narHash": "sha256-HG2cCnktfHsKV0s4XW83gU3F57gaTljL9KNSuG6bnQs=",
        "owner": "hercules-ci",
        "repo": "gitignore.nix",
        "rev": "637db329424fd7e46cf4185293b9cc8c88c95394",
        "type": "github"
      },
      "original": {
        "owner": "hercules-ci",
        "repo": "gitignore.nix",
        "type": "github"
      }
    },
    "gnome-shell": {
      "flake": false,
      "locked": {
        "lastModified": 1713702291,
        "narHash": "sha256-zYP1ehjtcV8fo+c+JFfkAqktZ384Y+y779fzmR9lQAU=",
        "owner": "GNOME",
        "repo": "gnome-shell",
        "rev": "0d0aadf013f78a7f7f1dc984d0d812971864b934",
        "type": "github"
      },
      "original": {
        "owner": "GNOME",
        "ref": "46.1",
        "repo": "gnome-shell",
        "type": "github"
      }
    },
    "home-manager": {
      "inputs": {
        "nixpkgs": [
          "agenix",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1703113217,
        "narHash": "sha256-7ulcXOk63TIT2lVDSExj7XzFx09LpdSAPtvgtM7yQPE=",
        "owner": "nix-community",
        "repo": "home-manager",
        "rev": "3bfaacf46133c037bb356193bd2f1765d9dc82c1",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "repo": "home-manager",
        "type": "github"
      }
    },
    "home-manager_2": {
      "inputs": {
        "nixpkgs": [
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1726989464,
        "narHash": "sha256-Vl+WVTJwutXkimwGprnEtXc/s/s8sMuXzqXaspIGlwM=",
        "owner": "nix-community",
        "repo": "home-manager",
        "rev": "2f23fa308a7c067e52dfcc30a0758f47043ec176",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "ref": "release-24.05",
        "repo": "home-manager",
        "type": "github"
      }
    },
    "home-manager_3": {
      "inputs": {
        "nixpkgs": [
          "nixvim",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1734344598,
        "narHash": "sha256-wNX3hsScqDdqKWOO87wETUEi7a/QlPVgpC/Lh5rFOuA=",
        "owner": "nix-community",
        "repo": "home-manager",
        "rev": "83ecd50915a09dca928971139d3a102377a8d242",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "repo": "home-manager",
        "type": "github"
      }
    },
    "home-manager_4": {
      "inputs": {
        "nixpkgs": [
          "stylix",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1724435763,
        "narHash": "sha256-UNky3lJNGQtUEXT2OY8gMxejakSWPTfWKvpFkpFlAfM=",
        "owner": "nix-community",
        "repo": "home-manager",
        "rev": "c2cd2a52e02f1dfa1c88f95abeb89298d46023be",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "repo": "home-manager",
        "type": "github"
      }
    },
    "ixx": {
      "inputs": {
        "flake-utils": [
          "nixvim",
          "nuschtosSearch",
          "flake-utils"
        ],
        "nixpkgs": [
          "nixvim",
          "nuschtosSearch",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1729958008,
        "narHash": "sha256-EiOq8jF4Z/zQe0QYVc3+qSKxRK//CFHMB84aYrYGwEs=",
        "owner": "NuschtOS",
        "repo": "ixx",
        "rev": "9fd01aad037f345350eab2cd45e1946cc66da4eb",
        "type": "github"
      },
      "original": {
        "owner": "NuschtOS",
        "ref": "v0.0.6",
        "repo": "ixx",
        "type": "github"
      }
    },
    "nix-darwin": {
      "inputs": {
        "nixpkgs": [
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1731153869,
        "narHash": "sha256-3Ftf9oqOypcEyyrWJ0baVkRpvQqroK/SVBFLvU3nPuc=",
        "owner": "LnL7",
        "repo": "nix-darwin",
        "rev": "5c74ab862c8070cbf6400128a1b56abb213656da",
        "type": "github"
      },
      "original": {
        "owner": "LnL7",
        "repo": "nix-darwin",
        "type": "github"
      }
    },
    "nix-darwin_2": {
      "inputs": {
        "nixpkgs": [
          "nixvim",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1733570843,
        "narHash": "sha256-sQJAxY1TYWD1UyibN/FnN97paTFuwBw3Vp3DNCyKsMk=",
        "owner": "lnl7",
        "repo": "nix-darwin",
        "rev": "a35b08d09efda83625bef267eb24347b446c80b8",
        "type": "github"
      },
      "original": {
        "owner": "lnl7",
        "repo": "nix-darwin",
        "type": "github"
      }
    },
    "nix-minecraft": {
      "inputs": {
        "flake-compat": "flake-compat",
        "flake-utils": "flake-utils",
        "nixpkgs": [
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1738374527,
        "narHash": "sha256-OcZG42dKolSREIIBM39/kY2TqykihbtYopQSjBbgBjM=",
        "owner": "Infinidoge",
        "repo": "nix-minecraft",
        "rev": "2c815583946bcf1f7327c89fdf9bb4af7f3f5a14",
        "type": "github"
      },
      "original": {
        "owner": "Infinidoge",
        "repo": "nix-minecraft",
        "type": "github"
      }
    },
    "nixpkgs": {
      "locked": {
        "lastModified": 1734424634,
        "narHash": "sha256-cHar1vqHOOyC7f1+tVycPoWTfKIaqkoe1Q6TnKzuti4=",
        "owner": "nixos",
        "repo": "nixpkgs",
        "rev": "d3c42f187194c26d9f0309a8ecc469d6c878ce33",
        "type": "github"
      },
      "original": {
        "owner": "nixos",
        "ref": "nixos-unstable",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs-forked": {
      "locked": {
        "lastModified": 1730088660,
        "narHash": "sha256-qLOhmCxkI6moaPrwTGKzoDkc8SuaV4FmtJxnGHwRvCU=",
        "owner": "addisonbeck",
        "repo": "nixpkgs",
        "rev": "3ebad8b9cd491f43607ad5e875867307b55ceb8a",
        "type": "github"
      },
      "original": {
        "owner": "addisonbeck",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs-stable": {
      "locked": {
        "lastModified": 1736200483,
        "narHash": "sha256-JO+lFN2HsCwSLMUWXHeOad6QUxOuwe9UOAF/iSl1J4I=",
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "3f0a8ac25fb674611b98089ca3a5dd6480175751",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "ref": "nixos-24.11",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixvim": {
      "inputs": {
        "devshell": "devshell",
        "flake-compat": "flake-compat_2",
        "flake-parts": "flake-parts",
        "git-hooks": "git-hooks",
        "home-manager": "home-manager_3",
        "nix-darwin": "nix-darwin_2",
        "nixpkgs": [
          "nixpkgs"
        ],
        "nuschtosSearch": "nuschtosSearch",
        "treefmt-nix": "treefmt-nix"
      },
      "locked": {
        "lastModified": 1734544724,
        "narHash": "sha256-TNUqxDzCew3kDGT2bAXkr0kT+AhVwTiqJTL2DtLr2cA=",
        "owner": "nix-community",
        "repo": "nixvim",
        "rev": "eaa20846279654fa038427ce078d4cd9609e5f2f",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "repo": "nixvim",
        "type": "github"
      }
    },
    "nuschtosSearch": {
      "inputs": {
        "flake-utils": "flake-utils_2",
        "ixx": "ixx",
        "nixpkgs": [
          "nixvim",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1733773348,
        "narHash": "sha256-Y47y+LesOCkJaLvj+dI/Oa6FAKj/T9sKVKDXLNsViPw=",
        "owner": "NuschtOS",
        "repo": "search",
        "rev": "3051be7f403bff1d1d380e4612f0c70675b44fc9",
        "type": "github"
      },
      "original": {
        "owner": "NuschtOS",
        "repo": "search",
        "type": "github"
      }
    },
    "root": {
      "inputs": {
        "agenix": "agenix",
        "binwarden": "binwarden",
        "d": "d",
        "emacs-overlay": "emacs-overlay",
        "home-manager": "home-manager_2",
        "nix-darwin": "nix-darwin",
        "nix-minecraft": "nix-minecraft",
        "nixpkgs": "nixpkgs",
        "nixpkgs-forked": "nixpkgs-forked",
        "nixvim": "nixvim",
        "rust-overlay": "rust-overlay",
        "stylix": "stylix",
        "tmux-popr": "tmux-popr",
        "treefmt-nix": "treefmt-nix_2",
        "where-am-i-nvim": "where-am-i-nvim"
      }
    },
    "rust-overlay": {
      "inputs": {
        "nixpkgs": [
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1736735482,
        "narHash": "sha256-QOA4jCDyyUM9Y2Vba+HSZ/5LdtCMGaTE/7NkkUzBr50=",
        "owner": "oxalica",
        "repo": "rust-overlay",
        "rev": "cf960a1938ee91200fe0d2f7b2582fde2429d562",
        "type": "github"
      },
      "original": {
        "owner": "oxalica",
        "repo": "rust-overlay",
        "type": "github"
      }
    },
    "rust-overlay_2": {
      "inputs": {
        "nixpkgs": [
          "tmux-popr",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1736216977,
        "narHash": "sha256-EMueGrzBpryM8mgOyoyJ7DdNRRk09ug1ggcLLp0WrCQ=",
        "owner": "oxalica",
        "repo": "rust-overlay",
        "rev": "bbe7e4e7a70d235db4bbdcabbf8a2f6671881dd7",
        "type": "github"
      },
      "original": {
        "owner": "oxalica",
        "repo": "rust-overlay",
        "type": "github"
      }
    },
    "stylix": {
      "inputs": {
        "base16": "base16",
        "base16-fish": "base16-fish",
        "base16-helix": "base16-helix",
        "base16-vim": "base16-vim",
        "flake-compat": "flake-compat_3",
        "flake-utils": "flake-utils_3",
        "gnome-shell": "gnome-shell",
        "home-manager": "home-manager_4",
        "nixpkgs": [
          "nixpkgs"
        ],
        "systems": "systems_4",
        "tinted-foot": "tinted-foot",
        "tinted-kitty": "tinted-kitty",
        "tinted-tmux": "tinted-tmux"
      },
      "locked": {
        "lastModified": 1731090365,
        "narHash": "sha256-ti3gXhgVpIUL/7w6zDJuH+hOnyTZqxrIX/yYqALmiEI=",
        "owner": "danth",
        "repo": "stylix",
        "rev": "6863412636c8f2cb3b7360f747fbd020fbfddf68",
        "type": "github"
      },
      "original": {
        "owner": "danth",
        "repo": "stylix",
        "type": "github"
      }
    },
    "systems": {
      "locked": {
        "lastModified": 1681028828,
        "narHash": "sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=",
        "owner": "nix-systems",
        "repo": "default",
        "rev": "da67096a3b9bf56a91d16901293e51ba5b49a27e",
        "type": "github"
      },
      "original": {
        "owner": "nix-systems",
        "repo": "default",
        "type": "github"
      }
    },
    "systems_2": {
      "locked": {
        "lastModified": 1681028828,
        "narHash": "sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=",
        "owner": "nix-systems",
        "repo": "default",
        "rev": "da67096a3b9bf56a91d16901293e51ba5b49a27e",
        "type": "github"
      },
      "original": {
        "owner": "nix-systems",
        "repo": "default",
        "type": "github"
      }
    },
    "systems_3": {
      "locked": {
        "lastModified": 1681028828,
        "narHash": "sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=",
        "owner": "nix-systems",
        "repo": "default",
        "rev": "da67096a3b9bf56a91d16901293e51ba5b49a27e",
        "type": "github"
      },
      "original": {
        "owner": "nix-systems",
        "repo": "default",
        "type": "github"
      }
    },
    "systems_4": {
      "locked": {
        "lastModified": 1681028828,
        "narHash": "sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=",
        "owner": "nix-systems",
        "repo": "default",
        "rev": "da67096a3b9bf56a91d16901293e51ba5b49a27e",
        "type": "github"
      },
      "original": {
        "owner": "nix-systems",
        "repo": "default",
        "type": "github"
      }
    },
    "systems_5": {
      "locked": {
        "lastModified": 1681028828,
        "narHash": "sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=",
        "owner": "nix-systems",
        "repo": "default",
        "rev": "da67096a3b9bf56a91d16901293e51ba5b49a27e",
        "type": "github"
      },
      "original": {
        "owner": "nix-systems",
        "repo": "default",
        "type": "github"
      }
    },
    "tinted-foot": {
      "flake": false,
      "locked": {
        "lastModified": 1726913040,
        "narHash": "sha256-+eDZPkw7efMNUf3/Pv0EmsidqdwNJ1TaOum6k7lngDQ=",
        "owner": "tinted-theming",
        "repo": "tinted-foot",
        "rev": "fd1b924b6c45c3e4465e8a849e67ea82933fcbe4",
        "type": "github"
      },
      "original": {
        "owner": "tinted-theming",
        "repo": "tinted-foot",
        "rev": "fd1b924b6c45c3e4465e8a849e67ea82933fcbe4",
        "type": "github"
      }
    },
    "tinted-kitty": {
      "flake": false,
      "locked": {
        "lastModified": 1716423189,
        "narHash": "sha256-2xF3sH7UIwegn+2gKzMpFi3pk5DlIlM18+vj17Uf82U=",
        "owner": "tinted-theming",
        "repo": "tinted-kitty",
        "rev": "eb39e141db14baef052893285df9f266df041ff8",
        "type": "github"
      },
      "original": {
        "owner": "tinted-theming",
        "repo": "tinted-kitty",
        "rev": "eb39e141db14baef052893285df9f266df041ff8",
        "type": "github"
      }
    },
    "tinted-tmux": {
      "flake": false,
      "locked": {
        "lastModified": 1696725902,
        "narHash": "sha256-wDPg5elZPcQpu7Df0lI5O8Jv4A3T6jUQIVg63KDU+3Q=",
        "owner": "tinted-theming",
        "repo": "tinted-tmux",
        "rev": "c02050bebb60dbb20cb433cd4d8ce668ecc11ba7",
        "type": "github"
      },
      "original": {
        "owner": "tinted-theming",
        "repo": "tinted-tmux",
        "type": "github"
      }
    },
    "tmux-popr": {
      "inputs": {
        "flake-utils": "flake-utils_4",
        "nixpkgs": [
          "nixpkgs"
        ],
        "rust-overlay": "rust-overlay_2"
      },
      "locked": {
        "lastModified": 1736285460,
        "narHash": "sha256-HeZS8JxhdPXn7iT8LkadTdJ0Vfg7xyUXBakNfmT1ZPw=",
        "owner": "addisonbeck",
        "repo": "tmux-popr",
        "rev": "189da2719ddfb8ba3e95c4ba0cee9e23fa792b8a",
        "type": "github"
      },
      "original": {
        "owner": "addisonbeck",
        "ref": "main",
        "repo": "tmux-popr",
        "type": "github"
      }
    },
    "treefmt-nix": {
      "inputs": {
        "nixpkgs": [
          "nixvim",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1733761991,
        "narHash": "sha256-s4DalCDepD22jtKL5Nw6f4LP5UwoMcPzPZgHWjAfqbQ=",
        "owner": "numtide",
        "repo": "treefmt-nix",
        "rev": "0ce9d149d99bc383d1f2d85f31f6ebd146e46085",
        "type": "github"
      },
      "original": {
        "owner": "numtide",
        "repo": "treefmt-nix",
        "type": "github"
      }
    },
    "treefmt-nix_2": {
      "inputs": {
        "nixpkgs": [
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1701958734,
        "narHash": "sha256-3h3EH1FXQkIeAuzaWB+nK0XK54uSD46pp+dMD3gAcB4=",
        "owner": "semnix",
        "repo": "treefmt-nix",
        "rev": "e8cea581dd2b7c9998c1e6662db2c1dc30e7fdb0",
        "type": "github"
      },
      "original": {
        "owner": "semnix",
        "repo": "treefmt-nix",
        "type": "github"
      }
    },
    "treefmt-nix_3": {
      "inputs": {
        "nixpkgs": [
          "where-am-i-nvim",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1701958734,
        "narHash": "sha256-3h3EH1FXQkIeAuzaWB+nK0XK54uSD46pp+dMD3gAcB4=",
        "owner": "semnix",
        "repo": "treefmt-nix",
        "rev": "e8cea581dd2b7c9998c1e6662db2c1dc30e7fdb0",
        "type": "github"
      },
      "original": {
        "owner": "semnix",
        "repo": "treefmt-nix",
        "type": "github"
      }
    },
    "where-am-i-nvim": {
      "inputs": {
        "nixpkgs": [
          "nixpkgs"
        ],
        "treefmt-nix": "treefmt-nix_3"
      },
      "locked": {
        "lastModified": 1735613485,
        "narHash": "sha256-Dwd6B7foNH3wsJRzCe4JyEa6dgVVIJsyPiLvPosYvvM=",
        "owner": "addisonbeck",
        "repo": "where-am-i.nvim",
        "rev": "51dd8e4a465cb29794e587b5e18495f911a035be",
        "type": "github"
      },
      "original": {
        "owner": "addisonbeck",
        "ref": "main",
        "repo": "where-am-i.nvim",
        "type": "github"
      }
    }
  },
  "root": "root",
  "version": 7
}

================
File: flake.nix
================
{
  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";

    nixpkgs-forked.url = "github:addisonbeck/nixpkgs";

    home-manager.url = "github:nix-community/home-manager/release-24.05";
    home-manager.inputs.nixpkgs.follows = "nixpkgs";

    nixvim.url = "github:nix-community/nixvim";
    nixvim.inputs.nixpkgs.follows = "nixpkgs";

    agenix.url = "github:ryantm/agenix";
    agenix.inputs.nixpkgs.follows = "nixpkgs";

    nix-darwin.url = "github:LnL7/nix-darwin";
    nix-darwin.inputs.nixpkgs.follows = "nixpkgs";

    stylix.url = "github:danth/stylix";
    stylix.inputs.nixpkgs.follows = "nixpkgs";

    treefmt-nix.url = "github:semnix/treefmt-nix";
    treefmt-nix.inputs.nixpkgs.follows = "nixpkgs";

    d.url = "github:addisonbeck/d/main";
    d.inputs.nixpkgs.follows = "nixpkgs";

    binwarden.url = "github:addisonbeck/binwarden/main";
    binwarden.inputs.nixpkgs.follows = "nixpkgs";

    nix-minecraft.url = "github:Infinidoge/nix-minecraft";
    nix-minecraft.inputs.nixpkgs.follows = "nixpkgs";

    where-am-i-nvim.url = "github:addisonbeck/where-am-i.nvim/main";
    where-am-i-nvim.inputs.nixpkgs.follows = "nixpkgs";

    tmux-popr.url = "github:addisonbeck/tmux-popr/main";
    tmux-popr.inputs.nixpkgs.follows = "nixpkgs";

    emacs-overlay.url = "github:nix-community/emacs-overlay";
    emacs-overlay.inputs.nixpkgs.follows = "nixpkgs";

    rust-overlay = {
      url = "github:oxalica/rust-overlay";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };

  outputs = {
    self,
    nixpkgs,
    agenix,
    nix-darwin,
    treefmt-nix,
    emacs-overlay,
    rust-overlay,
    ...
  } @ inputs: let
    inherit (self) outputs;
    overlays = [(import rust-overlay) emacs-overlay.overlay];
    supportedSystems = ["x86_64-linux" "aarch64-linux" "x86_64-darwin" "aarch64-darwin"];
    forAllSystemTypes = fn: nixpkgs.lib.genAttrs supportedSystems fn;
    conf = import ./config {};
    rootPath = ./.;
  in {
    nixosConfigurations = {
      minecraft = inputs.nixpkgs.lib.nixosSystem {
        system = "x86_64-linux";
        specialArgs = {
          inherit inputs outputs nixpkgs rootPath conf;
          pkgs-forked = import inputs.nixpkgs-forked {
            inherit overlays;
            system = "x86_64-linux";
            config.allowUnfree = true;
          };
        };
        modules = [./system/minecraft.nix];
      };
      rss = inputs.nixpkgs.lib.nixosSystem {
        system = "x86_64-linux";
        specialArgs = {
          inherit inputs outputs nixpkgs rootPath conf;
        };
        modules = [
          ./system/rss.nix
          agenix.nixosModules.default
        ];
      };
    };
    darwinConfigurations = {
      bw = nix-darwin.lib.darwinSystem {
        system = "aarch64-darwin";
        specialArgs = {
          inherit inputs outputs nixpkgs rootPath conf;
          hostname = "bw";
          pkgs-forked = import inputs.nixpkgs-forked {
            inherit overlays;
            system = "aarch64-darwin";
            config.allowUnfree = true;
          };
          pkgs = import inputs.nixpkgs {
            inherit overlays;
            system = "aarch64-darwin";
            config.allowUnfree = true;
          };
        };
        modules = [./system/bw.nix];
      };
      air = nix-darwin.lib.darwinSystem {
        system = "aarch64-darwin";
        specialArgs = {
          inherit inputs outputs nixpkgs rootPath conf;
          hostname = "air";
          pkgs-forked = import inputs.nixpkgs-forked {
            system = "aarch64-darwin";
            config.allowUnfree = true;
          };
          pkgs = import inputs.nixpkgs {
            inherit overlays;
            system = "aarch64-darwin";
            config.allowUnfree = true;
          };
        };
        modules = [./system/air.nix];
      };
    };
    packages = forAllSystemTypes (system: let
      pkgs = import nixpkgs {inherit system;};
    in {
      neovim =
        inputs.nixvim.legacyPackages.${system}.makeNixvimWithModule
        {
          inherit pkgs;
          extraSpecialArgs = {inherit inputs outputs nixpkgs rootPath conf;};
          module = import ./system/with/user/with/program/neovim/nixvim.nix;
        };
    });
    devShells = forAllSystemTypes (system: let
      pkgs = import nixpkgs {inherit system;};
    in {
      default = pkgs.mkShell {
        inputsFrom = with self.devShells.${system}; [
          building
          managing-secrets
          formatting
          editing
        ];
      };
      building = pkgs.mkShell {
        packages =
          [
            (pkgs.writeScriptBin "update" ''
              nix flake update
            '')
          ]
          ++ pkgs.lib.optionals pkgs.stdenv.isDarwin [
            nix-darwin.packages.${system}.default
            (pkgs.writeScriptBin "rebuild" ''
              darwin-rebuild switch --flake .#"$1"
            '')
          ]
          ++ pkgs.lib.optionals pkgs.stdenv.isLinux [
            nix-darwin.packages.${system}.default
            (pkgs.writeScriptBin "rebuild" ''
              nixos-rebuild switch --flake .#"$1"
            '')
          ];
      };
      formatting = pkgs.mkShell {
        packages = [
          (treefmt-nix.lib.evalModule nixpkgs.legacyPackages.${system} ./treefmt.nix).config.build.wrapper
          (pkgs.writeScriptBin "check" ''
            if [ "$1" == "formatting" ]; then
              echo "Checking formatting..."
              treefmt --fail-on-change --no-cache
            fi
          '')
          (pkgs.writeScriptBin "apply" ''
            if [ "$1" == "formatting" ]; then
              echo "Applying formatting..."
              treefmt --no-cache
            fi
          '')
        ];
      };
      managing-secrets = pkgs.mkShell {
        packages = [
          agenix.packages.${system}.default
        ];
      };
      editing = pkgs.mkShell {
        packages = [
          pkgs.nixd
        ];
      };
      toggle-theme = let
        newSystemTheme =
          if conf.activeTheme.systemTheme == "dark"
          then {
            name = "light";
            darwinBool = "false";
          }
          else {
            name = "dark";
            darwinBool = "true";
          };
      in
        pkgs.mkShell {
          inputsFrom = with self.devShells.${system}; [
            building
          ];
          packages = [
            pkgs.neovim-remote
            (pkgs.writeScriptBin "nix-toggle-theme" ''
              cd ~/nix
              osascript -e 'tell app "System Events" to tell appearance preferences to set dark mode to ${newSystemTheme.darwinBool}' &
              echo "\"${newSystemTheme.name}\"" > "config/system-theme.nix"
              rebuild $1
              kill -SIGUSR1 $KITTY_PID &
              nvr --remote-silent --nostart -s -c "set background=${newSystemTheme.name}" &
            '')
            (pkgs.writeScriptBin "nix-set-colorscheme" ''
              cd ~/nix
              echo "\"$2\"" > "config/colorscheme.nix"
              rebuild $1
              kill -SIGUSR1 $KITTY_PID &
              nvr --remote-silent --nostart -s -c "colorscheme ${conf.activeTheme.colorScheme}" &
            '')
          ];
        };
    });
  };
}

================
File: README.md
================
# 🙈

My terminal-centric systems configuration for darwin and a bit of nixOS.
There is definitely some stuff in here you haven't seen before but it's an
unapologetic mess.

================
File: treefmt.nix
================
{
  projectRootFile = "flake.nix";
  settings.global.excludes = [
    "*.age"
    "*.md"
    "*.lock"
    "*.yml"
    "*.png"
    "*.tf"
    "*.envrc"
    "*.gitignore"
  ];
  programs = {
    alejandra.enable = true; # nix
    #statix.enable = true; # nix static analysis
    #deadnix.enable = true; # find dead nix code
    shellcheck.enable = true; # bash/shell
    #terraform.enable = true;
    stylua.enable = true;
  };
}
