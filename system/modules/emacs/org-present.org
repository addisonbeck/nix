#+TITLE: Org-Present Config
#+PROPERTY: header-args:emacs-lisp :tangle org-present.el :results none

* Timer & Modeline
#+begin_src emacs-lisp
(defvar my/org-present-slide-duration nil
  "Current slide duration in minutes from TARGET_TIME property.")

(defvar my/org-present-slide-end-time nil
  "When the current slide countdown should reach zero.")

(defvar my/org-present-countdown-string ""
  "String shown in the modeline for countdown.")

(defun my/org-present-update-countdown ()
  "Update `my/org-present-countdown-string` with remaining time."
  (when my/org-present-slide-end-time
    (let* ((remaining (float-time (time-subtract my/org-present-slide-end-time
                                                 (current-time))))
           (minutes (floor (/ (abs remaining) 60)))
           (seconds (floor (mod (abs remaining) 60)))
           (face (cond
                  ((> remaining (* my/org-present-slide-duration 30)) '(:foreground "green"))
                  ((> remaining 0)   '(:foreground "orange"))
                  (t                 '(:foreground "red" :weight bold)))))
      (setq my/org-present-countdown-string
            (propertize (format " ‚è± %s%02d:%02d "
                                (if (< remaining 0) "-" "")
                                minutes seconds)
                        'face face))
      (force-mode-line-update))))

(defvar my/org-present-countdown-timer nil
  "Holds the repeating timer object for countdown.")

(defun my/org-present-get-target-time ()
  "Get the TARGET_TIME property from current heading, return as minutes."
  (save-excursion
    (condition-case nil
        (progn
          (org-back-to-heading t)
          (let ((target-time (org-entry-get (point) "TARGET_TIME")))
            (when target-time
              ;; Parse formats like "2m", "30s", "1.5m"
              (cond
               ((string-match "\\([0-9.]+\\)m" target-time)
                (string-to-number (match-string 1 target-time)))
               ((string-match "\\([0-9]+\\)s" target-time)
                (/ (string-to-number (match-string 1 target-time)) 60.0))
               (t (string-to-number target-time))))))
      (error nil))))

(defun my/org-present-start-slide-countdown ()
  "Start countdown timer for current slide based on TARGET_TIME property."
  (interactive)
  (let ((target-minutes (my/org-present-get-target-time)))
    (when target-minutes
      (setq my/org-present-slide-duration target-minutes)
      (setq my/org-present-slide-end-time
            (time-add (current-time) (seconds-to-time (* 60 target-minutes))))
      (unless my/org-present-countdown-timer
        (setq my/org-present-countdown-timer
              (run-at-time t 1 #'my/org-present-update-countdown))))))

(defun my/org-present-start-countdown (&optional minutes)
  "Start a manual countdown timer for MINUTES (for backwards compatibility)."
  (interactive)
  (let ((minutes (or minutes (read-number "Minutes: " 5))))
    (setq my/org-present-slide-duration minutes)
    (setq my/org-present-slide-end-time
          (time-add (current-time) (seconds-to-time (* 60 minutes))))
    (unless my/org-present-countdown-timer
      (setq my/org-present-countdown-timer
            (run-at-time t 1 #'my/org-present-update-countdown)))
    (message "Started %s minute manual timer" minutes)))


(defun my/org-present-stop-countdown ()
  "Stop the countdown timer."
  (interactive)
  (when my/org-present-countdown-timer
    (cancel-timer my/org-present-countdown-timer)
    (setq my/org-present-countdown-timer nil))
  (setq my/org-present-countdown-string "")
  (setq my/org-present-slide-end-time nil)
  (force-mode-line-update))

(defun my/org-present-document-title ()
  "Return the document title (#+TITLE) as plain string, or buffer name."
  (or (car (cdr (assoc "TITLE" (org-collect-keywords '("TITLE")))))
      (buffer-name)))

(defun my/org-present-title-string ()
  "Return the presentation title formatted for the modeline."
  (propertize (my/org-present-document-title)
              'face 'mode-line-buffer-id))  ;; or '(:weight bold) for custom

(defvar my/org-present-speaker-notes ""
  "Current slide's speaker notes for display in modeline.")

(defvar my/org-present-notes-window nil
  "Window used to display persistent speaker notes.")

(defvar my/org-present-notes-buffer nil
  "Buffer used to display persistent speaker notes.")

(defun my/org-present-get-speaker-notes ()
  "Extract speaker notes from current heading's SPEAKER_NOTES property or document properties."
  (save-excursion
    (condition-case nil
        (progn
          ;; Try to get heading-level speaker notes first  
          (org-back-to-heading t)
          (or (org-entry-get (point) "SPEAKER_NOTES") ""))
      (error 
        ;; If we can't find a heading (like on title slide), check file properties
        (save-excursion
          (goto-char (point-min))
          ;; Look for the first properties drawer
          (when (re-search-forward "^[ \t]*:PROPERTIES:" nil t)
            (org-entry-get (point) "SPEAKER_NOTES")))))))

(defface my/org-present-speaker-note-prefix
  '((t (:foreground "grey")))
  "Face for the speaker notes prefix.")

(defface my/org-present-speaker-note-content
  '((t (:foreground "grey")))
  "Face for speaker notes content.")

(defun my/org-present-update-speaker-notes ()
  "Update speaker notes and display in fake echo area."
  (let ((notes (let ((inhibit-message t)) ; This suppresses error messages
                 (my/org-present-get-speaker-notes))))
    (setq my/org-present-speaker-notes (or notes ""))
    (my/org-present-update-fake-echo-area my/org-present-speaker-notes)))

(defun my/org-present-setup-modeline ()
  "Set up a minimal custom modeline for org-present with speaker notes."
  (setq my/org-present-original-modeline mode-line-format)
  (setq mode-line-format
        '(" "
          ;; Document title
          (:eval (my/org-present-title-string))
          "   "
          ;; Timer
          my/org-present-countdown-string
          )))

(defun my/org-present-document-title ()
  "Return the document title (#+TITLE) as plain string, or buffer name."
  (or (car (cdr (assoc "TITLE" (org-collect-keywords '("TITLE")))))
      (buffer-name)))

(defun my/org-present-restore-modeline ()
  "Restore the original modeline after org-present."
  (setq mode-line-format my/org-present-original-modeline))

(defun my/org-present-parse-time-string (time-str)
  "Parse a time string like '2m', '30s', '1.5m' and return minutes as float."
  (when time-str
    (cond
     ((string-match "\\([0-9.]+\\)m" time-str)
      (string-to-number (match-string 1 time-str)))
     ((string-match "\\([0-9]+\\)s" time-str)
      (/ (string-to-number (match-string 1 time-str)) 60.0))
     (t (string-to-number time-str)))))

(defun my/org-present-calculate-total-time ()
  "Calculate total presentation time by summing all TARGET_TIME properties."
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (let ((total-minutes 0.0)
          (slide-count 0))
      ;; Iterate through all headings
      (while (re-search-forward "^\\*+ " nil t)
        (let ((target-time (org-entry-get (point) "TARGET_TIME")))
          (when target-time
            (let ((minutes (my/org-present-parse-time-string target-time)))
              (when minutes
                (setq total-minutes (+ total-minutes minutes))
                (setq slide-count (1+ slide-count)))))))
      ;; Format and display result
      (let* ((total-seconds (* total-minutes 60))
             (hours (floor (/ total-seconds 3600)))
             (minutes (floor (/ (mod total-seconds 3600) 60)))
             (seconds (floor (mod total-seconds 60))))
        (if (> hours 0)
            (message "Total presentation time: %dh %dm %ds (%d slides with timing)"
                     hours minutes seconds slide-count)
          (message "Total presentation time: %dm %ds (%d slides with timing)"
                   minutes seconds slide-count))
        ;; Return the total for programmatic use
        total-minutes)))) 
#+end_src

* Playing Audio
#+begin_src elisp

(defvar presentation-audio-process nil
  "Stores the current audio process for stopping.")

;; Route audio to both speakers and a virtual device
(defun setup-presentation-audio-mac ()
  "Setup audio routing for Mac presentations."
  (interactive)
  (shell-command "SwitchAudioSource -s 'BlackHole 2ch'")
  (message "Audio routed for presentation"))

(defun my/toggle-presentation-song ()
  "Toggle presentation song on/off."
  (interactive)
  ;(setup-presentation-audio-mac)
  (if (and presentation-audio-process 
           (process-live-p presentation-audio-process))
      (progn
        (delete-process presentation-audio-process)
        (message "Audio stopped"))
    (progn
      (setq presentation-audio-process
            (start-process "presentation-audio" nil "ffplay" 
                           "-nodisp" "-autoexit" 
                           "/Users/me/Library/Mobile Documents/com~apple~CloudDocs/notes/audio/mario-sunshine-secret-course.mp3"))
      (message "Audio started"))))
#+end_src

#+RESULTS:
: my/toggle-presentation-song

* Mode Config
#+begin_src emacs-lisp
(defun my/org-present-mode-set-keybindings ()
  (interactive)
  "Sets all my org present mode specific keybindings"
  (evil-define-key 'normal org-present-mode-keymap (kbd "<left>") 'org-present-prev)
  (evil-define-key 'normal org-present-mode-keymap (kbd "<right>") 'org-present-next)
  (evil-define-key 'normal org-present-mode-keymap (kbd "1") 'my/org-present-start-slide-countdown)
  (evil-define-key 'normal org-present-mode-keymap (kbd "2") 'my/org-present-stop-countdown)
  (evil-define-key 'normal org-present-mode-keymap (kbd "3") 'org-present-hide-cursor)
  (evil-define-key 'normal org-present-mode-keymap (kbd "4") 'org-present-show-cursor)
  (evil-define-key 'normal org-present-mode-keymap (kbd "n") 'my/org-present-toggle-speaker-notes)
  (evil-define-key 'normal org-present-mode-keymap (kbd "p") 'my/toggle-presentation-song)
  ;; evil-normal-state is required to get these keybindings to set for some reason.
  (evil-normal-state))

(defvar my/org-present-slide-overlays nil
  "List of overlays created for slide formatting.")

(defun my/org-present-cleanup-slide-overlays ()
  "Clean up all slide formatting overlays."
  (mapc 'delete-overlay my/org-present-slide-overlays)
  (setq my/org-present-slide-overlays nil))

(defun my/org-present-prepare-slide (buffer-name heading)
  ;; Show only top-level headlines
  (my/org-present-cleanup-slide-overlays)
  ;; Add some top margin - but only if we're on an actual heading
  (save-excursion
    (condition-case nil
        (progn
          (org-back-to-heading t)
          (let ((overlay (make-overlay (line-beginning-position) (line-beginning-position))))
            (overlay-put overlay 'before-string "\n")
            (push overlay my/org-present-slide-overlays)))
      (error nil))) ; Silently ignore if no heading (title slide)
  ;; Show only top-level headlines
  (org-overview)
  ;; Unfold the current entry
  (org-show-entry)
  ;; Show only direct subheadings of the slide but don't expand them
  (org-show-children)
  ;; Start gifs
  (org-inline-anim-animate-all)
  ;; Update speaker notes and resize window only on slide changes
  (let ((notes (let ((inhibit-message t))
                 (my/org-present-get-speaker-notes))))
    (setq my/org-present-speaker-notes (or notes ""))
    ;; Resize the window based on new content
    (my/org-present-resize-notes-window my/org-present-speaker-notes)
    ;; Update the display
    (my/org-present-update-fake-echo-area my/org-present-speaker-notes))
  ;; Auto-start timer for this slide if TARGET_TIME exists
  (my/org-present-start-slide-countdown))
(add-hook 'org-present-after-navigate-functions 'my/org-present-prepare-slide)

(defun my/org-present-close-all-drawers ()
  "Close all property drawers in the current buffer."
  (save-excursion
    (goto-char (point-min))
    (org-cycle-hide-drawers 'all)))

(defun my/org-present-start ()
  (setq org-present-hide-stars-in-headings nil)
  (setq org-present-startup-folded nil)
  (setq my/org-present-notes-visible t)
  ;; Prevent real echo area from expanding and interfering with fake echo area
  (setq-local resize-mini-windows nil)  ; Don't resize minibuffer
  (setq-local max-mini-window-height 1)  ; Limit to 1 line
  (my/org-present-create-fake-echo-area)
  ;; Add hooks to clean up fake echo area when transient menus interfere
  (add-hook 'transient-exit-hook #'my/org-present-cleanup-fake-echo-area nil t)
  (my/org-present-close-all-drawers)
  ;(setq org-fontify-whole-heading-line t
  ;    org-fontify-done-headline t)
  (setq org-inline-anim-loop t)
  (let ((bg-color (face-background 'default)))
    (setq-local face-remapping-alist 
          `((org-default (:height 180) variable-pitch)
            ;(variable-pitch (:height 180) variable-pitch)
            ;(header-line (:height 180) variable-pitch)
            ;(org-document-title (:height 340) org-document-title)
            (org-code (:height 140) org-code)
            ;;(org-verbatim (:height 1.55) org-verbatim)
            ;(org-level-1 (:height 300) org-level-1)
            ;(org-level-1 (:height 200 :box (:line-width (0 . 20) :color ,bg-color :style nil)) org-level-1)
            (org-level-1 (:height 300) org-level-1)
            (org-block (:height 140) org-block)
            (org-block-begin-line (:height 160) org-block)
            (org-block-end-line (:height 160) org-block)
            
            ;; Hide property drawers by matching background
            (org-drawer (:foreground ,bg-color :background ,bg-color))
            (org-special-keyword (:foreground ,bg-color :background ,bg-color)))))

  (set-face-attribute 'default nil :family my/variable-width-font)
  (text-scale-adjust 2)  
  (breadcrumb-local-mode 0)
  (my/org-present-mode-set-keybindings)
  (my/enable-olivetti)
  (my/org-present-setup-modeline)
  (olivetti-set-width 80)
  (setq-local org-image-max-width 900)
  (org-redisplay-inline-images)
  (org-indent-mode 0)
  (blink-cursor-mode 0)
  (org-inline-anim-mode 1)
  (org-modern-mode 1)
  (org-present-hide-cursor)
  (setq-local shr-color-visible-luminance-min 0)
  (setq-local shr-color-visible-distance-min 0))

(defun my/org-present-end ()
  (my/org-present-stop-countdown)
  (org-present-show-cursor)
  (my/org-present-restore-modeline)
  (my/org-present-destroy-fake-echo-area)
  ;; Clean up transient hooks
  (remove-hook 'transient-exit-hook #'my/org-present-cleanup-fake-echo-area t)
  (setq-local face-remapping-alist '((default variable-pitch default)))
  (setq-local org-image-max-width 120)
  (org-redisplay-inline-images)
  (org-mode-init)
  (org-indent-mode 1)
  (org-inline-anim-mode 0)
  (blink-cursor-mode 1)
  (org-modern-mode 0)
  (my/org-present-cleanup-slide-overlays))

(add-hook 'org-present-mode-hook 'my/org-present-start)
(add-hook 'org-present-mode-quit-hook 'my/org-present-end)

(defvar my/org-present-notes-window nil
  "Window used to display persistent speaker notes.")

(defvar my/org-present-notes-buffer nil
  "Buffer used to display persistent speaker notes.")

(defvar my/org-present-notes-visible t
  "Whether speaker notes should be displayed.")

(defun my/org-present-cleanup-fake-echo-area ()
  "Clean up fake echo area after transient menu interference."
  (when (bound-and-true-p org-present-mode)
    ;; Refresh the fake echo area with current speaker notes
    (my/org-present-update-fake-echo-area my/org-present-speaker-notes)))

(defun my/org-present-create-fake-echo-area ()
  "Create a fake echo area window for persistent speaker notes."
  (when (not my/org-present-notes-buffer)
    ;; Create the buffer
    (setq my/org-present-notes-buffer (get-buffer-create " *Org Present Notes*"))
    (with-current-buffer my/org-present-notes-buffer
      (setq buffer-read-only t)
      (setq mode-line-format nil)  ; No mode line
      (setq header-line-format nil) ; No header line
      (setq cursor-type nil)       ; No cursor
      ;; Style it like the echo area
      (face-remap-add-relative 'default :inherit 'shadow)))
  
  (when (not (and my/org-present-notes-window 
                  (window-live-p my/org-present-notes-window)))
    ;; Create window at bottom, starting small (will resize dynamically)
    (setq my/org-present-notes-window
          (split-window (frame-root-window) -1 'below))
    (set-window-buffer my/org-present-notes-window my/org-present-notes-buffer)
    (set-window-dedicated-p my/org-present-notes-window t)
    ;; Prevent it from being selected during window cycling
    (set-window-parameter my/org-present-notes-window 'no-other-window t)))

(defun my/org-present-destroy-fake-echo-area ()
  "Clean up the fake echo area window and buffer."
  (when (and my/org-present-notes-window 
             (window-live-p my/org-present-notes-window))
    (delete-window my/org-present-notes-window))
  (setq my/org-present-notes-window nil)
  (when my/org-present-notes-buffer
    (kill-buffer my/org-present-notes-buffer))
  (setq my/org-present-notes-buffer nil))

(defun my/org-present-calculate-window-height (text)
  "Calculate the needed window height for TEXT."
  (if (or (not text) (string-empty-p text))
      1  ; Minimum 1 line for empty notes
    (let* ((window-width (if (and my/org-present-notes-window 
                                  (window-live-p my/org-present-notes-window))
                             (window-width my/org-present-notes-window)
                           80)) ; Fallback width
           (formatted-text (format "%s%s"
                                  "Speaker notes: " ; Don't count face properties for length
                                  text))
           ;; Count explicit newlines + word wrapping
           (explicit-lines (1+ (length (split-string text "\n" t))))
           (text-length (length formatted-text))
           (wrapped-lines (ceiling (/ (float text-length) window-width)))
           (total-lines (max explicit-lines wrapped-lines)))
      ;; Cap at reasonable limits: minimum 1, maximum 6
      (min 6 (max 1 total-lines)))))

(defun my/org-present-resize-notes-window (text)
  "Resize the notes window by recreating it with the correct size."
  (when (and my/org-present-notes-window 
             (window-live-p my/org-present-notes-window))
    (let* ((needed-height (my/org-present-calculate-window-height text))
           (current-height (window-height my/org-present-notes-window))
           ;; Check available space - make sure we don't take more than 1/3 of frame
           (frame-height (frame-height))
           (max-notes-height (max 1 (min 6 (/ frame-height 3))))
           (final-height (min needed-height max-notes-height)))
      (when (and (not (= final-height current-height))
                 (> final-height 0)  ; Sanity check
                 (>= (abs (- final-height current-height)) 1))
        (condition-case err
            ;; Always recreate the window with the correct size
            (let ((old-buffer my/org-present-notes-buffer))
              (delete-window my/org-present-notes-window)
              (setq my/org-present-notes-window
                    (split-window (frame-root-window) (- final-height) 'below))
              (set-window-buffer my/org-present-notes-window old-buffer)
              (set-window-dedicated-p my/org-present-notes-window t)
              (set-window-parameter my/org-present-notes-window 'no-other-window t))
          (error
           ;; If recreation fails, just continue silently
           nil))))))

(defun my/org-present-update-fake-echo-area (text)
  "Update the fake echo area with TEXT (content only, no resizing)."
  (when (and my/org-present-notes-buffer 
             (buffer-live-p my/org-present-notes-buffer)
             my/org-present-notes-visible)
    ;; Only update content, resizing happens separately on slide changes
    (with-current-buffer my/org-present-notes-buffer
      (let ((inhibit-read-only t))
        (erase-buffer)
        (when (and text (not (string-empty-p text)))
          (insert (format "%s%s"
                         (propertize "Speaker notes: " 'face '(:inherit shadow))
                         (propertize text 'face '(:inherit shadow)))))))))

(defun my/org-present-toggle-speaker-notes ()
  "Toggle speaker notes display in fake echo area."
  (interactive)
  (setq my/org-present-notes-visible (not my/org-present-notes-visible))
  (if my/org-present-notes-visible
      (my/org-present-update-fake-echo-area my/org-present-speaker-notes)
    (my/org-present-update-fake-echo-area "")))
#+end_src

