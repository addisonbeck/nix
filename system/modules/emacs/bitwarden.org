#+TITLE: Bitwarden Configuration
#+PROPERTY: header-args:emacs-lisp :tangle bitwarden.el :results none

* Clients
** Installing Npm Deps

#+begin_src emacs-lisp
(defcustom bitwarden-clients-npm-ci-command "npm ci"
  "Commands to run to install npm dependencies in a Bitwarden clients project "
  :type 'string
  :group 'tools)

(defun bitwarden/clients-npm-ci ()
  "Select a project with Projectile and run `bitwarden-clients-npm-ci-command` in it."
  (interactive)
  (my/projectile-run-command-in-selected-project bitwarden-clients-npm-ci-command))
(add-to-list 'my/executer-picker-candidates
             '("bitwarden/clients: npm ci" . bitwarden/clients-npm-ci))
#+end_src

** Typechecking

#+begin_src emacs-lisp
(defcustom bitwarden-clients-test-types-command "npm run test:types"
  "Command to run type tests in Bitwarden clients projects."
  :type 'string
  :group 'tools)

(defun bitwarden/clients-run-test-types ()
  "Select a project with Projectile and run `bitwarden-clients-test-types-command` in it."
  (interactive)
  (my/projectile-run-command-in-selected-project bitwarden-clients-test-types-command))
(add-to-list 'my/executer-picker-candidates
             '("bitwarden/clients: typechecker" . bitwarden/clients-run-test-types))
#+end_src

** Building The Cli
*** With Nx
#+begin_src emacs-lisp
(defcustom bitwarden-clients-nx-bit-build-cli "npx nx build cli --configuration=bit-dev --outputStyle=stream"
  "Command to build the Bitwarden CLI locally with Nx"
  :type 'string
  :group 'tools)
(setq bitwarden-clients-nx-bit-build-cli
      "npx nx build cli --configuration=bit-dev --outputStyle=stream")

(defun bitwarden/cli-nx-build-bit ()
  "Select a project with Projectile and run `bitwarden-clients-nx-bit-build-cli` in it."
  (interactive)
  (my/projectile-run-command-in-selected-project bitwarden-clients-nx-bit-build-cli))
(add-to-list 'my/executer-picker-candidates
             '("bitwarden/clients: nx bit build cli" . bitwarden/cli-nx-build-bit))
#+end_src

*** Classic
#+begin_src emacs-lisp
(defcustom bitwarden-clients-classic-bit-build-cli "cd apps/cli && npm run build:bit"
  "Command to build the Bitwaren CLI locally with npm"
  :type 'string
  :group 'tools)
(setq bitwarden-clients-classic-bit-build-cli
      "cd apps/cli && npm run build:bit")

(defun bitwarden/cli-classic-build-bit ()
  "Select a project with Projectile and run `bitwarden-clients-classic-bit-build-cli` in it."
  (interactive)
  (my/projectile-run-command-in-selected-project bitwarden-clients-classic-bit-build-cli))
(add-to-list 'my/executer-picker-candidates
             '("bitwarden/clients: classic bit build cli" . bitwarden/cli-classic-build-bit))
#+end_src

#+RESULTS:
: ((bitwarden/clients: classic bit build cli . bitwarden/cli-classic-build-bit) (bitwarden/clients: npm ci . bitwarden/clients-npm-ci) (bitwarden/clients: nx bit build cli . bitwarden/cli-nx-build-bit) (bitwarden/clients: npm ci . bitwarden/cli-npm-ci) (bitwarden/clients: typechecker . bitwarden/clients-run-test-types) (nix: update flake . my/nix/flake-update) (nix: format . my/nix/format) (nix: rebuild . my/nix/rebuild))


** Building Web 
*** With Nx
#+begin_src emacs-lisp
(defcustom bitwarden-clients-nx-bit-build-web "npx nx build web --configuration=bit-dev --outputStyle=stream"
  "Command to build the Bitwarden WEB locally with Nx"
  :type 'string
  :group 'tools)
(setq bitwarden-clients-nx-bit-build-web
      "npx nx build web --configuration=bit-dev --outputStyle=stream")

(defun bitwarden/web-nx-build-bit ()
  "Select a project with Projectile and run `bitwarden-clients-nx-bit-build-web` in it."
  (interactive)
  (my/projectile-run-command-in-selected-project bitwarden-clients-nx-bit-build-web))
(add-to-list 'my/executer-picker-candidates
             '("bitwarden/clients: nx bit build web" . bitwarden/web-nx-build-bit))
#+end_src

*** Classic
#+begin_src emacs-lisp
(defcustom bitwarden-clients-classic-bit-build-web "cd apps/web && npm run build:bit"
  "Command to build the Bitwaren web locally with npm"
  :type 'string
  :group 'tools)
(setq bitwarden-clients-classic-bit-build-web
      "cd apps/web && npm run build:bit")

(defun bitwarden/web-classic-build-bit ()
  "Select a project with Projectile and run `bitwarden-clients-classic-bit-build-web` in it."
  (interactive)
  (my/projectile-run-command-in-selected-project bitwarden-clients-classic-bit-build-web))
(add-to-list 'my/executer-picker-candidates
             '("bitwarden/clients: classic bit build web" . bitwarden/web-classic-build-bit))
#+end_src


** Serving Web 

#+begin_src emacs-lisp
(defcustom bitwarden-clients-serve-web-commercial "npx nx serve web --configuration=commercial-dev"
  "Command to build the Bitwarden WEB locally with Nx"
  :type 'string
  :group 'tools)
(setq bitwarden-clients-serve-web-web-commercial
      "npx nx serve web --configuration=commercial-dev")

(defun bitwarden/serve-web-commercial ()
  "Select a project with Projectile and run `bitwarden-clients-serve-web-commercial` in it."
  (interactive)
  (my/projectile-run-command-in-selected-project bitwarden-clients-serve-web-commercial))
(add-to-list 'my/executer-picker-candidates
             '("bitwarden/clients: nx serve web commercial" . bitwarden/serve-web-commercial))
#+end_src

** Serving Browser

#+begin_src emacs-lisp
(defcustom bitwarden-clients-serve-browser "npx nx serve browser"
  "Command to build the Bitwarden BROWSERR locally with Nx"
  :type 'string
  :group 'tools)
(setq bitwarden-clients-serve-web-web-commercial
      "npx nx serve browser")

(defun bitwarden/serve-browser ()
  "Select a project with Projectile and run `bitwarden-clients-serve-browser` in it."
  (interactive)
  (my/projectile-run-command-in-selected-project bitwarden-clients-serve-browser))
(add-to-list 'my/executer-picker-candidates
             '("bitwarden/clients: nx serve browser" . bitwarden/serve-browser))
#+end_src

** Testing Browser

#+begin_src emacs-lisp
(defcustom bitwarden-clients-test-browser "npx nx test browser"
  "Command to build the Bitwarden BROWSERR locally with Nx"
  :type 'string
  :group 'tools)
(setq bitwarden-clients-test-web-web-commercial
      "npx nx test browser")

(defun bitwarden/test-browser ()
  "Select a project with Projectile and run `bitwarden-clients-test-browser` in it."
  (interactive)
  (my/projectile-run-command-in-selected-project bitwarden-clients-test-browser))
(add-to-list 'my/executer-picker-candidates
             '("bitwarden/clients: nx test browser" . bitwarden/test-browser))
#+end_src

** Linting Browser

#+begin_src emacs-lisp
(defcustom bitwarden-clients-lint-browser "npx nx lint browser"
  "Command to build the Bitwarden BROWSERR locally with Nx"
  :type 'string
  :group 'tools)
(setq bitwarden-clients-lint-web-web-commercial
      "npx nx lint browser")

(defun bitwarden/lint-browser ()
  "Select a project with Projectile and run `bitwarden-clients-lint-browser` in it."
  (interactive)
  (my/projectile-run-command-in-selected-project bitwarden-clients-lint-browser))
(add-to-list 'my/executer-picker-candidates
             '("bitwarden/clients: nx lint browser" . bitwarden/lint-browser))
#+end_src
** Building Browser

#+begin_src emacs-lisp
(defcustom bitwarden-clients-build-browser "npx nx build browser"
  "Command to build the Bitwarden BROWSERR locally with Nx"
  :type 'string
  :group 'tools)
(setq bitwarden-clients-build-web-web-commercial
      "npx nx build browser")

(defun bitwarden/build-browser ()
  "Select a project with Projectile and run `bitwarden-clients-build-browser` in it."
  (interactive)
  (my/projectile-run-command-in-selected-project bitwarden-clients-build-browser))
(add-to-list 'my/executer-picker-candidates
             '("bitwarden/clients: nx build browser" . bitwarden/build-browser))
#+end_src
