#+TITLE: Jira Configuration
#+PROPERTY: header-args:emacs-lisp :tangle jira.el :results none

These wrapper functions provide a programmatic interface to the jira cli. 
- Most functions use `shell-command` for interactive operations and `shell-command-to-string` for data retrieval
- Interactive prompts are handled by the underlying jira cli when parameters are omitted
- Optional parameters allow for scriptable, non-interactive usage
- Error handling is delegated to the jira cli tool itself
- All functions require the jira cli to be installed and configured (`jira init`)

To use these functions, first ensure you have:
1. jira cli installed and in your PATH
2. Run `jira init` to configure authentication
3. Load this file or tangle it to jira.el and require it

Example usage:
- `(jira-issue-list "--created week -a$(jira me)")` - List your issues from this week
- `(jira-issue-view "PROJ-123" 5)` - View issue with 5 recent comments
- `(jira-epic-list nil "--table")` - List epics in table format

* Issue Operations

The core functionality for working with Jira issues - listing, viewing, creating and editing tickets.

** List Issues

Basic function to list issues with optional filtering parameters. Returns the raw output from jira cli.

#+begin_src emacs-lisp
(defun jira-issue-list (&optional args)
  "List Jira issues with optional ARGS for filtering.
ARGS can be a string of jira cli flags like '--created week -a$(jira me)'."
  (interactive)
  (let ((cmd (if args
                 (format "jira issue list %s" args)
               "jira issue list")))
    (shell-command-to-string cmd)))
#+end_src

** View Issue Details

Display detailed information about a specific issue in a dedicated buffer with preserved formatting.

#+begin_src emacs-lisp
(defun jira-issue-view (issue-key &optional comments)
  "View details for ISSUE-KEY in a dedicated buffer with preserved formatting.
Optional COMMENTS specifies number of recent comments to show."
  (interactive "sIssue key: ")
  (let* ((cmd (if comments
                  (format "jira issue view %s --comments %s" issue-key comments)
                (format "jira issue view %s" issue-key)))
         (buffer-name (format "*Jira: %s*" issue-key)))
    ;; Use shell-command with output buffer to preserve formatting
    (with-current-buffer (get-buffer-create buffer-name)
      (when (bound-and-true-p view-mode)
        (view-mode -1))  ; Disable view-mode so we can edit the buffer
      (erase-buffer)
      (let ((default-directory default-directory))
        (shell-command cmd (current-buffer)))
      ;; Apply ANSI color formatting
      (ansi-color-apply-on-region (point-min) (point-max))
      (goto-char (point-min))
      (view-mode 1))  ; Enable view-mode for easy navigation
    (switch-to-buffer buffer-name)))
#+end_src

** Create Issue

Create a new Jira issue with interactive prompts or specified parameters.

#+begin_src emacs-lisp
(defun jira-issue-create (&optional type summary priority labels body no-input)
  "Create a new Jira issue.
TYPE: issue type (e.g., 'Bug', 'Task', 'Story')
SUMMARY: issue summary/title
PRIORITY: issue priority (e.g., 'High', 'Medium', 'Low')  
LABELS: comma-separated list of labels
BODY: issue description
NO-INPUT: if t, skip interactive prompts"
  (interactive)
  (let ((cmd "jira issue create"))
    (when type (setq cmd (format "%s -t%s" cmd type)))
    (when summary (setq cmd (format "%s -s\"%s\"" cmd summary)))
    (when priority (setq cmd (format "%s -y%s" cmd priority)))
    (when labels (setq cmd (format "%s -l%s" cmd labels)))
    (when body (setq cmd (format "%s -b\"%s\"" cmd body)))
    (when no-input (setq cmd (format "%s --no-input" cmd)))
    (shell-command cmd)))
#+end_src

** Edit Issue

Edit an existing Jira issue.

#+begin_src emacs-lisp
(defun jira-issue-edit (issue-key &optional summary priority labels body no-input)
  "Edit ISSUE-KEY with optional parameters.
SUMMARY: new summary/title
PRIORITY: new priority 
LABELS: new labels (use -label to remove)
BODY: new description
NO-INPUT: if t, skip interactive prompts"
  (interactive "sIssue key: ")
  (let ((cmd (format "jira issue edit %s" issue-key)))
    (when summary (setq cmd (format "%s -s\"%s\"" cmd summary)))
    (when priority (setq cmd (format "%s -y%s" cmd priority)))
    (when labels (setq cmd (format "%s -l%s" cmd labels)))
    (when body (setq cmd (format "%s -b\"%s\"" cmd body)))
    (when no-input (setq cmd (format "%s --no-input" cmd)))
    (shell-command cmd)))
#+end_src

** Assign Issue

Assign a Jira issue to a user.

#+begin_src emacs-lisp
(defun jira-issue-assign (issue-key assignee)
  "Assign ISSUE-KEY to ASSIGNEE.
ASSIGNEE can be a username, 'default' for default assignee, or 'x' to unassign."
  (interactive "sIssue key: \nsAssignee (username, 'default', or 'x' to unassign): ")
  (let ((cmd (format "jira issue assign %s \"%s\"" issue-key assignee)))
    (shell-command cmd)))
#+end_src

** Move/Transition Issue

Move an issue from one state to another.

#+begin_src emacs-lisp
(defun jira-issue-move (issue-key status &optional comment resolution assignee)
  "Move ISSUE-KEY to STATUS.
Optional COMMENT to add during transition.
Optional RESOLUTION to set.
Optional ASSIGNEE to assign during move."
  (interactive "sIssue key: \nsNew status: ")
  (let ((cmd (format "jira issue move %s \"%s\"" issue-key status)))
    (when comment (setq cmd (format "%s --comment \"%s\"" cmd comment)))
    (when resolution (setq cmd (format "%s -R%s" cmd resolution)))
    (when assignee (setq cmd (format "%s -a%s" cmd assignee)))
    (shell-command cmd)))
#+end_src

** Clone Issue

Clone an existing issue with optional modifications.

#+begin_src emacs-lisp
(defun jira-issue-clone (issue-key &optional summary priority assignee labels replace-text)
  "Clone ISSUE-KEY with optional modifications.
SUMMARY: new summary for cloned issue
PRIORITY: new priority 
ASSIGNEE: new assignee
LABELS: new labels
REPLACE-TEXT: find:replace pattern for summary/description"
  (interactive "sIssue key to clone: ")
  (let ((cmd (format "jira issue clone %s" issue-key)))
    (when summary (setq cmd (format "%s -s\"%s\"" cmd summary)))
    (when priority (setq cmd (format "%s -y%s" cmd priority)))
    (when assignee (setq cmd (format "%s -a%s" cmd assignee)))
    (when labels (setq cmd (format "%s -l%s" cmd labels)))
    (when replace-text (setq cmd (format "%s -H\"%s\"" cmd replace-text)))
    (shell-command cmd)))
#+end_src

** Delete Issue

Delete a Jira issue.

#+begin_src emacs-lisp
(defun jira-issue-delete (issue-key &optional cascade)
  "Delete ISSUE-KEY.
If CASCADE is t, also delete all subtasks."
  (interactive "sIssue key to delete: ")
  (let ((cmd (format "jira issue delete %s" issue-key)))
    (when cascade (setq cmd (format "%s --cascade" cmd)))
    (shell-command cmd)))
#+end_src

* Issue Linking and Comments

Functions for linking issues together and managing comments.

** Link Issues

Link two issues together with a relationship type.

#+begin_src emacs-lisp
(defun jira-issue-link (from-issue to-issue link-type)
  "Link FROM-ISSUE to TO-ISSUE with LINK-TYPE.
LINK-TYPE examples: 'Blocks', 'Relates to', 'Duplicates'."
  (interactive "sFrom issue: \nsTo issue: \nsLink type: ")
  (let ((cmd (format "jira issue link %s %s \"%s\"" from-issue to-issue link-type)))
    (shell-command cmd)))
#+end_src

** Add Remote Link

Add a remote web link to an issue.

#+begin_src emacs-lisp
(defun jira-issue-link-remote (issue-key url title)
  "Add remote web link to ISSUE-KEY.
URL: the web URL to link
TITLE: display text for the link"
  (interactive "sIssue key: \nsURL: \nsLink title: ")
  (let ((cmd (format "jira issue link remote %s \"%s\" \"%s\"" issue-key url title)))
    (shell-command cmd)))
#+end_src

** Unlink Issues

Remove link between two issues.

#+begin_src emacs-lisp
(defun jira-issue-unlink (from-issue to-issue)
  "Unlink FROM-ISSUE and TO-ISSUE."
  (interactive "sFrom issue: \nsTo issue: ")
  (let ((cmd (format "jira issue unlink %s %s" from-issue to-issue)))
    (shell-command cmd)))
#+end_src

** Add Comment

Add a comment to an issue.

#+begin_src emacs-lisp
(defun jira-issue-comment-add (issue-key comment &optional internal template)
  "Add COMMENT to ISSUE-KEY.
INTERNAL: if t, make comment internal
TEMPLATE: path to template file or '-' for stdin"
  (interactive "sIssue key: \nsComment: ")
  (let ((cmd (format "jira issue comment add %s" issue-key)))
    (cond
     (template (setq cmd (format "%s --template \"%s\"" cmd template)))
     (comment (setq cmd (format "%s \"%s\"" cmd comment))))
    (when internal (setq cmd (format "%s --internal" cmd)))
    (shell-command cmd)))
#+end_src

** Add Worklog

Add time logging to an issue.

#+begin_src emacs-lisp
(defun jira-issue-worklog-add (issue-key time-spent &optional comment no-input)
  "Add worklog to ISSUE-KEY for TIME-SPENT.
TIME-SPENT: duration like '2d 3h 30m' or '1h 15m'
COMMENT: optional comment for the worklog
NO-INPUT: if t, skip interactive prompts"
  (interactive "sIssue key: \nsTime spent (e.g., '2h 30m'): ")
  (let ((cmd (format "jira issue worklog add %s \"%s\"" issue-key time-spent)))
    (when comment (setq cmd (format "%s --comment \"%s\"" cmd comment)))
    (when no-input (setq cmd (format "%s --no-input" cmd)))
    (shell-command cmd)))
#+end_src

* Epic Operations

Functions for working with Jira epics - larger work containers that group related issues.

** List Epics

List epics with optional filtering, or list issues in a specific epic.

#+begin_src emacs-lisp
(defun jira-epic-list (&optional epic-key args table-view)
  "List epics or issues in EPIC-KEY.
If EPIC-KEY is provided, lists issues in that epic.
ARGS: optional filtering arguments
TABLE-VIEW: if t, display in table format instead of explorer view"
  (interactive)
  (let ((cmd "jira epic list"))
    (when epic-key (setq cmd (format "%s %s" cmd epic-key)))
    (when table-view (setq cmd (format "%s --table" cmd)))
    (when args (setq cmd (format "%s %s" cmd args)))
    (shell-command-to-string cmd)))
#+end_src

** Create Epic

Create a new epic with the specified parameters.

#+begin_src emacs-lisp
(defun jira-epic-create (epic-name summary &optional priority labels body)
  "Create a new epic.
EPIC-NAME: name of the epic (separate from summary)
SUMMARY: epic summary/title
PRIORITY: epic priority
LABELS: comma-separated labels
BODY: epic description"
  (interactive "sEpic name: \nsSummary: ")
  (let ((cmd (format "jira epic create -n\"%s\" -s\"%s\"" epic-name summary)))
    (when priority (setq cmd (format "%s -y%s" cmd priority)))
    (when labels (setq cmd (format "%s -l%s" cmd labels)))
    (when body (setq cmd (format "%s -b\"%s\"" cmd body)))
    (shell-command cmd)))
#+end_src

** Add Issues to Epic

Add one or more issues to an epic.

#+begin_src emacs-lisp
(defun jira-epic-add (epic-key &rest issue-keys)
  "Add ISSUE-KEYS to EPIC-KEY.
Can add up to 50 issues at once."
  (interactive "sEpic key: ")
  (when (called-interactively-p 'any)
    (let ((issues (read-string "Issue keys (space-separated): ")))
      (setq issue-keys (split-string issues))))
  (let ((cmd (format "jira epic add %s %s" epic-key (string-join issue-keys " "))))
    (shell-command cmd)))
#+end_src

** Remove Issues from Epic

Remove one or more issues from an epic.

#+begin_src emacs-lisp
(defun jira-epic-remove (&rest issue-keys)
  "Remove ISSUE-KEYS from their epic.
Can remove up to 50 issues at once."
  (interactive)
  (when (called-interactively-p 'any)
    (let ((issues (read-string "Issue keys to remove (space-separated): ")))
      (setq issue-keys (split-string issues))))
  (let ((cmd (format "jira epic remove %s" (string-join issue-keys " "))))
    (shell-command cmd)))
#+end_src

* Sprint Operations

Functions for working with agile sprints and sprint planning.

** List Sprints

List sprints or issues in a specific sprint.

#+begin_src emacs-lisp
(defun jira-sprint-list (&optional sprint-id args table-view current prev next state)
  "List sprints or issues in SPRINT-ID.
SPRINT-ID: specific sprint to show issues for
ARGS: additional filtering arguments for issues
TABLE-VIEW: if t, show in table format
CURRENT: if t, show current active sprint
PREV: if t, show previous sprint  
NEXT: if t, show next planned sprint
STATE: comma-separated sprint states (future,active,closed)"
  (interactive)
  (let ((cmd "jira sprint list"))
    (cond
     (current (setq cmd (format "%s --current" cmd)))
     (prev (setq cmd (format "%s --prev" cmd)))
     (next (setq cmd (format "%s --next" cmd)))
     (sprint-id (setq cmd (format "%s %s" cmd sprint-id))))
    (when table-view (setq cmd (format "%s --table" cmd)))
    (when state (setq cmd (format "%s --state %s" cmd state)))
    (when args (setq cmd (format "%s %s" cmd args)))
    (shell-command-to-string cmd)))
#+end_src

** Add Issues to Sprint

Add one or more issues to a sprint.

#+begin_src emacs-lisp
(defun jira-sprint-add (sprint-id &rest issue-keys)
  "Add ISSUE-KEYS to SPRINT-ID.
Can add up to 50 issues at once."
  (interactive "sSprint ID: ")
  (when (called-interactively-p 'any)
    (let ((issues (read-string "Issue keys (space-separated): ")))
      (setq issue-keys (split-string issues))))
  (let ((cmd (format "jira sprint add %s %s" sprint-id (string-join issue-keys " "))))
    (shell-command cmd)))
#+end_src

* Project and Navigation Utilities

Helper functions for project management and quick navigation.

** Get Current User

Get the current authenticated user's account information.

#+begin_src emacs-lisp
(defun jira-me ()
  "Get current user's account name/email."
  (interactive)
  (string-trim (shell-command-to-string "jira me")))
#+end_src

** Open in Browser

Open Jira project or specific issue in the web browser.

#+begin_src emacs-lisp
(defun jira-open (&optional issue-key)
  "Open Jira project or ISSUE-KEY in browser."
  (interactive "sIssue key (optional): ")
  (let ((cmd (if (and issue-key (not (string-empty-p issue-key)))
                 (format "jira open %s" issue-key)
               "jira open")))
    (shell-command cmd)))
#+end_src

** List Projects

List all accessible Jira projects.

#+begin_src emacs-lisp
(defun jira-project-list ()
  "List all accessible Jira projects."
  (interactive)
  (shell-command-to-string "jira project list"))
#+end_src

** List Boards

List all boards in the current project.

#+begin_src emacs-lisp
(defun jira-board-list ()
  "List all boards in the current project."
  (interactive)
  (shell-command-to-string "jira board list"))
#+end_src

** List Releases

List project releases/versions.

#+begin_src emacs-lisp
(defun jira-release-list (&optional project)
  "List releases for PROJECT (or default project if not specified)."
  (interactive)
  (let ((cmd "jira release list"))
    (when project (setq cmd (format "%s --project %s" cmd project)))
    (shell-command-to-string cmd)))
#+end_src

* Search and Discovery

Enhanced search functions that provide interactive interfaces for finding and selecting Jira issues.

** Browse and View Issues

Main function for searching issues with vertico and automatically viewing the selection.

#+begin_src emacs-lisp
(defun jira-browse-issues (&optional query)
  "Browse and view Jira issues with vertico completion.
Searches issues, presents them in vertico for selection, then automatically views the chosen issue.
QUERY can pre-filter the results with jira cli arguments.
Display format: [TYPE] [ID] [STATUS] [ASSIGNED TO] | [TITLE]"
  (interactive)
  (let* ((columns "--plain --columns type,key,status,assignee,summary --no-headers")
         (raw-output (jira-issue-list (if query 
                                          (format "%s %s" query columns)
                                        columns)))
         (lines (split-string raw-output "\n" t))
         (issues (mapcar (lambda (line)
                          (let ((parts (split-string line "\t" t)))
                            (when (>= (length parts) 5)
                              (let* ((type (or (nth 0 parts) "Unknown"))
                                     (key (or (nth 1 parts) ""))
                                     (status (or (nth 2 parts) "No Status"))
                                     (assignee (or (nth 3 parts) "Unassigned"))
                                     (summary (or (nth 4 parts) "No Summary"))
                                     (display (format "[%s] [%s] [%s] [%s] | %s" 
                                                     type key status assignee summary)))
                                (cons display key)))))
                        lines))
         (filtered-issues (seq-filter #'identity issues)))
    (if filtered-issues
        (let* ((selection (completing-read "Browse issue: " filtered-issues nil t))
               (issue-key (cdr (assoc selection filtered-issues))))
          (when issue-key
            (jira-issue-view issue-key)))
      (message "No issues found"))))
#+end_src

** Interactive Issue Search

Search and select issues with completion-based interface. Returns the selected issue key without viewing.

#+begin_src emacs-lisp
(defun jira-search-issues (&optional query)
  "Interactive search for Jira issues with completion.
Returns the selected issue key. QUERY can pre-filter the results."
  (interactive)
  (let* ((raw-output (jira-issue-list (or query "--plain --columns key,summary --no-headers")))
         (lines (split-string raw-output "\n" t))
         (issues (mapcar (lambda (line)
                          (let ((parts (split-string line "\t" t)))
                            (when (>= (length parts) 2)
                              (cons (format "%s: %s" (car parts) (cadr parts))
                                    (car parts)))))
                        lines))
         (filtered-issues (seq-filter #'identity issues)))
    (if filtered-issues
        (let ((selection (completing-read "Select issue: " filtered-issues nil t)))
          (cdr (assoc selection filtered-issues)))
      (message "No issues found")
      nil)))
#+end_src

** Advanced Search with Filters

Comprehensive search function with vertico completion for common options.

#+begin_src emacs-lisp
(defun jira-search-issues-advanced ()
  "Advanced interactive search with vertico completion for common options."
  (interactive)
  (let* (;; Get recent assignees and reporters from actual issues
         (recent-issues (jira-issue-list "--plain --columns assignee,reporter --no-headers"))
         (issue-lines (split-string recent-issues "\n" t))
         
         ;; Extract unique assignees and reporters from recent issues
         ;; Note: jira CLI includes issue key as first column even when not requested
         (recent-assignees (delete-dups
                           (mapcar (lambda (line)
                                    (let ((parts (split-string line "\t" t)))
                                      (when (>= (length parts) 2)
                                        (string-trim (nth 1 parts))))) ; Assignee is 2nd column
                                  issue-lines)))
         (recent-reporters (delete-dups
                           (mapcar (lambda (line)
                                    (let ((parts (split-string line "\t" t)))
                                      (when (>= (length parts) 3)
                                        (string-trim (nth 2 parts))))) ; Reporter is 3rd column
                                  issue-lines)))
         
         ;; Use actual Bitwarden Jira statuses and priorities
         (status-options '("" "Abandoned" "Blocked" "Code Review" "Done" "In Analysis" 
                          "In Progress" "Needs Triage" "Product Review" "Ready for QA" 
                          "Reproduced" "To Do" "Triaged"))
         (priority-options '("" "Blocker" "High" "Medium" "Low"))
         (time-options '("" "today" "week" "month" "year" "-1d" "-3d" "-7d" "-14d" "-30d"))
         (assignee-options (delete-dups (append '("" "me" "x") 
                                               (seq-filter (lambda (x) (and x (not (string-empty-p x)))) 
                                                          recent-assignees))))
         (reporter-options (delete-dups (append '("" "me") 
                                               (seq-filter (lambda (x) (and x (not (string-empty-p x)))) 
                                                          recent-reporters))))
         
         ;; Interactive selections with vertico (allowing free-form input)
         (assignee (completing-read "Assignee (empty=all, me=self, x=unassigned, or type name): " 
                                   assignee-options nil nil))
         (status (completing-read "Status (empty=all, or type custom): " 
                                 status-options nil nil))
         (priority (completing-read "Priority (empty=all): " 
                                   priority-options nil nil))
         (created (completing-read "Created (empty=all): " 
                                  time-options nil nil))
         (labels (read-string "Labels (comma-separated, empty=all): "))
         (reporter (completing-read "Reporter (empty=all, me=self, or type name): " 
                                   reporter-options nil nil))
         (args '()))
    
    ;; Build filter arguments
    (when (not (string-empty-p assignee))
      (cond
       ((string= assignee "me") (push (format "-a%s" (jira-me)) args))
       ((string= assignee "x") (push "-ax" args))
       (t (push (format "-a\"%s\"" assignee) args))))
    
    (when (not (string-empty-p status))
      (push (format "-s\"%s\"" status) args))
    
    (when (not (string-empty-p priority))
      (push (format "-y%s" priority) args))
    
    (when (not (string-empty-p created))
      (cond
       ((member created '("today" "week" "month" "year"))
        (push (format "--created %s" created) args))
       ((string-match "^-[0-9]+[dwmy]$" created)
        (push (format "--created %s" created) args))
       (t (push (format "--created \"%s\"" created) args))))
    
    (when (not (string-empty-p labels))
      (dolist (label (split-string labels "," t))
        (push (format "-l%s" (string-trim label)) args)))
    
    (when (not (string-empty-p reporter))
      (if (string= reporter "me")
          (push (format "-r%s" (jira-me)) args)
        (push (format "-r\"%s\"" reporter) args)))
    
    ;; Execute search
    (let ((query (string-join (reverse args) " ")))
      (if args
          (jira-browse-issues query)
        (jira-browse-issues)))))
#+end_src

** Quick Search Helpers

Convenient shortcuts for common search patterns with enhanced display.

#+begin_src emacs-lisp
(defun jira-search-my-issues ()
  "Browse and view issues assigned to me with enhanced display."
  (interactive)
  (jira-browse-issues (format "-a%s" (jira-me))))

(defun jira-search-recent-issues ()
  "Browse and view issues created this week with enhanced display."
  (interactive)
  (jira-browse-issues "--created week"))

(defun jira-search-high-priority ()
  "Browse and view high priority issues with enhanced display."
  (interactive)
  (jira-browse-issues "-yHigh"))

(defun jira-search-unassigned ()
  "Browse and view unassigned issues with enhanced display."
  (interactive)
  (jira-browse-issues "-ax"))
#+end_src
